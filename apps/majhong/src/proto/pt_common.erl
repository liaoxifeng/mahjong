%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.4.0
-module(pt_common).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([enum_symbol_by_value_EnumS2CTipsShowType/1, enum_value_by_symbol_EnumS2CTipsShowType/1]).
-export([enum_symbol_by_value_EnumS2CErrCode/1, enum_value_by_symbol_EnumS2CErrCode/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("pt_common.hrl").
-include_lib("gpb/include/gpb.hrl").

%% enumerated types
-type 'EnumS2CTipsShowType'() :: 'E_S2CTipsShowType_PopUp' | 'E_S2CTipsShowType_Marquee'.
-type 'EnumS2CErrCode'() :: 'E_S2CErrCode_Succ' | 'E_S2CErrCode_Sys' | 'E_S2CErrCode_Busy' | 'E_S2CErrCode_OpToFrequency' | 'E_S2CErrCode_ReLogin' | 'E_S2CErrCode_NotLogin' | 'E_S2CErrCode_LoginCheckTimeout' | 'E_S2CErrCode_LoginCheckNotThrough' | 'E_S2CErrCode_ErrArgs' | 'E_S2CErrCode_ProtoErr' | 'E_S2CErrCode_LoginTokenInvalid' | 'E_S2CErrCode_BeKicked' | 'E_S2CErrCode_NotEnoughMoney'.
-export_type(['EnumS2CTipsShowType'/0, 'EnumS2CErrCode'/0]).

%% message types
-type 'Struct_DeviceInfo'() :: #'Struct_DeviceInfo'{}.

-type 'S2C_PlayerInfo1'() :: #'S2C_PlayerInfo1'{}.

-type 'Struct_RoomBrief'() :: #'Struct_RoomBrief'{}.

-type 'Struct_RoomPlayerBrief'() :: #'Struct_RoomPlayerBrief'{}.

-type 'C2S_Login'() :: #'C2S_Login'{}.

-type 'S2C_Login'() :: #'S2C_Login'{}.

-type 'S2C_Err'() :: #'S2C_Err'{}.

-type 'C2S_Heartbeat'() :: #'C2S_Heartbeat'{}.

-type 'S2C_Heartbeat'() :: #'S2C_Heartbeat'{}.

-type 'C2S_Gm'() :: #'C2S_Gm'{}.

-type 'S2C_Gm'() :: #'S2C_Gm'{}.

-export_type(['Struct_DeviceInfo'/0, 'S2C_PlayerInfo1'/0, 'Struct_RoomBrief'/0, 'Struct_RoomPlayerBrief'/0, 'C2S_Login'/0, 'S2C_Login'/0, 'S2C_Err'/0, 'C2S_Heartbeat'/0, 'S2C_Heartbeat'/0, 'C2S_Gm'/0, 'S2C_Gm'/0]).

-spec encode_msg(#'Struct_DeviceInfo'{} | #'S2C_PlayerInfo1'{} | #'Struct_RoomBrief'{} | #'Struct_RoomPlayerBrief'{} | #'C2S_Login'{} | #'S2C_Login'{} | #'S2C_Err'{} | #'C2S_Heartbeat'{} | #'S2C_Heartbeat'{} | #'C2S_Gm'{} | #'S2C_Gm'{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#'Struct_DeviceInfo'{} | #'S2C_PlayerInfo1'{} | #'Struct_RoomBrief'{} | #'Struct_RoomPlayerBrief'{} | #'C2S_Login'{} | #'S2C_Login'{} | #'S2C_Err'{} | #'C2S_Heartbeat'{} | #'S2C_Heartbeat'{} | #'C2S_Gm'{} | #'S2C_Gm'{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#'Struct_DeviceInfo'{} | #'S2C_PlayerInfo1'{} | #'Struct_RoomBrief'{} | #'Struct_RoomPlayerBrief'{} | #'C2S_Login'{} | #'S2C_Login'{} | #'S2C_Err'{} | #'C2S_Heartbeat'{} | #'S2C_Heartbeat'{} | #'C2S_Gm'{} | #'S2C_Gm'{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Struct_DeviceInfo' ->
	  encode_msg_Struct_DeviceInfo(id(Msg, TrUserData),
				       TrUserData);
      'S2C_PlayerInfo1' ->
	  encode_msg_S2C_PlayerInfo1(id(Msg, TrUserData),
				     TrUserData);
      'Struct_RoomBrief' ->
	  encode_msg_Struct_RoomBrief(id(Msg, TrUserData),
				      TrUserData);
      'Struct_RoomPlayerBrief' ->
	  encode_msg_Struct_RoomPlayerBrief(id(Msg, TrUserData),
					    TrUserData);
      'C2S_Login' ->
	  encode_msg_C2S_Login(id(Msg, TrUserData), TrUserData);
      'S2C_Login' ->
	  encode_msg_S2C_Login(id(Msg, TrUserData), TrUserData);
      'S2C_Err' ->
	  encode_msg_S2C_Err(id(Msg, TrUserData), TrUserData);
      'C2S_Heartbeat' ->
	  encode_msg_C2S_Heartbeat(id(Msg, TrUserData),
				   TrUserData);
      'S2C_Heartbeat' ->
	  encode_msg_S2C_Heartbeat(id(Msg, TrUserData),
				   TrUserData);
      'C2S_Gm' ->
	  encode_msg_C2S_Gm(id(Msg, TrUserData), TrUserData);
      'S2C_Gm' ->
	  encode_msg_S2C_Gm(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_Struct_DeviceInfo(Msg, TrUserData) ->
    encode_msg_Struct_DeviceInfo(Msg, <<>>, TrUserData).


encode_msg_Struct_DeviceInfo(#'Struct_DeviceInfo'{os =
						      F1,
						  deviceType = F2,
						  resolution = F3,
						  network = F4},
			     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
	 end,
    begin
      TrF4 = id(F4, TrUserData),
      e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
    end.

encode_msg_S2C_PlayerInfo1(Msg, TrUserData) ->
    encode_msg_S2C_PlayerInfo1(Msg, <<>>, TrUserData).


encode_msg_S2C_PlayerInfo1(#'S2C_PlayerInfo1'{moneyLeft
						  = F1},
			   Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_varint(TrF1, <<Bin/binary, 16>>, TrUserData)
    end.

encode_msg_Struct_RoomBrief(Msg, TrUserData) ->
    encode_msg_Struct_RoomBrief(Msg, <<>>, TrUserData).


encode_msg_Struct_RoomBrief(#'Struct_RoomBrief'{roomId =
						    F1,
						gameId = F2, playerCount = F3,
						isLocked = F4, ownerId = F5},
			    Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_bool(TrF4, <<B3/binary, 32>>, TrUserData)
	 end,
    begin
      TrF5 = id(F5, TrUserData),
      e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
    end.

encode_msg_Struct_RoomPlayerBrief(Msg, TrUserData) ->
    encode_msg_Struct_RoomPlayerBrief(Msg, <<>>,
				      TrUserData).


encode_msg_Struct_RoomPlayerBrief(#'Struct_RoomPlayerBrief'{id
								= F1,
							    nickname = F2,
							    avatar = F3},
				  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 26>>, TrUserData)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_type_string(TrF3, <<B2/binary, 34>>, TrUserData)
    end.

encode_msg_C2S_Login(Msg, TrUserData) ->
    encode_msg_C2S_Login(Msg, <<>>, TrUserData).


encode_msg_C2S_Login(#'C2S_Login'{token = F1,
				  version = F2, device = F3},
		     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 18>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_varint(TrF2, <<B1/binary, 24>>, TrUserData)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_mfield_C2S_Login_device(TrF3, <<B2/binary, 34>>,
				TrUserData)
    end.

encode_msg_S2C_Login(Msg, TrUserData) ->
    encode_msg_S2C_Login(Msg, <<>>, TrUserData).


encode_msg_S2C_Login(#'S2C_Login'{id = F1,
				  nickname = F2, money = F3, rooms = F4,
				  notFinishedRoom = F5},
		     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 26>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_varint(TrF3, <<B2/binary, 32>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   if TrF4 == [] -> B3;
	      true -> e_field_S2C_Login_rooms(TrF4, B3, TrUserData)
	   end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     e_mfield_S2C_Login_notFinishedRoom(TrF5,
						<<B4/binary, 90>>, TrUserData)
	   end
    end.

encode_msg_S2C_Err(Msg, TrUserData) ->
    encode_msg_S2C_Err(Msg, <<>>, TrUserData).


encode_msg_S2C_Err(#'S2C_Err'{code = F1, type = F2,
			      msg = F3},
		   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_enum_EnumS2CErrCode(TrF1, <<Bin/binary, 8>>,
				 TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_enum_EnumS2CTipsShowType(TrF2, <<B1/binary, 16>>,
				      TrUserData)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
    end.

encode_msg_C2S_Heartbeat(_Msg, _TrUserData) -> <<>>.

encode_msg_S2C_Heartbeat(_Msg, _TrUserData) -> <<>>.

encode_msg_C2S_Gm(Msg, TrUserData) ->
    encode_msg_C2S_Gm(Msg, <<>>, TrUserData).


encode_msg_C2S_Gm(#'C2S_Gm'{cmd = F1, seqId = F2,
			    arg1 = F3, arg2 = F4, arg3 = F5, arg4 = F6,
			    arg5 = F7, arg6 = F8, arg7 = F9, arg8 = F10,
			    arg9 = F11},
		  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_type_string(TrF3, <<B2/binary, 90>>, TrUserData)
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_type_string(TrF4, <<B3/binary, 98>>, TrUserData)
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  e_type_string(TrF5, <<B4/binary, 106>>, TrUserData)
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  e_type_string(TrF6, <<B5/binary, 114>>, TrUserData)
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  e_type_string(TrF7, <<B6/binary, 122>>, TrUserData)
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  e_type_string(TrF8, <<B7/binary, 130, 1>>, TrUserData)
		end
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  e_type_string(TrF9, <<B8/binary, 138, 1>>, TrUserData)
		end
	 end,
    B10 = if F10 == undefined -> B9;
	     true ->
		 begin
		   TrF10 = id(F10, TrUserData),
		   e_type_string(TrF10, <<B9/binary, 146, 1>>, TrUserData)
		 end
	  end,
    if F11 == undefined -> B10;
       true ->
	   begin
	     TrF11 = id(F11, TrUserData),
	     e_type_string(TrF11, <<B10/binary, 154, 1>>, TrUserData)
	   end
    end.

encode_msg_S2C_Gm(Msg, TrUserData) ->
    encode_msg_S2C_Gm(Msg, <<>>, TrUserData).


encode_msg_S2C_Gm(#'S2C_Gm'{seqId = F1, code = F2}, Bin,
		  TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 16>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_int32(TrF2, <<B1/binary, 24>>, TrUserData)
    end.

e_mfield_C2S_Login_device(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Struct_DeviceInfo(Msg, <<>>,
					  TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_S2C_Login_rooms(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Struct_RoomBrief(Msg, <<>>,
					 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_S2C_Login_rooms([Elem | Rest], Bin,
			TrUserData) ->
    Bin2 = <<Bin/binary, 82>>,
    Bin3 = e_mfield_S2C_Login_rooms(id(Elem, TrUserData),
				    Bin2, TrUserData),
    e_field_S2C_Login_rooms(Rest, Bin3, TrUserData);
e_field_S2C_Login_rooms([], Bin, _TrUserData) -> Bin.

e_mfield_S2C_Login_notFinishedRoom(Msg, Bin,
				   TrUserData) ->
    SubBin = encode_msg_Struct_RoomBrief(Msg, <<>>,
					 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_enum_EnumS2CTipsShowType('E_S2CTipsShowType_PopUp',
			   Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_enum_EnumS2CTipsShowType('E_S2CTipsShowType_Marquee',
			   Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_enum_EnumS2CTipsShowType(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

e_enum_EnumS2CErrCode('E_S2CErrCode_Succ', Bin,
		      _TrUserData) ->
    <<Bin/binary, 0>>;
e_enum_EnumS2CErrCode('E_S2CErrCode_Sys', Bin,
		      _TrUserData) ->
    <<Bin/binary, 1>>;
e_enum_EnumS2CErrCode('E_S2CErrCode_Busy', Bin,
		      _TrUserData) ->
    <<Bin/binary, 2>>;
e_enum_EnumS2CErrCode('E_S2CErrCode_OpToFrequency', Bin,
		      _TrUserData) ->
    <<Bin/binary, 3>>;
e_enum_EnumS2CErrCode('E_S2CErrCode_ReLogin', Bin,
		      _TrUserData) ->
    <<Bin/binary, 4>>;
e_enum_EnumS2CErrCode('E_S2CErrCode_NotLogin', Bin,
		      _TrUserData) ->
    <<Bin/binary, 5>>;
e_enum_EnumS2CErrCode('E_S2CErrCode_LoginCheckTimeout',
		      Bin, _TrUserData) ->
    <<Bin/binary, 6>>;
e_enum_EnumS2CErrCode('E_S2CErrCode_LoginCheckNotThrough',
		      Bin, _TrUserData) ->
    <<Bin/binary, 7>>;
e_enum_EnumS2CErrCode('E_S2CErrCode_ErrArgs', Bin,
		      _TrUserData) ->
    <<Bin/binary, 8>>;
e_enum_EnumS2CErrCode('E_S2CErrCode_ProtoErr', Bin,
		      _TrUserData) ->
    <<Bin/binary, 9>>;
e_enum_EnumS2CErrCode('E_S2CErrCode_LoginTokenInvalid',
		      Bin, _TrUserData) ->
    <<Bin/binary, 10>>;
e_enum_EnumS2CErrCode('E_S2CErrCode_BeKicked', Bin,
		      _TrUserData) ->
    <<Bin/binary, 11>>;
e_enum_EnumS2CErrCode('E_S2CErrCode_NotEnoughMoney',
		      Bin, _TrUserData) ->
    <<Bin/binary, 100>>;
e_enum_EnumS2CErrCode(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('Struct_DeviceInfo', Bin,
		  TrUserData) ->
    id(decode_msg_Struct_DeviceInfo(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('S2C_PlayerInfo1', Bin, TrUserData) ->
    id(decode_msg_S2C_PlayerInfo1(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('Struct_RoomBrief', Bin,
		  TrUserData) ->
    id(decode_msg_Struct_RoomBrief(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('Struct_RoomPlayerBrief', Bin,
		  TrUserData) ->
    id(decode_msg_Struct_RoomPlayerBrief(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('C2S_Login', Bin, TrUserData) ->
    id(decode_msg_C2S_Login(Bin, TrUserData), TrUserData);
decode_msg_2_doit('S2C_Login', Bin, TrUserData) ->
    id(decode_msg_S2C_Login(Bin, TrUserData), TrUserData);
decode_msg_2_doit('S2C_Err', Bin, TrUserData) ->
    id(decode_msg_S2C_Err(Bin, TrUserData), TrUserData);
decode_msg_2_doit('C2S_Heartbeat', Bin, TrUserData) ->
    id(decode_msg_C2S_Heartbeat(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('S2C_Heartbeat', Bin, TrUserData) ->
    id(decode_msg_S2C_Heartbeat(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('C2S_Gm', Bin, TrUserData) ->
    id(decode_msg_C2S_Gm(Bin, TrUserData), TrUserData);
decode_msg_2_doit('S2C_Gm', Bin, TrUserData) ->
    id(decode_msg_S2C_Gm(Bin, TrUserData), TrUserData).



decode_msg_Struct_DeviceInfo(Bin, TrUserData) ->
    dfp_read_field_def_Struct_DeviceInfo(Bin, 0, 0,
					 id(undefined, TrUserData),
					 id(undefined, TrUserData),
					 id(undefined, TrUserData),
					 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Struct_DeviceInfo(<<10,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				     TrUserData) ->
    d_field_Struct_DeviceInfo_os(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, TrUserData);
dfp_read_field_def_Struct_DeviceInfo(<<18,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				     TrUserData) ->
    d_field_Struct_DeviceInfo_deviceType(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_Struct_DeviceInfo(<<26,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				     TrUserData) ->
    d_field_Struct_DeviceInfo_resolution(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_Struct_DeviceInfo(<<34,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				     TrUserData) ->
    d_field_Struct_DeviceInfo_network(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_Struct_DeviceInfo(<<>>, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, _) ->
    #'Struct_DeviceInfo'{os = F@_1, deviceType = F@_2,
			 resolution = F@_3, network = F@_4};
dfp_read_field_def_Struct_DeviceInfo(Other, Z1, Z2,
				     F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_Struct_DeviceInfo(Other, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_Struct_DeviceInfo(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Struct_DeviceInfo(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					TrUserData);
dg_read_field_def_Struct_DeviceInfo(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4,
				    TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Struct_DeviceInfo_os(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, TrUserData);
      18 ->
	  d_field_Struct_DeviceInfo_deviceType(Rest, 0, 0, F@_1,
					       F@_2, F@_3, F@_4, TrUserData);
      26 ->
	  d_field_Struct_DeviceInfo_resolution(Rest, 0, 0, F@_1,
					       F@_2, F@_3, F@_4, TrUserData);
      34 ->
	  d_field_Struct_DeviceInfo_network(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Struct_DeviceInfo(Rest, 0, 0, F@_1, F@_2,
					      F@_3, F@_4, TrUserData);
	    1 ->
		skip_64_Struct_DeviceInfo(Rest, 0, 0, F@_1, F@_2, F@_3,
					  F@_4, TrUserData);
	    2 ->
		skip_length_delimited_Struct_DeviceInfo(Rest, 0, 0,
							F@_1, F@_2, F@_3, F@_4,
							TrUserData);
	    3 ->
		skip_group_Struct_DeviceInfo(Rest, Key bsr 3, 0, F@_1,
					     F@_2, F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_Struct_DeviceInfo(Rest, 0, 0, F@_1, F@_2, F@_3,
					  F@_4, TrUserData)
	  end
    end;
dg_read_field_def_Struct_DeviceInfo(<<>>, 0, 0, F@_1,
				    F@_2, F@_3, F@_4, _) ->
    #'Struct_DeviceInfo'{os = F@_1, deviceType = F@_2,
			 resolution = F@_3, network = F@_4}.

d_field_Struct_DeviceInfo_os(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_Struct_DeviceInfo_os(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_Struct_DeviceInfo_os(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Struct_DeviceInfo(RestF, 0, 0,
					 NewFValue, F@_2, F@_3, F@_4,
					 TrUserData).

d_field_Struct_DeviceInfo_deviceType(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_Struct_DeviceInfo_deviceType(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 TrUserData);
d_field_Struct_DeviceInfo_deviceType(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Struct_DeviceInfo(RestF, 0, 0, F@_1,
					 NewFValue, F@_3, F@_4, TrUserData).

d_field_Struct_DeviceInfo_resolution(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_Struct_DeviceInfo_resolution(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 TrUserData);
d_field_Struct_DeviceInfo_resolution(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Struct_DeviceInfo(RestF, 0, 0, F@_1,
					 F@_2, NewFValue, F@_4, TrUserData).

d_field_Struct_DeviceInfo_network(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_Struct_DeviceInfo_network(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData);
d_field_Struct_DeviceInfo_network(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Struct_DeviceInfo(RestF, 0, 0, F@_1,
					 F@_2, F@_3, NewFValue, TrUserData).

skip_varint_Struct_DeviceInfo(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_Struct_DeviceInfo(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData);
skip_varint_Struct_DeviceInfo(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_Struct_DeviceInfo(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_Struct_DeviceInfo(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4,
					TrUserData)
    when N < 57 ->
    skip_length_delimited_Struct_DeviceInfo(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    F@_4, TrUserData);
skip_length_delimited_Struct_DeviceInfo(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4,
					TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Struct_DeviceInfo(Rest2, 0, 0, F@_1,
					 F@_2, F@_3, F@_4, TrUserData).

skip_group_Struct_DeviceInfo(Bin, FNum, Z2, F@_1, F@_2,
			     F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Struct_DeviceInfo(Rest, 0, Z2, F@_1,
					 F@_2, F@_3, F@_4, TrUserData).

skip_32_Struct_DeviceInfo(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_Struct_DeviceInfo(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, TrUserData).

skip_64_Struct_DeviceInfo(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_Struct_DeviceInfo(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, TrUserData).

decode_msg_S2C_PlayerInfo1(Bin, TrUserData) ->
    dfp_read_field_def_S2C_PlayerInfo1(Bin, 0, 0,
				       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_S2C_PlayerInfo1(<<16, Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    d_field_S2C_PlayerInfo1_moneyLeft(Rest, Z1, Z2, F@_1,
				      TrUserData);
dfp_read_field_def_S2C_PlayerInfo1(<<>>, 0, 0, F@_1,
				   _) ->
    #'S2C_PlayerInfo1'{moneyLeft = F@_1};
dfp_read_field_def_S2C_PlayerInfo1(Other, Z1, Z2, F@_1,
				   TrUserData) ->
    dg_read_field_def_S2C_PlayerInfo1(Other, Z1, Z2, F@_1,
				      TrUserData).

dg_read_field_def_S2C_PlayerInfo1(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_S2C_PlayerInfo1(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_S2C_PlayerInfo1(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      16 ->
	  d_field_S2C_PlayerInfo1_moneyLeft(Rest, 0, 0, F@_1,
					    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_S2C_PlayerInfo1(Rest, 0, 0, F@_1,
					    TrUserData);
	    1 ->
		skip_64_S2C_PlayerInfo1(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_S2C_PlayerInfo1(Rest, 0, 0, F@_1,
						      TrUserData);
	    3 ->
		skip_group_S2C_PlayerInfo1(Rest, Key bsr 3, 0, F@_1,
					   TrUserData);
	    5 ->
		skip_32_S2C_PlayerInfo1(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_S2C_PlayerInfo1(<<>>, 0, 0, F@_1,
				  _) ->
    #'S2C_PlayerInfo1'{moneyLeft = F@_1}.

d_field_S2C_PlayerInfo1_moneyLeft(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_S2C_PlayerInfo1_moneyLeft(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
d_field_S2C_PlayerInfo1_moneyLeft(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_S2C_PlayerInfo1(RestF, 0, 0,
				       NewFValue, TrUserData).

skip_varint_S2C_PlayerInfo1(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, TrUserData) ->
    skip_varint_S2C_PlayerInfo1(Rest, Z1, Z2, F@_1,
				TrUserData);
skip_varint_S2C_PlayerInfo1(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_S2C_PlayerInfo1(Rest, Z1, Z2, F@_1,
				       TrUserData).

skip_length_delimited_S2C_PlayerInfo1(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_S2C_PlayerInfo1(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_S2C_PlayerInfo1(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_S2C_PlayerInfo1(Rest2, 0, 0, F@_1,
				       TrUserData).

skip_group_S2C_PlayerInfo1(Bin, FNum, Z2, F@_1,
			   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_S2C_PlayerInfo1(Rest, 0, Z2, F@_1,
				       TrUserData).

skip_32_S2C_PlayerInfo1(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    dfp_read_field_def_S2C_PlayerInfo1(Rest, Z1, Z2, F@_1,
				       TrUserData).

skip_64_S2C_PlayerInfo1(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    dfp_read_field_def_S2C_PlayerInfo1(Rest, Z1, Z2, F@_1,
				       TrUserData).

decode_msg_Struct_RoomBrief(Bin, TrUserData) ->
    dfp_read_field_def_Struct_RoomBrief(Bin, 0, 0,
					id(undefined, TrUserData),
					id(undefined, TrUserData),
					id(undefined, TrUserData),
					id(undefined, TrUserData),
					id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Struct_RoomBrief(<<8, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData) ->
    d_field_Struct_RoomBrief_roomId(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_Struct_RoomBrief(<<16, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData) ->
    d_field_Struct_RoomBrief_gameId(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_Struct_RoomBrief(<<24, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData) ->
    d_field_Struct_RoomBrief_playerCount(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_Struct_RoomBrief(<<32, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData) ->
    d_field_Struct_RoomBrief_isLocked(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_Struct_RoomBrief(<<42, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData) ->
    d_field_Struct_RoomBrief_ownerId(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_Struct_RoomBrief(<<>>, 0, 0, F@_1,
				    F@_2, F@_3, F@_4, F@_5, _) ->
    #'Struct_RoomBrief'{roomId = F@_1, gameId = F@_2,
			playerCount = F@_3, isLocked = F@_4, ownerId = F@_5};
dfp_read_field_def_Struct_RoomBrief(Other, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_Struct_RoomBrief(Other, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_Struct_RoomBrief(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Struct_RoomBrief(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, TrUserData);
dg_read_field_def_Struct_RoomBrief(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_Struct_RoomBrief_roomId(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, TrUserData);
      16 ->
	  d_field_Struct_RoomBrief_gameId(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, TrUserData);
      24 ->
	  d_field_Struct_RoomBrief_playerCount(Rest, 0, 0, F@_1,
					       F@_2, F@_3, F@_4, F@_5,
					       TrUserData);
      32 ->
	  d_field_Struct_RoomBrief_isLocked(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, F@_5, TrUserData);
      42 ->
	  d_field_Struct_RoomBrief_ownerId(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Struct_RoomBrief(Rest, 0, 0, F@_1, F@_2,
					     F@_3, F@_4, F@_5, TrUserData);
	    1 ->
		skip_64_Struct_RoomBrief(Rest, 0, 0, F@_1, F@_2, F@_3,
					 F@_4, F@_5, TrUserData);
	    2 ->
		skip_length_delimited_Struct_RoomBrief(Rest, 0, 0, F@_1,
						       F@_2, F@_3, F@_4, F@_5,
						       TrUserData);
	    3 ->
		skip_group_Struct_RoomBrief(Rest, Key bsr 3, 0, F@_1,
					    F@_2, F@_3, F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_Struct_RoomBrief(Rest, 0, 0, F@_1, F@_2, F@_3,
					 F@_4, F@_5, TrUserData)
	  end
    end;
dg_read_field_def_Struct_RoomBrief(<<>>, 0, 0, F@_1,
				   F@_2, F@_3, F@_4, F@_5, _) ->
    #'Struct_RoomBrief'{roomId = F@_1, gameId = F@_2,
			playerCount = F@_3, isLocked = F@_4, ownerId = F@_5}.

d_field_Struct_RoomBrief_roomId(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData)
    when N < 57 ->
    d_field_Struct_RoomBrief_roomId(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData);
d_field_Struct_RoomBrief_roomId(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F@_2, F@_3, F@_4, F@_5,
				TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_Struct_RoomBrief(RestF, 0, 0,
					NewFValue, F@_2, F@_3, F@_4, F@_5,
					TrUserData).

d_field_Struct_RoomBrief_gameId(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData)
    when N < 57 ->
    d_field_Struct_RoomBrief_gameId(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData);
d_field_Struct_RoomBrief_gameId(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, _, F@_3, F@_4, F@_5,
				TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_Struct_RoomBrief(RestF, 0, 0, F@_1,
					NewFValue, F@_3, F@_4, F@_5,
					TrUserData).

d_field_Struct_RoomBrief_playerCount(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				     TrUserData)
    when N < 57 ->
    d_field_Struct_RoomBrief_playerCount(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, TrUserData);
d_field_Struct_RoomBrief_playerCount(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, _, F@_4, F@_5,
				     TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_Struct_RoomBrief(RestF, 0, 0, F@_1,
					F@_2, NewFValue, F@_4, F@_5,
					TrUserData).

d_field_Struct_RoomBrief_isLocked(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData)
    when N < 57 ->
    d_field_Struct_RoomBrief_isLocked(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, TrUserData);
d_field_Struct_RoomBrief_isLocked(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, _, F@_5,
				  TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_Struct_RoomBrief(RestF, 0, 0, F@_1,
					F@_2, F@_3, NewFValue, F@_5,
					TrUserData).

d_field_Struct_RoomBrief_ownerId(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData)
    when N < 57 ->
    d_field_Struct_RoomBrief_ownerId(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, TrUserData);
d_field_Struct_RoomBrief_ownerId(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, _,
				 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Struct_RoomBrief(RestF, 0, 0, F@_1,
					F@_2, F@_3, F@_4, NewFValue,
					TrUserData).

skip_varint_Struct_RoomBrief(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
			     TrUserData) ->
    skip_varint_Struct_RoomBrief(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData);
skip_varint_Struct_RoomBrief(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
			     TrUserData) ->
    dfp_read_field_def_Struct_RoomBrief(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_Struct_RoomBrief(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       TrUserData)
    when N < 57 ->
    skip_length_delimited_Struct_RoomBrief(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   F@_4, F@_5, TrUserData);
skip_length_delimited_Struct_RoomBrief(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Struct_RoomBrief(Rest2, 0, 0, F@_1,
					F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_Struct_RoomBrief(Bin, FNum, Z2, F@_1, F@_2,
			    F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Struct_RoomBrief(Rest, 0, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_Struct_RoomBrief(<<_:32, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Struct_RoomBrief(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_64_Struct_RoomBrief(<<_:64, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Struct_RoomBrief(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, TrUserData).

decode_msg_Struct_RoomPlayerBrief(Bin, TrUserData) ->
    dfp_read_field_def_Struct_RoomPlayerBrief(Bin, 0, 0,
					      id(undefined, TrUserData),
					      id(undefined, TrUserData),
					      id(undefined, TrUserData),
					      TrUserData).

dfp_read_field_def_Struct_RoomPlayerBrief(<<10,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3,
					  TrUserData) ->
    d_field_Struct_RoomPlayerBrief_id(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, TrUserData);
dfp_read_field_def_Struct_RoomPlayerBrief(<<26,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3,
					  TrUserData) ->
    d_field_Struct_RoomPlayerBrief_nickname(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_Struct_RoomPlayerBrief(<<34,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3,
					  TrUserData) ->
    d_field_Struct_RoomPlayerBrief_avatar(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_Struct_RoomPlayerBrief(<<>>, 0, 0,
					  F@_1, F@_2, F@_3, _) ->
    #'Struct_RoomPlayerBrief'{id = F@_1, nickname = F@_2,
			      avatar = F@_3};
dfp_read_field_def_Struct_RoomPlayerBrief(Other, Z1, Z2,
					  F@_1, F@_2, F@_3, TrUserData) ->
    dg_read_field_def_Struct_RoomPlayerBrief(Other, Z1, Z2,
					     F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_Struct_RoomPlayerBrief(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Struct_RoomPlayerBrief(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     TrUserData);
dg_read_field_def_Struct_RoomPlayerBrief(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3,
					 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Struct_RoomPlayerBrief_id(Rest, 0, 0, F@_1,
					    F@_2, F@_3, TrUserData);
      26 ->
	  d_field_Struct_RoomPlayerBrief_nickname(Rest, 0, 0,
						  F@_1, F@_2, F@_3, TrUserData);
      34 ->
	  d_field_Struct_RoomPlayerBrief_avatar(Rest, 0, 0, F@_1,
						F@_2, F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Struct_RoomPlayerBrief(Rest, 0, 0, F@_1,
						   F@_2, F@_3, TrUserData);
	    1 ->
		skip_64_Struct_RoomPlayerBrief(Rest, 0, 0, F@_1, F@_2,
					       F@_3, TrUserData);
	    2 ->
		skip_length_delimited_Struct_RoomPlayerBrief(Rest, 0, 0,
							     F@_1, F@_2, F@_3,
							     TrUserData);
	    3 ->
		skip_group_Struct_RoomPlayerBrief(Rest, Key bsr 3, 0,
						  F@_1, F@_2, F@_3, TrUserData);
	    5 ->
		skip_32_Struct_RoomPlayerBrief(Rest, 0, 0, F@_1, F@_2,
					       F@_3, TrUserData)
	  end
    end;
dg_read_field_def_Struct_RoomPlayerBrief(<<>>, 0, 0,
					 F@_1, F@_2, F@_3, _) ->
    #'Struct_RoomPlayerBrief'{id = F@_1, nickname = F@_2,
			      avatar = F@_3}.

d_field_Struct_RoomPlayerBrief_id(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Struct_RoomPlayerBrief_id(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3,
				      TrUserData);
d_field_Struct_RoomPlayerBrief_id(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Struct_RoomPlayerBrief(RestF, 0, 0,
					      NewFValue, F@_2, F@_3,
					      TrUserData).

d_field_Struct_RoomPlayerBrief_nickname(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Struct_RoomPlayerBrief_nickname(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    TrUserData);
d_field_Struct_RoomPlayerBrief_nickname(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Struct_RoomPlayerBrief(RestF, 0, 0,
					      F@_1, NewFValue, F@_3,
					      TrUserData).

d_field_Struct_RoomPlayerBrief_avatar(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Struct_RoomPlayerBrief_avatar(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3,
					  TrUserData);
d_field_Struct_RoomPlayerBrief_avatar(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Struct_RoomPlayerBrief(RestF, 0, 0,
					      F@_1, F@_2, NewFValue,
					      TrUserData).

skip_varint_Struct_RoomPlayerBrief(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_Struct_RoomPlayerBrief(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, TrUserData);
skip_varint_Struct_RoomPlayerBrief(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_Struct_RoomPlayerBrief(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_Struct_RoomPlayerBrief(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3,
					     TrUserData)
    when N < 57 ->
    skip_length_delimited_Struct_RoomPlayerBrief(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, F@_3, TrUserData);
skip_length_delimited_Struct_RoomPlayerBrief(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3,
					     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Struct_RoomPlayerBrief(Rest2, 0, 0,
					      F@_1, F@_2, F@_3, TrUserData).

skip_group_Struct_RoomPlayerBrief(Bin, FNum, Z2, F@_1,
				  F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Struct_RoomPlayerBrief(Rest, 0, Z2,
					      F@_1, F@_2, F@_3, TrUserData).

skip_32_Struct_RoomPlayerBrief(<<_:32, Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_Struct_RoomPlayerBrief(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, TrUserData).

skip_64_Struct_RoomPlayerBrief(<<_:64, Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_Struct_RoomPlayerBrief(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, TrUserData).

decode_msg_C2S_Login(Bin, TrUserData) ->
    dfp_read_field_def_C2S_Login(Bin, 0, 0,
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_C2S_Login(<<18, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_C2S_Login_token(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData);
dfp_read_field_def_C2S_Login(<<24, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_C2S_Login_version(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData);
dfp_read_field_def_C2S_Login(<<34, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_C2S_Login_device(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     TrUserData);
dfp_read_field_def_C2S_Login(<<>>, 0, 0, F@_1, F@_2,
			     F@_3, _) ->
    #'C2S_Login'{token = F@_1, version = F@_2,
		 device = F@_3};
dfp_read_field_def_C2S_Login(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, TrUserData) ->
    dg_read_field_def_C2S_Login(Other, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

dg_read_field_def_C2S_Login(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_C2S_Login(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_C2S_Login(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      18 ->
	  d_field_C2S_Login_token(Rest, 0, 0, F@_1, F@_2, F@_3,
				  TrUserData);
      24 ->
	  d_field_C2S_Login_version(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
      34 ->
	  d_field_C2S_Login_device(Rest, 0, 0, F@_1, F@_2, F@_3,
				   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_C2S_Login(Rest, 0, 0, F@_1, F@_2, F@_3,
				      TrUserData);
	    1 ->
		skip_64_C2S_Login(Rest, 0, 0, F@_1, F@_2, F@_3,
				  TrUserData);
	    2 ->
		skip_length_delimited_C2S_Login(Rest, 0, 0, F@_1, F@_2,
						F@_3, TrUserData);
	    3 ->
		skip_group_C2S_Login(Rest, Key bsr 3, 0, F@_1, F@_2,
				     F@_3, TrUserData);
	    5 ->
		skip_32_C2S_Login(Rest, 0, 0, F@_1, F@_2, F@_3,
				  TrUserData)
	  end
    end;
dg_read_field_def_C2S_Login(<<>>, 0, 0, F@_1, F@_2,
			    F@_3, _) ->
    #'C2S_Login'{token = F@_1, version = F@_2,
		 device = F@_3}.

d_field_C2S_Login_token(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_C2S_Login_token(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, TrUserData);
d_field_C2S_Login_token(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_C2S_Login(RestF, 0, 0, NewFValue,
				 F@_2, F@_3, TrUserData).

d_field_C2S_Login_version(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_C2S_Login_version(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, TrUserData);
d_field_C2S_Login_version(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_C2S_Login(RestF, 0, 0, F@_1,
				 NewFValue, F@_3, TrUserData).

d_field_C2S_Login_device(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_C2S_Login_device(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, TrUserData);
d_field_C2S_Login_device(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_Struct_DeviceInfo(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_C2S_Login(RestF, 0, 0, F@_1, F@_2,
				 if Prev == undefined -> NewFValue;
				    true ->
					merge_msg_Struct_DeviceInfo(Prev,
								    NewFValue,
								    TrUserData)
				 end,
				 TrUserData).

skip_varint_C2S_Login(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_C2S_Login(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  TrUserData);
skip_varint_C2S_Login(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_C2S_Login(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

skip_length_delimited_C2S_Login(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_C2S_Login(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3,
				    TrUserData);
skip_length_delimited_C2S_Login(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_C2S_Login(Rest2, 0, 0, F@_1, F@_2,
				 F@_3, TrUserData).

skip_group_C2S_Login(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_C2S_Login(Rest, 0, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

skip_32_C2S_Login(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_C2S_Login(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

skip_64_C2S_Login(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_C2S_Login(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

decode_msg_S2C_Login(Bin, TrUserData) ->
    dfp_read_field_def_S2C_Login(Bin, 0, 0,
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData), id([], TrUserData),
				 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_S2C_Login(<<10, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_S2C_Login_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, TrUserData);
dfp_read_field_def_S2C_Login(<<26, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_S2C_Login_nickname(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_S2C_Login(<<32, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_S2C_Login_money(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, TrUserData);
dfp_read_field_def_S2C_Login(<<82, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_S2C_Login_rooms(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, TrUserData);
dfp_read_field_def_S2C_Login(<<90, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_S2C_Login_notFinishedRoom(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_S2C_Login(<<>>, 0, 0, F@_1, F@_2,
			     F@_3, R1, F@_5, TrUserData) ->
    #'S2C_Login'{id = F@_1, nickname = F@_2, money = F@_3,
		 rooms = lists_reverse(R1, TrUserData),
		 notFinishedRoom = F@_5};
dfp_read_field_def_S2C_Login(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_S2C_Login(Other, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_S2C_Login(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_S2C_Login(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_S2C_Login(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_S2C_Login_id(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, TrUserData);
      26 ->
	  d_field_S2C_Login_nickname(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, TrUserData);
      32 ->
	  d_field_S2C_Login_money(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, TrUserData);
      82 ->
	  d_field_S2C_Login_rooms(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, TrUserData);
      90 ->
	  d_field_S2C_Login_notFinishedRoom(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_S2C_Login(Rest, 0, 0, F@_1, F@_2, F@_3,
				      F@_4, F@_5, TrUserData);
	    1 ->
		skip_64_S2C_Login(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				  F@_5, TrUserData);
	    2 ->
		skip_length_delimited_S2C_Login(Rest, 0, 0, F@_1, F@_2,
						F@_3, F@_4, F@_5, TrUserData);
	    3 ->
		skip_group_S2C_Login(Rest, Key bsr 3, 0, F@_1, F@_2,
				     F@_3, F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_S2C_Login(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				  F@_5, TrUserData)
	  end
    end;
dg_read_field_def_S2C_Login(<<>>, 0, 0, F@_1, F@_2,
			    F@_3, R1, F@_5, TrUserData) ->
    #'S2C_Login'{id = F@_1, nickname = F@_2, money = F@_3,
		 rooms = lists_reverse(R1, TrUserData),
		 notFinishedRoom = F@_5}.

d_field_S2C_Login_id(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_S2C_Login_id(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_S2C_Login_id(<<0:1, X:7, Rest/binary>>, N, Acc,
		     _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_S2C_Login(RestF, 0, 0, NewFValue,
				 F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_S2C_Login_nickname(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_S2C_Login_nickname(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_S2C_Login_nickname(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_S2C_Login(RestF, 0, 0, F@_1,
				 NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_S2C_Login_money(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_S2C_Login_money(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_S2C_Login_money(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_S2C_Login(RestF, 0, 0, F@_1, F@_2,
				 NewFValue, F@_4, F@_5, TrUserData).

d_field_S2C_Login_rooms(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_S2C_Login_rooms(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_S2C_Login_rooms(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, Prev, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_Struct_RoomBrief(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_S2C_Login(RestF, 0, 0, F@_1, F@_2,
				 F@_3, cons(NewFValue, Prev, TrUserData), F@_5,
				 TrUserData).

d_field_S2C_Login_notFinishedRoom(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData)
    when N < 57 ->
    d_field_S2C_Login_notFinishedRoom(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, TrUserData);
d_field_S2C_Login_notFinishedRoom(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, Prev,
				  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_Struct_RoomBrief(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_S2C_Login(RestF, 0, 0, F@_1, F@_2,
				 F@_3, F@_4,
				 if Prev == undefined -> NewFValue;
				    true ->
					merge_msg_Struct_RoomBrief(Prev,
								   NewFValue,
								   TrUserData)
				 end,
				 TrUserData).

skip_varint_S2C_Login(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_S2C_Login(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, TrUserData);
skip_varint_S2C_Login(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_S2C_Login(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_S2C_Login(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData)
    when N < 57 ->
    skip_length_delimited_S2C_Login(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData);
skip_length_delimited_S2C_Login(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_S2C_Login(Rest2, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData).

skip_group_S2C_Login(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		     F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_S2C_Login(Rest, 0, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData).

skip_32_S2C_Login(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_S2C_Login(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData).

skip_64_S2C_Login(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_S2C_Login(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData).

decode_msg_S2C_Err(Bin, TrUserData) ->
    dfp_read_field_def_S2C_Err(Bin, 0, 0,
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_S2C_Err(<<8, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, TrUserData) ->
    d_field_S2C_Err_code(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 TrUserData);
dfp_read_field_def_S2C_Err(<<16, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, TrUserData) ->
    d_field_S2C_Err_type(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 TrUserData);
dfp_read_field_def_S2C_Err(<<26, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, TrUserData) ->
    d_field_S2C_Err_msg(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			TrUserData);
dfp_read_field_def_S2C_Err(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   _) ->
    #'S2C_Err'{code = F@_1, type = F@_2, msg = F@_3};
dfp_read_field_def_S2C_Err(Other, Z1, Z2, F@_1, F@_2,
			   F@_3, TrUserData) ->
    dg_read_field_def_S2C_Err(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData).

dg_read_field_def_S2C_Err(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_S2C_Err(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_S2C_Err(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_S2C_Err_code(Rest, 0, 0, F@_1, F@_2, F@_3,
			       TrUserData);
      16 ->
	  d_field_S2C_Err_type(Rest, 0, 0, F@_1, F@_2, F@_3,
			       TrUserData);
      26 ->
	  d_field_S2C_Err_msg(Rest, 0, 0, F@_1, F@_2, F@_3,
			      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_S2C_Err(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
	    1 ->
		skip_64_S2C_Err(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData);
	    2 ->
		skip_length_delimited_S2C_Err(Rest, 0, 0, F@_1, F@_2,
					      F@_3, TrUserData);
	    3 ->
		skip_group_S2C_Err(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				   TrUserData);
	    5 ->
		skip_32_S2C_Err(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData)
	  end
    end;
dg_read_field_def_S2C_Err(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  _) ->
    #'S2C_Err'{code = F@_1, type = F@_2, msg = F@_3}.

d_field_S2C_Err_code(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_S2C_Err_code(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, TrUserData);
d_field_S2C_Err_code(<<0:1, X:7, Rest/binary>>, N, Acc,
		     _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_EnumS2CErrCode(begin
						     <<Res:32/signed-native>> =
							 <<(X bsl N +
							      Acc):32/unsigned-native>>,
						     id(Res, TrUserData)
						   end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_S2C_Err(RestF, 0, 0, NewFValue, F@_2,
			       F@_3, TrUserData).

d_field_S2C_Err_type(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_S2C_Err_type(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, TrUserData);
d_field_S2C_Err_type(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} =
	{id(d_enum_EnumS2CTipsShowType(begin
					 <<Res:32/signed-native>> = <<(X bsl N +
									 Acc):32/unsigned-native>>,
					 id(Res, TrUserData)
				       end),
	    TrUserData),
	 Rest},
    dfp_read_field_def_S2C_Err(RestF, 0, 0, F@_1, NewFValue,
			       F@_3, TrUserData).

d_field_S2C_Err_msg(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_S2C_Err_msg(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, TrUserData);
d_field_S2C_Err_msg(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_S2C_Err(RestF, 0, 0, F@_1, F@_2,
			       NewFValue, TrUserData).

skip_varint_S2C_Err(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_S2C_Err(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			TrUserData);
skip_varint_S2C_Err(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_S2C_Err(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

skip_length_delimited_S2C_Err(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_S2C_Err(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_S2C_Err(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_S2C_Err(Rest2, 0, 0, F@_1, F@_2,
			       F@_3, TrUserData).

skip_group_S2C_Err(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_S2C_Err(Rest, 0, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

skip_32_S2C_Err(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_S2C_Err(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

skip_64_S2C_Err(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_S2C_Err(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

decode_msg_C2S_Heartbeat(Bin, TrUserData) ->
    dfp_read_field_def_C2S_Heartbeat(Bin, 0, 0, TrUserData).

dfp_read_field_def_C2S_Heartbeat(<<>>, 0, 0, _) ->
    #'C2S_Heartbeat'{};
dfp_read_field_def_C2S_Heartbeat(Other, Z1, Z2,
				 TrUserData) ->
    dg_read_field_def_C2S_Heartbeat(Other, Z1, Z2,
				    TrUserData).

dg_read_field_def_C2S_Heartbeat(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_C2S_Heartbeat(Rest, N + 7,
				    X bsl N + Acc, TrUserData);
dg_read_field_def_C2S_Heartbeat(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_C2S_Heartbeat(Rest, 0, 0, TrUserData);
      1 -> skip_64_C2S_Heartbeat(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_C2S_Heartbeat(Rest, 0, 0,
					      TrUserData);
      3 ->
	  skip_group_C2S_Heartbeat(Rest, Key bsr 3, 0,
				   TrUserData);
      5 -> skip_32_C2S_Heartbeat(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_C2S_Heartbeat(<<>>, 0, 0, _) ->
    #'C2S_Heartbeat'{}.

skip_varint_C2S_Heartbeat(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, TrUserData) ->
    skip_varint_C2S_Heartbeat(Rest, Z1, Z2, TrUserData);
skip_varint_C2S_Heartbeat(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, TrUserData) ->
    dfp_read_field_def_C2S_Heartbeat(Rest, Z1, Z2,
				     TrUserData).

skip_length_delimited_C2S_Heartbeat(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_C2S_Heartbeat(Rest, N + 7,
					X bsl N + Acc, TrUserData);
skip_length_delimited_C2S_Heartbeat(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_C2S_Heartbeat(Rest2, 0, 0,
				     TrUserData).

skip_group_C2S_Heartbeat(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_C2S_Heartbeat(Rest, 0, Z2,
				     TrUserData).

skip_32_C2S_Heartbeat(<<_:32, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_C2S_Heartbeat(Rest, Z1, Z2,
				     TrUserData).

skip_64_C2S_Heartbeat(<<_:64, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_C2S_Heartbeat(Rest, Z1, Z2,
				     TrUserData).

decode_msg_S2C_Heartbeat(Bin, TrUserData) ->
    dfp_read_field_def_S2C_Heartbeat(Bin, 0, 0, TrUserData).

dfp_read_field_def_S2C_Heartbeat(<<>>, 0, 0, _) ->
    #'S2C_Heartbeat'{};
dfp_read_field_def_S2C_Heartbeat(Other, Z1, Z2,
				 TrUserData) ->
    dg_read_field_def_S2C_Heartbeat(Other, Z1, Z2,
				    TrUserData).

dg_read_field_def_S2C_Heartbeat(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_S2C_Heartbeat(Rest, N + 7,
				    X bsl N + Acc, TrUserData);
dg_read_field_def_S2C_Heartbeat(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_S2C_Heartbeat(Rest, 0, 0, TrUserData);
      1 -> skip_64_S2C_Heartbeat(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_S2C_Heartbeat(Rest, 0, 0,
					      TrUserData);
      3 ->
	  skip_group_S2C_Heartbeat(Rest, Key bsr 3, 0,
				   TrUserData);
      5 -> skip_32_S2C_Heartbeat(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_S2C_Heartbeat(<<>>, 0, 0, _) ->
    #'S2C_Heartbeat'{}.

skip_varint_S2C_Heartbeat(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, TrUserData) ->
    skip_varint_S2C_Heartbeat(Rest, Z1, Z2, TrUserData);
skip_varint_S2C_Heartbeat(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, TrUserData) ->
    dfp_read_field_def_S2C_Heartbeat(Rest, Z1, Z2,
				     TrUserData).

skip_length_delimited_S2C_Heartbeat(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_S2C_Heartbeat(Rest, N + 7,
					X bsl N + Acc, TrUserData);
skip_length_delimited_S2C_Heartbeat(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_S2C_Heartbeat(Rest2, 0, 0,
				     TrUserData).

skip_group_S2C_Heartbeat(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_S2C_Heartbeat(Rest, 0, Z2,
				     TrUserData).

skip_32_S2C_Heartbeat(<<_:32, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_S2C_Heartbeat(Rest, Z1, Z2,
				     TrUserData).

skip_64_S2C_Heartbeat(<<_:64, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_S2C_Heartbeat(Rest, Z1, Z2,
				     TrUserData).

decode_msg_C2S_Gm(Bin, TrUserData) ->
    dfp_read_field_def_C2S_Gm(Bin, 0, 0,
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_C2S_Gm(<<10, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, TrUserData) ->
    d_field_C2S_Gm_cmd(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
dfp_read_field_def_C2S_Gm(<<16, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, TrUserData) ->
    d_field_C2S_Gm_seqId(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			 TrUserData);
dfp_read_field_def_C2S_Gm(<<90, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, TrUserData) ->
    d_field_C2S_Gm_arg1(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			TrUserData);
dfp_read_field_def_C2S_Gm(<<98, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, TrUserData) ->
    d_field_C2S_Gm_arg2(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			TrUserData);
dfp_read_field_def_C2S_Gm(<<106, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, TrUserData) ->
    d_field_C2S_Gm_arg3(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			TrUserData);
dfp_read_field_def_C2S_Gm(<<114, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, TrUserData) ->
    d_field_C2S_Gm_arg4(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			TrUserData);
dfp_read_field_def_C2S_Gm(<<122, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, TrUserData) ->
    d_field_C2S_Gm_arg5(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			TrUserData);
dfp_read_field_def_C2S_Gm(<<130, 1, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, TrUserData) ->
    d_field_C2S_Gm_arg6(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			TrUserData);
dfp_read_field_def_C2S_Gm(<<138, 1, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, TrUserData) ->
    d_field_C2S_Gm_arg7(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			TrUserData);
dfp_read_field_def_C2S_Gm(<<146, 1, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, TrUserData) ->
    d_field_C2S_Gm_arg8(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			TrUserData);
dfp_read_field_def_C2S_Gm(<<154, 1, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, TrUserData) ->
    d_field_C2S_Gm_arg9(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			TrUserData);
dfp_read_field_def_C2S_Gm(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			  _) ->
    #'C2S_Gm'{cmd = F@_1, seqId = F@_2, arg1 = F@_3,
	      arg2 = F@_4, arg3 = F@_5, arg4 = F@_6, arg5 = F@_7,
	      arg6 = F@_8, arg7 = F@_9, arg8 = F@_10, arg9 = F@_11};
dfp_read_field_def_C2S_Gm(Other, Z1, Z2, F@_1, F@_2,
			  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			  F@_11, TrUserData) ->
    dg_read_field_def_C2S_Gm(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			     F@_11, TrUserData).

dg_read_field_def_C2S_Gm(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_C2S_Gm(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, F@_10, F@_11, TrUserData);
dg_read_field_def_C2S_Gm(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_C2S_Gm_cmd(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			     F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			     TrUserData);
      16 ->
	  d_field_C2S_Gm_seqId(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			       TrUserData);
      90 ->
	  d_field_C2S_Gm_arg1(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      TrUserData);
      98 ->
	  d_field_C2S_Gm_arg2(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      TrUserData);
      106 ->
	  d_field_C2S_Gm_arg3(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      TrUserData);
      114 ->
	  d_field_C2S_Gm_arg4(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      TrUserData);
      122 ->
	  d_field_C2S_Gm_arg5(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      TrUserData);
      130 ->
	  d_field_C2S_Gm_arg6(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      TrUserData);
      138 ->
	  d_field_C2S_Gm_arg7(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      TrUserData);
      146 ->
	  d_field_C2S_Gm_arg8(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      TrUserData);
      154 ->
	  d_field_C2S_Gm_arg9(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_C2S_Gm(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				   TrUserData);
	    1 ->
		skip_64_C2S_Gm(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			       F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			       TrUserData);
	    2 ->
		skip_length_delimited_C2S_Gm(Rest, 0, 0, F@_1, F@_2,
					     F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					     F@_9, F@_10, F@_11, TrUserData);
	    3 ->
		skip_group_C2S_Gm(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				  F@_11, TrUserData);
	    5 ->
		skip_32_C2S_Gm(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			       F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData)
	  end
    end;
dg_read_field_def_C2S_Gm(<<>>, 0, 0, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, _) ->
    #'C2S_Gm'{cmd = F@_1, seqId = F@_2, arg1 = F@_3,
	      arg2 = F@_4, arg3 = F@_5, arg4 = F@_6, arg5 = F@_7,
	      arg6 = F@_8, arg7 = F@_9, arg8 = F@_10, arg9 = F@_11}.

d_field_C2S_Gm_cmd(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		   F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_C2S_Gm_cmd(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		       F@_11, TrUserData);
d_field_C2S_Gm_cmd(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		   F@_11, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_C2S_Gm(RestF, 0, 0, NewFValue, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, TrUserData).

d_field_C2S_Gm_seqId(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_C2S_Gm_seqId(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			 F@_11, TrUserData);
d_field_C2S_Gm_seqId(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_C2S_Gm(RestF, 0, 0, F@_1, NewFValue,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, TrUserData).

d_field_C2S_Gm_arg1(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_C2S_Gm_arg1(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			F@_11, TrUserData);
d_field_C2S_Gm_arg1(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_C2S_Gm(RestF, 0, 0, F@_1, F@_2,
			      NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			      F@_10, F@_11, TrUserData).

d_field_C2S_Gm_arg2(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_C2S_Gm_arg2(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			F@_11, TrUserData);
d_field_C2S_Gm_arg2(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_C2S_Gm(RestF, 0, 0, F@_1, F@_2, F@_3,
			      NewFValue, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, TrUserData).

d_field_C2S_Gm_arg3(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_C2S_Gm_arg3(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			F@_11, TrUserData);
d_field_C2S_Gm_arg3(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, F@_8, F@_9,
		    F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_C2S_Gm(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, NewFValue, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, TrUserData).

d_field_C2S_Gm_arg4(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_C2S_Gm_arg4(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			F@_11, TrUserData);
d_field_C2S_Gm_arg4(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8, F@_9,
		    F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_C2S_Gm(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, NewFValue, F@_7, F@_8, F@_9, F@_10,
			      F@_11, TrUserData).

d_field_C2S_Gm_arg5(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_C2S_Gm_arg5(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			F@_11, TrUserData);
d_field_C2S_Gm_arg5(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8, F@_9,
		    F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_C2S_Gm(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, NewFValue, F@_8, F@_9, F@_10,
			      F@_11, TrUserData).

d_field_C2S_Gm_arg6(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_C2S_Gm_arg6(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			F@_11, TrUserData);
d_field_C2S_Gm_arg6(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _, F@_9,
		    F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_C2S_Gm(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, NewFValue, F@_9, F@_10,
			      F@_11, TrUserData).

d_field_C2S_Gm_arg7(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_C2S_Gm_arg7(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			F@_11, TrUserData);
d_field_C2S_Gm_arg7(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, _,
		    F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_C2S_Gm(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, NewFValue, F@_10,
			      F@_11, TrUserData).

d_field_C2S_Gm_arg8(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_C2S_Gm_arg8(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			F@_11, TrUserData);
d_field_C2S_Gm_arg8(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, _,
		    F@_11, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_C2S_Gm(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, NewFValue,
			      F@_11, TrUserData).

d_field_C2S_Gm_arg9(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_C2S_Gm_arg9(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			F@_11, TrUserData);
d_field_C2S_Gm_arg9(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_C2S_Gm(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      NewFValue, TrUserData).

skip_varint_C2S_Gm(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		   F@_10, F@_11, TrUserData) ->
    skip_varint_C2S_Gm(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
skip_varint_C2S_Gm(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		   F@_10, F@_11, TrUserData) ->
    dfp_read_field_def_C2S_Gm(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, TrUserData).

skip_length_delimited_C2S_Gm(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, F@_9, F@_10, F@_11, TrUserData)
    when N < 57 ->
    skip_length_delimited_C2S_Gm(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				 F@_9, F@_10, F@_11, TrUserData);
skip_length_delimited_C2S_Gm(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_C2S_Gm(Rest2, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      TrUserData).

skip_group_C2S_Gm(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4,
		  F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
		  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_C2S_Gm(Rest, 0, Z2, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      TrUserData).

skip_32_C2S_Gm(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
	       F@_11, TrUserData) ->
    dfp_read_field_def_C2S_Gm(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, TrUserData).

skip_64_C2S_Gm(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
	       F@_11, TrUserData) ->
    dfp_read_field_def_C2S_Gm(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, TrUserData).

decode_msg_S2C_Gm(Bin, TrUserData) ->
    dfp_read_field_def_S2C_Gm(Bin, 0, 0,
			      id(undefined, TrUserData),
			      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_S2C_Gm(<<16, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    d_field_S2C_Gm_seqId(Rest, Z1, Z2, F@_1, F@_2,
			 TrUserData);
dfp_read_field_def_S2C_Gm(<<24, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    d_field_S2C_Gm_code(Rest, Z1, Z2, F@_1, F@_2,
			TrUserData);
dfp_read_field_def_S2C_Gm(<<>>, 0, 0, F@_1, F@_2, _) ->
    #'S2C_Gm'{seqId = F@_1, code = F@_2};
dfp_read_field_def_S2C_Gm(Other, Z1, Z2, F@_1, F@_2,
			  TrUserData) ->
    dg_read_field_def_S2C_Gm(Other, Z1, Z2, F@_1, F@_2,
			     TrUserData).

dg_read_field_def_S2C_Gm(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_S2C_Gm(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
dg_read_field_def_S2C_Gm(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      16 ->
	  d_field_S2C_Gm_seqId(Rest, 0, 0, F@_1, F@_2,
			       TrUserData);
      24 ->
	  d_field_S2C_Gm_code(Rest, 0, 0, F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_S2C_Gm(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_S2C_Gm(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_S2C_Gm(Rest, 0, 0, F@_1, F@_2,
					     TrUserData);
	    3 ->
		skip_group_S2C_Gm(Rest, Key bsr 3, 0, F@_1, F@_2,
				  TrUserData);
	    5 -> skip_32_S2C_Gm(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_S2C_Gm(<<>>, 0, 0, F@_1, F@_2, _) ->
    #'S2C_Gm'{seqId = F@_1, code = F@_2}.

d_field_S2C_Gm_seqId(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_S2C_Gm_seqId(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, TrUserData);
d_field_S2C_Gm_seqId(<<0:1, X:7, Rest/binary>>, N, Acc,
		     _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_S2C_Gm(RestF, 0, 0, NewFValue, F@_2,
			      TrUserData).

d_field_S2C_Gm_code(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_S2C_Gm_code(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, TrUserData);
d_field_S2C_Gm_code(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_S2C_Gm(RestF, 0, 0, F@_1, NewFValue,
			      TrUserData).

skip_varint_S2C_Gm(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, TrUserData) ->
    skip_varint_S2C_Gm(Rest, Z1, Z2, F@_1, F@_2,
		       TrUserData);
skip_varint_S2C_Gm(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_S2C_Gm(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData).

skip_length_delimited_S2C_Gm(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_S2C_Gm(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
skip_length_delimited_S2C_Gm(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_S2C_Gm(Rest2, 0, 0, F@_1, F@_2,
			      TrUserData).

skip_group_S2C_Gm(Bin, FNum, Z2, F@_1, F@_2,
		  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_S2C_Gm(Rest, 0, Z2, F@_1, F@_2,
			      TrUserData).

skip_32_S2C_Gm(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, TrUserData) ->
    dfp_read_field_def_S2C_Gm(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData).

skip_64_S2C_Gm(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, TrUserData) ->
    dfp_read_field_def_S2C_Gm(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData).

d_enum_EnumS2CTipsShowType(0) ->
    'E_S2CTipsShowType_PopUp';
d_enum_EnumS2CTipsShowType(1) ->
    'E_S2CTipsShowType_Marquee';
d_enum_EnumS2CTipsShowType(V) -> V.

d_enum_EnumS2CErrCode(0) -> 'E_S2CErrCode_Succ';
d_enum_EnumS2CErrCode(1) -> 'E_S2CErrCode_Sys';
d_enum_EnumS2CErrCode(2) -> 'E_S2CErrCode_Busy';
d_enum_EnumS2CErrCode(3) ->
    'E_S2CErrCode_OpToFrequency';
d_enum_EnumS2CErrCode(4) -> 'E_S2CErrCode_ReLogin';
d_enum_EnumS2CErrCode(5) -> 'E_S2CErrCode_NotLogin';
d_enum_EnumS2CErrCode(6) ->
    'E_S2CErrCode_LoginCheckTimeout';
d_enum_EnumS2CErrCode(7) ->
    'E_S2CErrCode_LoginCheckNotThrough';
d_enum_EnumS2CErrCode(8) -> 'E_S2CErrCode_ErrArgs';
d_enum_EnumS2CErrCode(9) -> 'E_S2CErrCode_ProtoErr';
d_enum_EnumS2CErrCode(10) ->
    'E_S2CErrCode_LoginTokenInvalid';
d_enum_EnumS2CErrCode(11) -> 'E_S2CErrCode_BeKicked';
d_enum_EnumS2CErrCode(100) ->
    'E_S2CErrCode_NotEnoughMoney';
d_enum_EnumS2CErrCode(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
	 is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Struct_DeviceInfo' ->
	  merge_msg_Struct_DeviceInfo(Prev, New, TrUserData);
      'S2C_PlayerInfo1' ->
	  merge_msg_S2C_PlayerInfo1(Prev, New, TrUserData);
      'Struct_RoomBrief' ->
	  merge_msg_Struct_RoomBrief(Prev, New, TrUserData);
      'Struct_RoomPlayerBrief' ->
	  merge_msg_Struct_RoomPlayerBrief(Prev, New, TrUserData);
      'C2S_Login' ->
	  merge_msg_C2S_Login(Prev, New, TrUserData);
      'S2C_Login' ->
	  merge_msg_S2C_Login(Prev, New, TrUserData);
      'S2C_Err' -> merge_msg_S2C_Err(Prev, New, TrUserData);
      'C2S_Heartbeat' ->
	  merge_msg_C2S_Heartbeat(Prev, New, TrUserData);
      'S2C_Heartbeat' ->
	  merge_msg_S2C_Heartbeat(Prev, New, TrUserData);
      'C2S_Gm' -> merge_msg_C2S_Gm(Prev, New, TrUserData);
      'S2C_Gm' -> merge_msg_S2C_Gm(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_Struct_DeviceInfo/3}).
merge_msg_Struct_DeviceInfo(#'Struct_DeviceInfo'{},
			    #'Struct_DeviceInfo'{os = NFos,
						 deviceType = NFdeviceType,
						 resolution = NFresolution,
						 network = NFnetwork},
			    _) ->
    #'Struct_DeviceInfo'{os = NFos,
			 deviceType = NFdeviceType, resolution = NFresolution,
			 network = NFnetwork}.

-compile({nowarn_unused_function,merge_msg_S2C_PlayerInfo1/3}).
merge_msg_S2C_PlayerInfo1(#'S2C_PlayerInfo1'{},
			  #'S2C_PlayerInfo1'{moneyLeft = NFmoneyLeft}, _) ->
    #'S2C_PlayerInfo1'{moneyLeft = NFmoneyLeft}.

-compile({nowarn_unused_function,merge_msg_Struct_RoomBrief/3}).
merge_msg_Struct_RoomBrief(#'Struct_RoomBrief'{},
			   #'Struct_RoomBrief'{roomId = NFroomId,
					       gameId = NFgameId,
					       playerCount = NFplayerCount,
					       isLocked = NFisLocked,
					       ownerId = NFownerId},
			   _) ->
    #'Struct_RoomBrief'{roomId = NFroomId,
			gameId = NFgameId, playerCount = NFplayerCount,
			isLocked = NFisLocked, ownerId = NFownerId}.

-compile({nowarn_unused_function,merge_msg_Struct_RoomPlayerBrief/3}).
merge_msg_Struct_RoomPlayerBrief(#'Struct_RoomPlayerBrief'{},
				 #'Struct_RoomPlayerBrief'{id = NFid,
							   nickname =
							       NFnickname,
							   avatar = NFavatar},
				 _) ->
    #'Struct_RoomPlayerBrief'{id = NFid,
			      nickname = NFnickname, avatar = NFavatar}.

-compile({nowarn_unused_function,merge_msg_C2S_Login/3}).
merge_msg_C2S_Login(#'C2S_Login'{device = PFdevice},
		    #'C2S_Login'{token = NFtoken, version = NFversion,
				 device = NFdevice},
		    TrUserData) ->
    #'C2S_Login'{token = NFtoken, version = NFversion,
		 device =
		     merge_msg_Struct_DeviceInfo(PFdevice, NFdevice,
						 TrUserData)}.

-compile({nowarn_unused_function,merge_msg_S2C_Login/3}).
merge_msg_S2C_Login(#'S2C_Login'{rooms = PFrooms,
				 notFinishedRoom = PFnotFinishedRoom},
		    #'S2C_Login'{id = NFid, nickname = NFnickname,
				 money = NFmoney, rooms = NFrooms,
				 notFinishedRoom = NFnotFinishedRoom},
		    TrUserData) ->
    #'S2C_Login'{id = NFid, nickname = NFnickname,
		 money = NFmoney,
		 rooms =
		     if PFrooms /= undefined, NFrooms /= undefined ->
			    'erlang_++'(PFrooms, NFrooms, TrUserData);
			PFrooms == undefined -> NFrooms;
			NFrooms == undefined -> PFrooms
		     end,
		 notFinishedRoom =
		     if PFnotFinishedRoom /= undefined,
			NFnotFinishedRoom /= undefined ->
			    merge_msg_Struct_RoomBrief(PFnotFinishedRoom,
						       NFnotFinishedRoom,
						       TrUserData);
			PFnotFinishedRoom == undefined -> NFnotFinishedRoom;
			NFnotFinishedRoom == undefined -> PFnotFinishedRoom
		     end}.

-compile({nowarn_unused_function,merge_msg_S2C_Err/3}).
merge_msg_S2C_Err(#'S2C_Err'{},
		  #'S2C_Err'{code = NFcode, type = NFtype, msg = NFmsg},
		  _) ->
    #'S2C_Err'{code = NFcode, type = NFtype, msg = NFmsg}.

-compile({nowarn_unused_function,merge_msg_C2S_Heartbeat/3}).
merge_msg_C2S_Heartbeat(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_S2C_Heartbeat/3}).
merge_msg_S2C_Heartbeat(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_C2S_Gm/3}).
merge_msg_C2S_Gm(#'C2S_Gm'{arg1 = PFarg1, arg2 = PFarg2,
			   arg3 = PFarg3, arg4 = PFarg4, arg5 = PFarg5,
			   arg6 = PFarg6, arg7 = PFarg7, arg8 = PFarg8,
			   arg9 = PFarg9},
		 #'C2S_Gm'{cmd = NFcmd, seqId = NFseqId, arg1 = NFarg1,
			   arg2 = NFarg2, arg3 = NFarg3, arg4 = NFarg4,
			   arg5 = NFarg5, arg6 = NFarg6, arg7 = NFarg7,
			   arg8 = NFarg8, arg9 = NFarg9},
		 _) ->
    #'C2S_Gm'{cmd = NFcmd, seqId = NFseqId,
	      arg1 =
		  if NFarg1 =:= undefined -> PFarg1;
		     true -> NFarg1
		  end,
	      arg2 =
		  if NFarg2 =:= undefined -> PFarg2;
		     true -> NFarg2
		  end,
	      arg3 =
		  if NFarg3 =:= undefined -> PFarg3;
		     true -> NFarg3
		  end,
	      arg4 =
		  if NFarg4 =:= undefined -> PFarg4;
		     true -> NFarg4
		  end,
	      arg5 =
		  if NFarg5 =:= undefined -> PFarg5;
		     true -> NFarg5
		  end,
	      arg6 =
		  if NFarg6 =:= undefined -> PFarg6;
		     true -> NFarg6
		  end,
	      arg7 =
		  if NFarg7 =:= undefined -> PFarg7;
		     true -> NFarg7
		  end,
	      arg8 =
		  if NFarg8 =:= undefined -> PFarg8;
		     true -> NFarg8
		  end,
	      arg9 =
		  if NFarg9 =:= undefined -> PFarg9;
		     true -> NFarg9
		  end}.

-compile({nowarn_unused_function,merge_msg_S2C_Gm/3}).
merge_msg_S2C_Gm(#'S2C_Gm'{},
		 #'S2C_Gm'{seqId = NFseqId, code = NFcode}, _) ->
    #'S2C_Gm'{seqId = NFseqId, code = NFcode}.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Struct_DeviceInfo' ->
	  v_msg_Struct_DeviceInfo(Msg, [MsgName], TrUserData);
      'S2C_PlayerInfo1' ->
	  v_msg_S2C_PlayerInfo1(Msg, [MsgName], TrUserData);
      'Struct_RoomBrief' ->
	  v_msg_Struct_RoomBrief(Msg, [MsgName], TrUserData);
      'Struct_RoomPlayerBrief' ->
	  v_msg_Struct_RoomPlayerBrief(Msg, [MsgName],
				       TrUserData);
      'C2S_Login' ->
	  v_msg_C2S_Login(Msg, [MsgName], TrUserData);
      'S2C_Login' ->
	  v_msg_S2C_Login(Msg, [MsgName], TrUserData);
      'S2C_Err' -> v_msg_S2C_Err(Msg, [MsgName], TrUserData);
      'C2S_Heartbeat' ->
	  v_msg_C2S_Heartbeat(Msg, [MsgName], TrUserData);
      'S2C_Heartbeat' ->
	  v_msg_S2C_Heartbeat(Msg, [MsgName], TrUserData);
      'C2S_Gm' -> v_msg_C2S_Gm(Msg, [MsgName], TrUserData);
      'S2C_Gm' -> v_msg_S2C_Gm(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_Struct_DeviceInfo/3}).
-dialyzer({nowarn_function,v_msg_Struct_DeviceInfo/3}).
v_msg_Struct_DeviceInfo(#'Struct_DeviceInfo'{os = F1,
					     deviceType = F2, resolution = F3,
					     network = F4},
			Path, TrUserData) ->
    v_type_string(F1, [os | Path], TrUserData),
    v_type_string(F2, [deviceType | Path], TrUserData),
    v_type_string(F3, [resolution | Path], TrUserData),
    v_type_string(F4, [network | Path], TrUserData),
    ok;
v_msg_Struct_DeviceInfo(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Struct_DeviceInfo'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_S2C_PlayerInfo1/3}).
-dialyzer({nowarn_function,v_msg_S2C_PlayerInfo1/3}).
v_msg_S2C_PlayerInfo1(#'S2C_PlayerInfo1'{moneyLeft =
					     F1},
		      Path, TrUserData) ->
    v_type_uint64(F1, [moneyLeft | Path], TrUserData), ok;
v_msg_S2C_PlayerInfo1(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'S2C_PlayerInfo1'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_Struct_RoomBrief/3}).
-dialyzer({nowarn_function,v_msg_Struct_RoomBrief/3}).
v_msg_Struct_RoomBrief(#'Struct_RoomBrief'{roomId = F1,
					   gameId = F2, playerCount = F3,
					   isLocked = F4, ownerId = F5},
		       Path, TrUserData) ->
    v_type_uint32(F1, [roomId | Path], TrUserData),
    v_type_uint32(F2, [gameId | Path], TrUserData),
    v_type_uint32(F3, [playerCount | Path], TrUserData),
    v_type_bool(F4, [isLocked | Path], TrUserData),
    v_type_string(F5, [ownerId | Path], TrUserData),
    ok;
v_msg_Struct_RoomBrief(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Struct_RoomBrief'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_Struct_RoomPlayerBrief/3}).
-dialyzer({nowarn_function,v_msg_Struct_RoomPlayerBrief/3}).
v_msg_Struct_RoomPlayerBrief(#'Struct_RoomPlayerBrief'{id
							   = F1,
						       nickname = F2,
						       avatar = F3},
			     Path, TrUserData) ->
    v_type_string(F1, [id | Path], TrUserData),
    v_type_string(F2, [nickname | Path], TrUserData),
    v_type_string(F3, [avatar | Path], TrUserData),
    ok;
v_msg_Struct_RoomPlayerBrief(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Struct_RoomPlayerBrief'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_C2S_Login/3}).
-dialyzer({nowarn_function,v_msg_C2S_Login/3}).
v_msg_C2S_Login(#'C2S_Login'{token = F1, version = F2,
			     device = F3},
		Path, TrUserData) ->
    v_type_string(F1, [token | Path], TrUserData),
    v_type_uint32(F2, [version | Path], TrUserData),
    v_msg_Struct_DeviceInfo(F3, [device | Path],
			    TrUserData),
    ok;
v_msg_C2S_Login(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'C2S_Login'}, X, Path).

-compile({nowarn_unused_function,v_msg_S2C_Login/3}).
-dialyzer({nowarn_function,v_msg_S2C_Login/3}).
v_msg_S2C_Login(#'S2C_Login'{id = F1, nickname = F2,
			     money = F3, rooms = F4, notFinishedRoom = F5},
		Path, TrUserData) ->
    v_type_string(F1, [id | Path], TrUserData),
    v_type_string(F2, [nickname | Path], TrUserData),
    v_type_uint64(F3, [money | Path], TrUserData),
    if is_list(F4) ->
	   _ = [v_msg_Struct_RoomBrief(Elem, [rooms | Path],
				       TrUserData)
		|| Elem <- F4],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'Struct_RoomBrief'}},
			 F4, [rooms | Path])
    end,
    if F5 == undefined -> ok;
       true ->
	   v_msg_Struct_RoomBrief(F5, [notFinishedRoom | Path],
				  TrUserData)
    end,
    ok;
v_msg_S2C_Login(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'S2C_Login'}, X, Path).

-compile({nowarn_unused_function,v_msg_S2C_Err/3}).
-dialyzer({nowarn_function,v_msg_S2C_Err/3}).
v_msg_S2C_Err(#'S2C_Err'{code = F1, type = F2,
			 msg = F3},
	      Path, TrUserData) ->
    v_enum_EnumS2CErrCode(F1, [code | Path], TrUserData),
    v_enum_EnumS2CTipsShowType(F2, [type | Path],
			       TrUserData),
    v_type_string(F3, [msg | Path], TrUserData),
    ok;
v_msg_S2C_Err(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'S2C_Err'}, X, Path).

-compile({nowarn_unused_function,v_msg_C2S_Heartbeat/3}).
-dialyzer({nowarn_function,v_msg_C2S_Heartbeat/3}).
v_msg_C2S_Heartbeat(#'C2S_Heartbeat'{}, _Path, _) -> ok;
v_msg_C2S_Heartbeat(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'C2S_Heartbeat'}, X, Path).

-compile({nowarn_unused_function,v_msg_S2C_Heartbeat/3}).
-dialyzer({nowarn_function,v_msg_S2C_Heartbeat/3}).
v_msg_S2C_Heartbeat(#'S2C_Heartbeat'{}, _Path, _) -> ok;
v_msg_S2C_Heartbeat(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'S2C_Heartbeat'}, X, Path).

-compile({nowarn_unused_function,v_msg_C2S_Gm/3}).
-dialyzer({nowarn_function,v_msg_C2S_Gm/3}).
v_msg_C2S_Gm(#'C2S_Gm'{cmd = F1, seqId = F2, arg1 = F3,
		       arg2 = F4, arg3 = F5, arg4 = F6, arg5 = F7, arg6 = F8,
		       arg7 = F9, arg8 = F10, arg9 = F11},
	     Path, TrUserData) ->
    v_type_string(F1, [cmd | Path], TrUserData),
    v_type_int32(F2, [seqId | Path], TrUserData),
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [arg1 | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [arg2 | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_string(F5, [arg3 | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_type_string(F6, [arg4 | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true -> v_type_string(F7, [arg5 | Path], TrUserData)
    end,
    if F8 == undefined -> ok;
       true -> v_type_string(F8, [arg6 | Path], TrUserData)
    end,
    if F9 == undefined -> ok;
       true -> v_type_string(F9, [arg7 | Path], TrUserData)
    end,
    if F10 == undefined -> ok;
       true -> v_type_string(F10, [arg8 | Path], TrUserData)
    end,
    if F11 == undefined -> ok;
       true -> v_type_string(F11, [arg9 | Path], TrUserData)
    end,
    ok;
v_msg_C2S_Gm(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'C2S_Gm'}, X, Path).

-compile({nowarn_unused_function,v_msg_S2C_Gm/3}).
-dialyzer({nowarn_function,v_msg_S2C_Gm/3}).
v_msg_S2C_Gm(#'S2C_Gm'{seqId = F1, code = F2}, Path,
	     TrUserData) ->
    v_type_int32(F1, [seqId | Path], TrUserData),
    v_type_int32(F2, [code | Path], TrUserData),
    ok;
v_msg_S2C_Gm(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'S2C_Gm'}, X, Path).

-compile({nowarn_unused_function,v_enum_EnumS2CTipsShowType/3}).
-dialyzer({nowarn_function,v_enum_EnumS2CTipsShowType/3}).
v_enum_EnumS2CTipsShowType('E_S2CTipsShowType_PopUp',
			   _Path, _TrUserData) ->
    ok;
v_enum_EnumS2CTipsShowType('E_S2CTipsShowType_Marquee',
			   _Path, _TrUserData) ->
    ok;
v_enum_EnumS2CTipsShowType(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
v_enum_EnumS2CTipsShowType(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'EnumS2CTipsShowType'}, X,
		  Path).

-compile({nowarn_unused_function,v_enum_EnumS2CErrCode/3}).
-dialyzer({nowarn_function,v_enum_EnumS2CErrCode/3}).
v_enum_EnumS2CErrCode('E_S2CErrCode_Succ', _Path,
		      _TrUserData) ->
    ok;
v_enum_EnumS2CErrCode('E_S2CErrCode_Sys', _Path,
		      _TrUserData) ->
    ok;
v_enum_EnumS2CErrCode('E_S2CErrCode_Busy', _Path,
		      _TrUserData) ->
    ok;
v_enum_EnumS2CErrCode('E_S2CErrCode_OpToFrequency',
		      _Path, _TrUserData) ->
    ok;
v_enum_EnumS2CErrCode('E_S2CErrCode_ReLogin', _Path,
		      _TrUserData) ->
    ok;
v_enum_EnumS2CErrCode('E_S2CErrCode_NotLogin', _Path,
		      _TrUserData) ->
    ok;
v_enum_EnumS2CErrCode('E_S2CErrCode_LoginCheckTimeout',
		      _Path, _TrUserData) ->
    ok;
v_enum_EnumS2CErrCode('E_S2CErrCode_LoginCheckNotThrough',
		      _Path, _TrUserData) ->
    ok;
v_enum_EnumS2CErrCode('E_S2CErrCode_ErrArgs', _Path,
		      _TrUserData) ->
    ok;
v_enum_EnumS2CErrCode('E_S2CErrCode_ProtoErr', _Path,
		      _TrUserData) ->
    ok;
v_enum_EnumS2CErrCode('E_S2CErrCode_LoginTokenInvalid',
		      _Path, _TrUserData) ->
    ok;
v_enum_EnumS2CErrCode('E_S2CErrCode_BeKicked', _Path,
		      _TrUserData) ->
    ok;
v_enum_EnumS2CErrCode('E_S2CErrCode_NotEnoughMoney',
		      _Path, _TrUserData) ->
    ok;
v_enum_EnumS2CErrCode(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
v_enum_EnumS2CErrCode(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'EnumS2CErrCode'}, X,
		  Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_uint32/3}).
-dialyzer({nowarn_function,v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData)
    when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned,
		   32},
		  N, Path);
v_type_uint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_uint64/3}).
-dialyzer({nowarn_function,v_type_uint64/3}).
v_type_uint64(N, _Path, _TrUserData)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_uint64(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, uint64, unsigned,
		   64},
		  N, Path);
v_type_uint64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint64, unsigned, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) ->
    mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{enum, 'EnumS2CTipsShowType'},
      [{'E_S2CTipsShowType_PopUp', 0},
       {'E_S2CTipsShowType_Marquee', 1}]},
     {{enum, 'EnumS2CErrCode'},
      [{'E_S2CErrCode_Succ', 0}, {'E_S2CErrCode_Sys', 1},
       {'E_S2CErrCode_Busy', 2},
       {'E_S2CErrCode_OpToFrequency', 3},
       {'E_S2CErrCode_ReLogin', 4},
       {'E_S2CErrCode_NotLogin', 5},
       {'E_S2CErrCode_LoginCheckTimeout', 6},
       {'E_S2CErrCode_LoginCheckNotThrough', 7},
       {'E_S2CErrCode_ErrArgs', 8},
       {'E_S2CErrCode_ProtoErr', 9},
       {'E_S2CErrCode_LoginTokenInvalid', 10},
       {'E_S2CErrCode_BeKicked', 11},
       {'E_S2CErrCode_NotEnoughMoney', 100}]},
     {{msg, 'Struct_DeviceInfo'},
      [#field{name = os, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = deviceType, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = resolution, fnum = 3, rnum = 4,
	      type = string, occurrence = required, opts = []},
       #field{name = network, fnum = 4, rnum = 5,
	      type = string, occurrence = required, opts = []}]},
     {{msg, 'S2C_PlayerInfo1'},
      [#field{name = moneyLeft, fnum = 2, rnum = 2,
	      type = uint64, occurrence = required, opts = []}]},
     {{msg, 'Struct_RoomBrief'},
      [#field{name = roomId, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []},
       #field{name = gameId, fnum = 2, rnum = 3, type = uint32,
	      occurrence = required, opts = []},
       #field{name = playerCount, fnum = 3, rnum = 4,
	      type = uint32, occurrence = required, opts = []},
       #field{name = isLocked, fnum = 4, rnum = 5, type = bool,
	      occurrence = required, opts = []},
       #field{name = ownerId, fnum = 5, rnum = 6,
	      type = string, occurrence = required, opts = []}]},
     {{msg, 'Struct_RoomPlayerBrief'},
      [#field{name = id, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = nickname, fnum = 3, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = avatar, fnum = 4, rnum = 4, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'C2S_Login'},
      [#field{name = token, fnum = 2, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = version, fnum = 3, rnum = 3,
	      type = uint32, occurrence = required, opts = []},
       #field{name = device, fnum = 4, rnum = 4,
	      type = {msg, 'Struct_DeviceInfo'},
	      occurrence = required, opts = []}]},
     {{msg, 'S2C_Login'},
      [#field{name = id, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = nickname, fnum = 3, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = money, fnum = 4, rnum = 4, type = uint64,
	      occurrence = required, opts = []},
       #field{name = rooms, fnum = 10, rnum = 5,
	      type = {msg, 'Struct_RoomBrief'}, occurrence = repeated,
	      opts = []},
       #field{name = notFinishedRoom, fnum = 11, rnum = 6,
	      type = {msg, 'Struct_RoomBrief'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'S2C_Err'},
      [#field{name = code, fnum = 1, rnum = 2,
	      type = {enum, 'EnumS2CErrCode'}, occurrence = required,
	      opts = []},
       #field{name = type, fnum = 2, rnum = 3,
	      type = {enum, 'EnumS2CTipsShowType'},
	      occurrence = required, opts = []},
       #field{name = msg, fnum = 3, rnum = 4, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'C2S_Heartbeat'}, []},
     {{msg, 'S2C_Heartbeat'}, []},
     {{msg, 'C2S_Gm'},
      [#field{name = cmd, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = seqId, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = arg1, fnum = 11, rnum = 4, type = string,
	      occurrence = optional, opts = []},
       #field{name = arg2, fnum = 12, rnum = 5, type = string,
	      occurrence = optional, opts = []},
       #field{name = arg3, fnum = 13, rnum = 6, type = string,
	      occurrence = optional, opts = []},
       #field{name = arg4, fnum = 14, rnum = 7, type = string,
	      occurrence = optional, opts = []},
       #field{name = arg5, fnum = 15, rnum = 8, type = string,
	      occurrence = optional, opts = []},
       #field{name = arg6, fnum = 16, rnum = 9, type = string,
	      occurrence = optional, opts = []},
       #field{name = arg7, fnum = 17, rnum = 10, type = string,
	      occurrence = optional, opts = []},
       #field{name = arg8, fnum = 18, rnum = 11, type = string,
	      occurrence = optional, opts = []},
       #field{name = arg9, fnum = 19, rnum = 12, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'S2C_Gm'},
      [#field{name = seqId, fnum = 2, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = code, fnum = 3, rnum = 3, type = int32,
	      occurrence = required, opts = []}]}].


get_msg_names() ->
    ['Struct_DeviceInfo', 'S2C_PlayerInfo1',
     'Struct_RoomBrief', 'Struct_RoomPlayerBrief',
     'C2S_Login', 'S2C_Login', 'S2C_Err', 'C2S_Heartbeat',
     'S2C_Heartbeat', 'C2S_Gm', 'S2C_Gm'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['Struct_DeviceInfo', 'S2C_PlayerInfo1',
     'Struct_RoomBrief', 'Struct_RoomPlayerBrief',
     'C2S_Login', 'S2C_Login', 'S2C_Err', 'C2S_Heartbeat',
     'S2C_Heartbeat', 'C2S_Gm', 'S2C_Gm'].


get_enum_names() ->
    ['EnumS2CTipsShowType', 'EnumS2CErrCode'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('Struct_DeviceInfo') ->
    [#field{name = os, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = deviceType, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = resolution, fnum = 3, rnum = 4,
	    type = string, occurrence = required, opts = []},
     #field{name = network, fnum = 4, rnum = 5,
	    type = string, occurrence = required, opts = []}];
find_msg_def('S2C_PlayerInfo1') ->
    [#field{name = moneyLeft, fnum = 2, rnum = 2,
	    type = uint64, occurrence = required, opts = []}];
find_msg_def('Struct_RoomBrief') ->
    [#field{name = roomId, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []},
     #field{name = gameId, fnum = 2, rnum = 3, type = uint32,
	    occurrence = required, opts = []},
     #field{name = playerCount, fnum = 3, rnum = 4,
	    type = uint32, occurrence = required, opts = []},
     #field{name = isLocked, fnum = 4, rnum = 5, type = bool,
	    occurrence = required, opts = []},
     #field{name = ownerId, fnum = 5, rnum = 6,
	    type = string, occurrence = required, opts = []}];
find_msg_def('Struct_RoomPlayerBrief') ->
    [#field{name = id, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = nickname, fnum = 3, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = avatar, fnum = 4, rnum = 4, type = string,
	    occurrence = required, opts = []}];
find_msg_def('C2S_Login') ->
    [#field{name = token, fnum = 2, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = version, fnum = 3, rnum = 3,
	    type = uint32, occurrence = required, opts = []},
     #field{name = device, fnum = 4, rnum = 4,
	    type = {msg, 'Struct_DeviceInfo'},
	    occurrence = required, opts = []}];
find_msg_def('S2C_Login') ->
    [#field{name = id, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = nickname, fnum = 3, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = money, fnum = 4, rnum = 4, type = uint64,
	    occurrence = required, opts = []},
     #field{name = rooms, fnum = 10, rnum = 5,
	    type = {msg, 'Struct_RoomBrief'}, occurrence = repeated,
	    opts = []},
     #field{name = notFinishedRoom, fnum = 11, rnum = 6,
	    type = {msg, 'Struct_RoomBrief'}, occurrence = optional,
	    opts = []}];
find_msg_def('S2C_Err') ->
    [#field{name = code, fnum = 1, rnum = 2,
	    type = {enum, 'EnumS2CErrCode'}, occurrence = required,
	    opts = []},
     #field{name = type, fnum = 2, rnum = 3,
	    type = {enum, 'EnumS2CTipsShowType'},
	    occurrence = required, opts = []},
     #field{name = msg, fnum = 3, rnum = 4, type = string,
	    occurrence = required, opts = []}];
find_msg_def('C2S_Heartbeat') -> [];
find_msg_def('S2C_Heartbeat') -> [];
find_msg_def('C2S_Gm') ->
    [#field{name = cmd, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = seqId, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = arg1, fnum = 11, rnum = 4, type = string,
	    occurrence = optional, opts = []},
     #field{name = arg2, fnum = 12, rnum = 5, type = string,
	    occurrence = optional, opts = []},
     #field{name = arg3, fnum = 13, rnum = 6, type = string,
	    occurrence = optional, opts = []},
     #field{name = arg4, fnum = 14, rnum = 7, type = string,
	    occurrence = optional, opts = []},
     #field{name = arg5, fnum = 15, rnum = 8, type = string,
	    occurrence = optional, opts = []},
     #field{name = arg6, fnum = 16, rnum = 9, type = string,
	    occurrence = optional, opts = []},
     #field{name = arg7, fnum = 17, rnum = 10, type = string,
	    occurrence = optional, opts = []},
     #field{name = arg8, fnum = 18, rnum = 11, type = string,
	    occurrence = optional, opts = []},
     #field{name = arg9, fnum = 19, rnum = 12, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('S2C_Gm') ->
    [#field{name = seqId, fnum = 2, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = code, fnum = 3, rnum = 3, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(_) -> error.


find_enum_def('EnumS2CTipsShowType') ->
    [{'E_S2CTipsShowType_PopUp', 0},
     {'E_S2CTipsShowType_Marquee', 1}];
find_enum_def('EnumS2CErrCode') ->
    [{'E_S2CErrCode_Succ', 0}, {'E_S2CErrCode_Sys', 1},
     {'E_S2CErrCode_Busy', 2},
     {'E_S2CErrCode_OpToFrequency', 3},
     {'E_S2CErrCode_ReLogin', 4},
     {'E_S2CErrCode_NotLogin', 5},
     {'E_S2CErrCode_LoginCheckTimeout', 6},
     {'E_S2CErrCode_LoginCheckNotThrough', 7},
     {'E_S2CErrCode_ErrArgs', 8},
     {'E_S2CErrCode_ProtoErr', 9},
     {'E_S2CErrCode_LoginTokenInvalid', 10},
     {'E_S2CErrCode_BeKicked', 11},
     {'E_S2CErrCode_NotEnoughMoney', 100}];
find_enum_def(_) -> error.


enum_symbol_by_value('EnumS2CTipsShowType', Value) ->
    enum_symbol_by_value_EnumS2CTipsShowType(Value);
enum_symbol_by_value('EnumS2CErrCode', Value) ->
    enum_symbol_by_value_EnumS2CErrCode(Value).


enum_value_by_symbol('EnumS2CTipsShowType', Sym) ->
    enum_value_by_symbol_EnumS2CTipsShowType(Sym);
enum_value_by_symbol('EnumS2CErrCode', Sym) ->
    enum_value_by_symbol_EnumS2CErrCode(Sym).


enum_symbol_by_value_EnumS2CTipsShowType(0) ->
    'E_S2CTipsShowType_PopUp';
enum_symbol_by_value_EnumS2CTipsShowType(1) ->
    'E_S2CTipsShowType_Marquee'.


enum_value_by_symbol_EnumS2CTipsShowType('E_S2CTipsShowType_PopUp') ->
    0;
enum_value_by_symbol_EnumS2CTipsShowType('E_S2CTipsShowType_Marquee') ->
    1.

enum_symbol_by_value_EnumS2CErrCode(0) ->
    'E_S2CErrCode_Succ';
enum_symbol_by_value_EnumS2CErrCode(1) ->
    'E_S2CErrCode_Sys';
enum_symbol_by_value_EnumS2CErrCode(2) ->
    'E_S2CErrCode_Busy';
enum_symbol_by_value_EnumS2CErrCode(3) ->
    'E_S2CErrCode_OpToFrequency';
enum_symbol_by_value_EnumS2CErrCode(4) ->
    'E_S2CErrCode_ReLogin';
enum_symbol_by_value_EnumS2CErrCode(5) ->
    'E_S2CErrCode_NotLogin';
enum_symbol_by_value_EnumS2CErrCode(6) ->
    'E_S2CErrCode_LoginCheckTimeout';
enum_symbol_by_value_EnumS2CErrCode(7) ->
    'E_S2CErrCode_LoginCheckNotThrough';
enum_symbol_by_value_EnumS2CErrCode(8) ->
    'E_S2CErrCode_ErrArgs';
enum_symbol_by_value_EnumS2CErrCode(9) ->
    'E_S2CErrCode_ProtoErr';
enum_symbol_by_value_EnumS2CErrCode(10) ->
    'E_S2CErrCode_LoginTokenInvalid';
enum_symbol_by_value_EnumS2CErrCode(11) ->
    'E_S2CErrCode_BeKicked';
enum_symbol_by_value_EnumS2CErrCode(100) ->
    'E_S2CErrCode_NotEnoughMoney'.


enum_value_by_symbol_EnumS2CErrCode('E_S2CErrCode_Succ') ->
    0;
enum_value_by_symbol_EnumS2CErrCode('E_S2CErrCode_Sys') ->
    1;
enum_value_by_symbol_EnumS2CErrCode('E_S2CErrCode_Busy') ->
    2;
enum_value_by_symbol_EnumS2CErrCode('E_S2CErrCode_OpToFrequency') ->
    3;
enum_value_by_symbol_EnumS2CErrCode('E_S2CErrCode_ReLogin') ->
    4;
enum_value_by_symbol_EnumS2CErrCode('E_S2CErrCode_NotLogin') ->
    5;
enum_value_by_symbol_EnumS2CErrCode('E_S2CErrCode_LoginCheckTimeout') ->
    6;
enum_value_by_symbol_EnumS2CErrCode('E_S2CErrCode_LoginCheckNotThrough') ->
    7;
enum_value_by_symbol_EnumS2CErrCode('E_S2CErrCode_ErrArgs') ->
    8;
enum_value_by_symbol_EnumS2CErrCode('E_S2CErrCode_ProtoErr') ->
    9;
enum_value_by_symbol_EnumS2CErrCode('E_S2CErrCode_LoginTokenInvalid') ->
    10;
enum_value_by_symbol_EnumS2CErrCode('E_S2CErrCode_BeKicked') ->
    11;
enum_value_by_symbol_EnumS2CErrCode('E_S2CErrCode_NotEnoughMoney') ->
    100.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> undefined.



gpb_version_as_string() ->
    "4.4.0".

gpb_version_as_list() ->
    [4,4,0].
