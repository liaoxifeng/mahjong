%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.4.0
-module(pt_mahjong).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([enum_symbol_by_value_EnumS2CTipsShowType/1, enum_value_by_symbol_EnumS2CTipsShowType/1]).
-export([enum_symbol_by_value_EnumS2CErrCode/1, enum_value_by_symbol_EnumS2CErrCode/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("pt_mahjong.hrl").
-include_lib("gpb/include/gpb.hrl").

%% enumerated types
-type 'EnumS2CTipsShowType'() :: 'E_S2CTipsShowType_PopUp' | 'E_S2CTipsShowType_Marquee'.
-type 'EnumS2CErrCode'() :: 'E_S2CErrCode_Succ' | 'E_S2CErrCode_Sys' | 'E_S2CErrCode_Busy' | 'E_S2CErrCode_OpToFrequency' | 'E_S2CErrCode_ReLogin' | 'E_S2CErrCode_NotLogin' | 'E_S2CErrCode_LoginCheckTimeout' | 'E_S2CErrCode_LoginCheckNotThrough' | 'E_S2CErrCode_ErrArgs' | 'E_S2CErrCode_ProtoErr' | 'E_S2CErrCode_LoginTokenInvalid' | 'E_S2CErrCode_BeKicked' | 'E_S2CErrCode_NotEnoughMoney'.
-export_type(['EnumS2CTipsShowType'/0, 'EnumS2CErrCode'/0]).

%% message types
-type 'C2S_MahjongPrepare'() :: #'C2S_MahjongPrepare'{}.

-type 'S2C_MahjongPrepare'() :: #'S2C_MahjongPrepare'{}.

-type 'C2S_MahjongCancelPrepare'() :: #'C2S_MahjongCancelPrepare'{}.

-type 'S2C_MahjongCancelPrepare'() :: #'S2C_MahjongCancelPrepare'{}.

-type 'Struct_MahjongPlayerBrief'() :: #'Struct_MahjongPlayerBrief'{}.

-type 'C2S_MahjongStart'() :: #'C2S_MahjongStart'{}.

-type 'S2C_MahjongStart'() :: #'S2C_MahjongStart'{}.

-type 'S2C_MahjongDraw'() :: #'S2C_MahjongDraw'{}.

-type 'C2S_MahjongDiscard'() :: #'C2S_MahjongDiscard'{}.

-type 'S2C_MahjongDiscard'() :: #'S2C_MahjongDiscard'{}.

-type 'C2S_MahjongPongs'() :: #'C2S_MahjongPongs'{}.

-type 'S2C_MahjongPongs'() :: #'S2C_MahjongPongs'{}.

-type 'C2S_MahjongKong'() :: #'C2S_MahjongKong'{}.

-type 'S2C_MahjongKong'() :: #'S2C_MahjongKong'{}.

-type 'C2S_MahjongChow'() :: #'C2S_MahjongChow'{}.

-type 'S2C_MahjongChow'() :: #'S2C_MahjongChow'{}.

-type 'C2S_MahjongHu'() :: #'C2S_MahjongHu'{}.

-type 'S2C_MahjongHu'() :: #'S2C_MahjongHu'{}.

-type 'C2S_MahjongZimo'() :: #'C2S_MahjongZimo'{}.

-type 'S2C_MahjongZimo'() :: #'S2C_MahjongZimo'{}.

-type 'C2S_MahjongChangeThree'() :: #'C2S_MahjongChangeThree'{}.

-type 'S2C_MahjongChangeThree'() :: #'S2C_MahjongChangeThree'{}.

-type 'C2S_MahjongDingQue'() :: #'C2S_MahjongDingQue'{}.

-type 'Struct_MahjongDingQueBrief'() :: #'Struct_MahjongDingQueBrief'{}.

-type 'S2C_MahjongDingQue'() :: #'S2C_MahjongDingQue'{}.

-type 'C2S_MahjongNextGame'() :: #'C2S_MahjongNextGame'{}.

-type 'S2C_MahjongNextGame'() :: #'S2C_MahjongNextGame'{}.

-type 'S2C_MahjongNoPrepare'() :: #'S2C_MahjongNoPrepare'{}.

-type 'S2C_MahjongNoOwner'() :: #'S2C_MahjongNoOwner'{}.

-type 'S2C_MahjongHaveNoPrepare'() :: #'S2C_MahjongHaveNoPrepare'{}.

-type 'S2C_MahjongFinishChangeThree'() :: #'S2C_MahjongFinishChangeThree'{}.

-type 'S2C_MahjongFinishDingQue'() :: #'S2C_MahjongFinishDingQue'{}.

-type 'S2C_MahjongNoPongs'() :: #'S2C_MahjongNoPongs'{}.

-type 'S2C_MahjongNoKong'() :: #'S2C_MahjongNoKong'{}.

-type 'S2C_MahjongNoZimo'() :: #'S2C_MahjongNoZimo'{}.

-type 'S2C_MahjongNoHu'() :: #'S2C_MahjongNoHu'{}.

-type 'S2C_MahjongHaveNoNextGame'() :: #'S2C_MahjongHaveNoNextGame'{}.

-type 'S2C_MahjongFinish'() :: #'S2C_MahjongFinish'{}.

-type 'C2S_MahjongHistory'() :: #'C2S_MahjongHistory'{}.

-type 'Struct_MahjongHistory'() :: #'Struct_MahjongHistory'{}.

-type 'S2C_MahjongHistory'() :: #'S2C_MahjongHistory'{}.

-type 'C2S_Login'() :: #'C2S_Login'{}.

-type 'S2C_Login'() :: #'S2C_Login'{}.

-type 'S2C_Err'() :: #'S2C_Err'{}.

-type 'S2C_PlayerInfo'() :: #'S2C_PlayerInfo'{}.

-type 'C2S_Heartbeat'() :: #'C2S_Heartbeat'{}.

-type 'S2C_Heartbeat'() :: #'S2C_Heartbeat'{}.

-type 'C2S_Gm'() :: #'C2S_Gm'{}.

-type 'S2C_Gm'() :: #'S2C_Gm'{}.

-export_type(['C2S_MahjongPrepare'/0, 'S2C_MahjongPrepare'/0, 'C2S_MahjongCancelPrepare'/0, 'S2C_MahjongCancelPrepare'/0, 'Struct_MahjongPlayerBrief'/0, 'C2S_MahjongStart'/0, 'S2C_MahjongStart'/0, 'S2C_MahjongDraw'/0, 'C2S_MahjongDiscard'/0, 'S2C_MahjongDiscard'/0, 'C2S_MahjongPongs'/0, 'S2C_MahjongPongs'/0, 'C2S_MahjongKong'/0, 'S2C_MahjongKong'/0, 'C2S_MahjongChow'/0, 'S2C_MahjongChow'/0, 'C2S_MahjongHu'/0, 'S2C_MahjongHu'/0, 'C2S_MahjongZimo'/0, 'S2C_MahjongZimo'/0, 'C2S_MahjongChangeThree'/0, 'S2C_MahjongChangeThree'/0, 'C2S_MahjongDingQue'/0, 'Struct_MahjongDingQueBrief'/0, 'S2C_MahjongDingQue'/0, 'C2S_MahjongNextGame'/0, 'S2C_MahjongNextGame'/0, 'S2C_MahjongNoPrepare'/0, 'S2C_MahjongNoOwner'/0, 'S2C_MahjongHaveNoPrepare'/0, 'S2C_MahjongFinishChangeThree'/0, 'S2C_MahjongFinishDingQue'/0, 'S2C_MahjongNoPongs'/0, 'S2C_MahjongNoKong'/0, 'S2C_MahjongNoZimo'/0, 'S2C_MahjongNoHu'/0, 'S2C_MahjongHaveNoNextGame'/0, 'S2C_MahjongFinish'/0, 'C2S_MahjongHistory'/0, 'Struct_MahjongHistory'/0, 'S2C_MahjongHistory'/0, 'C2S_Login'/0, 'S2C_Login'/0, 'S2C_Err'/0, 'S2C_PlayerInfo'/0, 'C2S_Heartbeat'/0, 'S2C_Heartbeat'/0, 'C2S_Gm'/0, 'S2C_Gm'/0]).

-spec encode_msg(#'C2S_MahjongPrepare'{} | #'S2C_MahjongPrepare'{} | #'C2S_MahjongCancelPrepare'{} | #'S2C_MahjongCancelPrepare'{} | #'Struct_MahjongPlayerBrief'{} | #'C2S_MahjongStart'{} | #'S2C_MahjongStart'{} | #'S2C_MahjongDraw'{} | #'C2S_MahjongDiscard'{} | #'S2C_MahjongDiscard'{} | #'C2S_MahjongPongs'{} | #'S2C_MahjongPongs'{} | #'C2S_MahjongKong'{} | #'S2C_MahjongKong'{} | #'C2S_MahjongChow'{} | #'S2C_MahjongChow'{} | #'C2S_MahjongHu'{} | #'S2C_MahjongHu'{} | #'C2S_MahjongZimo'{} | #'S2C_MahjongZimo'{} | #'C2S_MahjongChangeThree'{} | #'S2C_MahjongChangeThree'{} | #'C2S_MahjongDingQue'{} | #'Struct_MahjongDingQueBrief'{} | #'S2C_MahjongDingQue'{} | #'C2S_MahjongNextGame'{} | #'S2C_MahjongNextGame'{} | #'S2C_MahjongNoPrepare'{} | #'S2C_MahjongNoOwner'{} | #'S2C_MahjongHaveNoPrepare'{} | #'S2C_MahjongFinishChangeThree'{} | #'S2C_MahjongFinishDingQue'{} | #'S2C_MahjongNoPongs'{} | #'S2C_MahjongNoKong'{} | #'S2C_MahjongNoZimo'{} | #'S2C_MahjongNoHu'{} | #'S2C_MahjongHaveNoNextGame'{} | #'S2C_MahjongFinish'{} | #'C2S_MahjongHistory'{} | #'Struct_MahjongHistory'{} | #'S2C_MahjongHistory'{} | #'C2S_Login'{} | #'S2C_Login'{} | #'S2C_Err'{} | #'S2C_PlayerInfo'{} | #'C2S_Heartbeat'{} | #'S2C_Heartbeat'{} | #'C2S_Gm'{} | #'S2C_Gm'{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#'C2S_MahjongPrepare'{} | #'S2C_MahjongPrepare'{} | #'C2S_MahjongCancelPrepare'{} | #'S2C_MahjongCancelPrepare'{} | #'Struct_MahjongPlayerBrief'{} | #'C2S_MahjongStart'{} | #'S2C_MahjongStart'{} | #'S2C_MahjongDraw'{} | #'C2S_MahjongDiscard'{} | #'S2C_MahjongDiscard'{} | #'C2S_MahjongPongs'{} | #'S2C_MahjongPongs'{} | #'C2S_MahjongKong'{} | #'S2C_MahjongKong'{} | #'C2S_MahjongChow'{} | #'S2C_MahjongChow'{} | #'C2S_MahjongHu'{} | #'S2C_MahjongHu'{} | #'C2S_MahjongZimo'{} | #'S2C_MahjongZimo'{} | #'C2S_MahjongChangeThree'{} | #'S2C_MahjongChangeThree'{} | #'C2S_MahjongDingQue'{} | #'Struct_MahjongDingQueBrief'{} | #'S2C_MahjongDingQue'{} | #'C2S_MahjongNextGame'{} | #'S2C_MahjongNextGame'{} | #'S2C_MahjongNoPrepare'{} | #'S2C_MahjongNoOwner'{} | #'S2C_MahjongHaveNoPrepare'{} | #'S2C_MahjongFinishChangeThree'{} | #'S2C_MahjongFinishDingQue'{} | #'S2C_MahjongNoPongs'{} | #'S2C_MahjongNoKong'{} | #'S2C_MahjongNoZimo'{} | #'S2C_MahjongNoHu'{} | #'S2C_MahjongHaveNoNextGame'{} | #'S2C_MahjongFinish'{} | #'C2S_MahjongHistory'{} | #'Struct_MahjongHistory'{} | #'S2C_MahjongHistory'{} | #'C2S_Login'{} | #'S2C_Login'{} | #'S2C_Err'{} | #'S2C_PlayerInfo'{} | #'C2S_Heartbeat'{} | #'S2C_Heartbeat'{} | #'C2S_Gm'{} | #'S2C_Gm'{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#'C2S_MahjongPrepare'{} | #'S2C_MahjongPrepare'{} | #'C2S_MahjongCancelPrepare'{} | #'S2C_MahjongCancelPrepare'{} | #'Struct_MahjongPlayerBrief'{} | #'C2S_MahjongStart'{} | #'S2C_MahjongStart'{} | #'S2C_MahjongDraw'{} | #'C2S_MahjongDiscard'{} | #'S2C_MahjongDiscard'{} | #'C2S_MahjongPongs'{} | #'S2C_MahjongPongs'{} | #'C2S_MahjongKong'{} | #'S2C_MahjongKong'{} | #'C2S_MahjongChow'{} | #'S2C_MahjongChow'{} | #'C2S_MahjongHu'{} | #'S2C_MahjongHu'{} | #'C2S_MahjongZimo'{} | #'S2C_MahjongZimo'{} | #'C2S_MahjongChangeThree'{} | #'S2C_MahjongChangeThree'{} | #'C2S_MahjongDingQue'{} | #'Struct_MahjongDingQueBrief'{} | #'S2C_MahjongDingQue'{} | #'C2S_MahjongNextGame'{} | #'S2C_MahjongNextGame'{} | #'S2C_MahjongNoPrepare'{} | #'S2C_MahjongNoOwner'{} | #'S2C_MahjongHaveNoPrepare'{} | #'S2C_MahjongFinishChangeThree'{} | #'S2C_MahjongFinishDingQue'{} | #'S2C_MahjongNoPongs'{} | #'S2C_MahjongNoKong'{} | #'S2C_MahjongNoZimo'{} | #'S2C_MahjongNoHu'{} | #'S2C_MahjongHaveNoNextGame'{} | #'S2C_MahjongFinish'{} | #'C2S_MahjongHistory'{} | #'Struct_MahjongHistory'{} | #'S2C_MahjongHistory'{} | #'C2S_Login'{} | #'S2C_Login'{} | #'S2C_Err'{} | #'S2C_PlayerInfo'{} | #'C2S_Heartbeat'{} | #'S2C_Heartbeat'{} | #'C2S_Gm'{} | #'S2C_Gm'{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'C2S_MahjongPrepare' ->
	  encode_msg_C2S_MahjongPrepare(id(Msg, TrUserData),
					TrUserData);
      'S2C_MahjongPrepare' ->
	  encode_msg_S2C_MahjongPrepare(id(Msg, TrUserData),
					TrUserData);
      'C2S_MahjongCancelPrepare' ->
	  encode_msg_C2S_MahjongCancelPrepare(id(Msg, TrUserData),
					      TrUserData);
      'S2C_MahjongCancelPrepare' ->
	  encode_msg_S2C_MahjongCancelPrepare(id(Msg, TrUserData),
					      TrUserData);
      'Struct_MahjongPlayerBrief' ->
	  encode_msg_Struct_MahjongPlayerBrief(id(Msg,
						  TrUserData),
					       TrUserData);
      'C2S_MahjongStart' ->
	  encode_msg_C2S_MahjongStart(id(Msg, TrUserData),
				      TrUserData);
      'S2C_MahjongStart' ->
	  encode_msg_S2C_MahjongStart(id(Msg, TrUserData),
				      TrUserData);
      'S2C_MahjongDraw' ->
	  encode_msg_S2C_MahjongDraw(id(Msg, TrUserData),
				     TrUserData);
      'C2S_MahjongDiscard' ->
	  encode_msg_C2S_MahjongDiscard(id(Msg, TrUserData),
					TrUserData);
      'S2C_MahjongDiscard' ->
	  encode_msg_S2C_MahjongDiscard(id(Msg, TrUserData),
					TrUserData);
      'C2S_MahjongPongs' ->
	  encode_msg_C2S_MahjongPongs(id(Msg, TrUserData),
				      TrUserData);
      'S2C_MahjongPongs' ->
	  encode_msg_S2C_MahjongPongs(id(Msg, TrUserData),
				      TrUserData);
      'C2S_MahjongKong' ->
	  encode_msg_C2S_MahjongKong(id(Msg, TrUserData),
				     TrUserData);
      'S2C_MahjongKong' ->
	  encode_msg_S2C_MahjongKong(id(Msg, TrUserData),
				     TrUserData);
      'C2S_MahjongChow' ->
	  encode_msg_C2S_MahjongChow(id(Msg, TrUserData),
				     TrUserData);
      'S2C_MahjongChow' ->
	  encode_msg_S2C_MahjongChow(id(Msg, TrUserData),
				     TrUserData);
      'C2S_MahjongHu' ->
	  encode_msg_C2S_MahjongHu(id(Msg, TrUserData),
				   TrUserData);
      'S2C_MahjongHu' ->
	  encode_msg_S2C_MahjongHu(id(Msg, TrUserData),
				   TrUserData);
      'C2S_MahjongZimo' ->
	  encode_msg_C2S_MahjongZimo(id(Msg, TrUserData),
				     TrUserData);
      'S2C_MahjongZimo' ->
	  encode_msg_S2C_MahjongZimo(id(Msg, TrUserData),
				     TrUserData);
      'C2S_MahjongChangeThree' ->
	  encode_msg_C2S_MahjongChangeThree(id(Msg, TrUserData),
					    TrUserData);
      'S2C_MahjongChangeThree' ->
	  encode_msg_S2C_MahjongChangeThree(id(Msg, TrUserData),
					    TrUserData);
      'C2S_MahjongDingQue' ->
	  encode_msg_C2S_MahjongDingQue(id(Msg, TrUserData),
					TrUserData);
      'Struct_MahjongDingQueBrief' ->
	  encode_msg_Struct_MahjongDingQueBrief(id(Msg,
						   TrUserData),
						TrUserData);
      'S2C_MahjongDingQue' ->
	  encode_msg_S2C_MahjongDingQue(id(Msg, TrUserData),
					TrUserData);
      'C2S_MahjongNextGame' ->
	  encode_msg_C2S_MahjongNextGame(id(Msg, TrUserData),
					 TrUserData);
      'S2C_MahjongNextGame' ->
	  encode_msg_S2C_MahjongNextGame(id(Msg, TrUserData),
					 TrUserData);
      'S2C_MahjongNoPrepare' ->
	  encode_msg_S2C_MahjongNoPrepare(id(Msg, TrUserData),
					  TrUserData);
      'S2C_MahjongNoOwner' ->
	  encode_msg_S2C_MahjongNoOwner(id(Msg, TrUserData),
					TrUserData);
      'S2C_MahjongHaveNoPrepare' ->
	  encode_msg_S2C_MahjongHaveNoPrepare(id(Msg, TrUserData),
					      TrUserData);
      'S2C_MahjongFinishChangeThree' ->
	  encode_msg_S2C_MahjongFinishChangeThree(id(Msg,
						     TrUserData),
						  TrUserData);
      'S2C_MahjongFinishDingQue' ->
	  encode_msg_S2C_MahjongFinishDingQue(id(Msg, TrUserData),
					      TrUserData);
      'S2C_MahjongNoPongs' ->
	  encode_msg_S2C_MahjongNoPongs(id(Msg, TrUserData),
					TrUserData);
      'S2C_MahjongNoKong' ->
	  encode_msg_S2C_MahjongNoKong(id(Msg, TrUserData),
				       TrUserData);
      'S2C_MahjongNoZimo' ->
	  encode_msg_S2C_MahjongNoZimo(id(Msg, TrUserData),
				       TrUserData);
      'S2C_MahjongNoHu' ->
	  encode_msg_S2C_MahjongNoHu(id(Msg, TrUserData),
				     TrUserData);
      'S2C_MahjongHaveNoNextGame' ->
	  encode_msg_S2C_MahjongHaveNoNextGame(id(Msg,
						  TrUserData),
					       TrUserData);
      'S2C_MahjongFinish' ->
	  encode_msg_S2C_MahjongFinish(id(Msg, TrUserData),
				       TrUserData);
      'C2S_MahjongHistory' ->
	  encode_msg_C2S_MahjongHistory(id(Msg, TrUserData),
					TrUserData);
      'Struct_MahjongHistory' ->
	  encode_msg_Struct_MahjongHistory(id(Msg, TrUserData),
					   TrUserData);
      'S2C_MahjongHistory' ->
	  encode_msg_S2C_MahjongHistory(id(Msg, TrUserData),
					TrUserData);
      'C2S_Login' ->
	  encode_msg_C2S_Login(id(Msg, TrUserData), TrUserData);
      'S2C_Login' ->
	  encode_msg_S2C_Login(id(Msg, TrUserData), TrUserData);
      'S2C_Err' ->
	  encode_msg_S2C_Err(id(Msg, TrUserData), TrUserData);
      'S2C_PlayerInfo' ->
	  encode_msg_S2C_PlayerInfo(id(Msg, TrUserData),
				    TrUserData);
      'C2S_Heartbeat' ->
	  encode_msg_C2S_Heartbeat(id(Msg, TrUserData),
				   TrUserData);
      'S2C_Heartbeat' ->
	  encode_msg_S2C_Heartbeat(id(Msg, TrUserData),
				   TrUserData);
      'C2S_Gm' ->
	  encode_msg_C2S_Gm(id(Msg, TrUserData), TrUserData);
      'S2C_Gm' ->
	  encode_msg_S2C_Gm(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_C2S_MahjongPrepare(_Msg, _TrUserData) ->
    <<>>.

encode_msg_S2C_MahjongPrepare(Msg, TrUserData) ->
    encode_msg_S2C_MahjongPrepare(Msg, <<>>, TrUserData).


encode_msg_S2C_MahjongPrepare(#'S2C_MahjongPrepare'{playerId
							= F1},
			      Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_string(TrF1, <<Bin/binary, 18>>, TrUserData)
    end.

encode_msg_C2S_MahjongCancelPrepare(_Msg,
				    _TrUserData) ->
    <<>>.

encode_msg_S2C_MahjongCancelPrepare(Msg, TrUserData) ->
    encode_msg_S2C_MahjongCancelPrepare(Msg, <<>>,
					TrUserData).


encode_msg_S2C_MahjongCancelPrepare(#'S2C_MahjongCancelPrepare'{playerId
								    = F1},
				    Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_string(TrF1, <<Bin/binary, 18>>, TrUserData)
    end.

encode_msg_Struct_MahjongPlayerBrief(Msg, TrUserData) ->
    encode_msg_Struct_MahjongPlayerBrief(Msg, <<>>,
					 TrUserData).


encode_msg_Struct_MahjongPlayerBrief(#'Struct_MahjongPlayerBrief'{id
								      = F1,
								  seatId = F2},
				     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

encode_msg_C2S_MahjongStart(_Msg, _TrUserData) -> <<>>.

encode_msg_S2C_MahjongStart(Msg, TrUserData) ->
    encode_msg_S2C_MahjongStart(Msg, <<>>, TrUserData).


encode_msg_S2C_MahjongStart(#'S2C_MahjongStart'{players
						    = F1},
			    Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_S2C_MahjongStart_players(TrF1, Bin, TrUserData)
      end
    end.

encode_msg_S2C_MahjongDraw(Msg, TrUserData) ->
    encode_msg_S2C_MahjongDraw(Msg, <<>>, TrUserData).


encode_msg_S2C_MahjongDraw(#'S2C_MahjongDraw'{cardId =
						  F1,
					      seatId = F2},
			   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

encode_msg_C2S_MahjongDiscard(Msg, TrUserData) ->
    encode_msg_C2S_MahjongDiscard(Msg, <<>>, TrUserData).


encode_msg_C2S_MahjongDiscard(#'C2S_MahjongDiscard'{cardId
							= F1},
			      Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_S2C_MahjongDiscard(Msg, TrUserData) ->
    encode_msg_S2C_MahjongDiscard(Msg, <<>>, TrUserData).


encode_msg_S2C_MahjongDiscard(#'S2C_MahjongDiscard'{cardId
							= F1,
						    seatId = F2},
			      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

encode_msg_C2S_MahjongPongs(Msg, TrUserData) ->
    encode_msg_C2S_MahjongPongs(Msg, <<>>, TrUserData).


encode_msg_C2S_MahjongPongs(#'C2S_MahjongPongs'{cardId =
						    F1},
			    Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_S2C_MahjongPongs(Msg, TrUserData) ->
    encode_msg_S2C_MahjongPongs(Msg, <<>>, TrUserData).


encode_msg_S2C_MahjongPongs(#'S2C_MahjongPongs'{seatId =
						    F1,
						cardId = F2},
			    Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

encode_msg_C2S_MahjongKong(Msg, TrUserData) ->
    encode_msg_C2S_MahjongKong(Msg, <<>>, TrUserData).


encode_msg_C2S_MahjongKong(#'C2S_MahjongKong'{cardId =
						  F1},
			   Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_S2C_MahjongKong(Msg, TrUserData) ->
    encode_msg_S2C_MahjongKong(Msg, <<>>, TrUserData).


encode_msg_S2C_MahjongKong(#'S2C_MahjongKong'{seatId =
						  F1,
					      cardId = F2},
			   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

encode_msg_C2S_MahjongChow(Msg, TrUserData) ->
    encode_msg_C2S_MahjongChow(Msg, <<>>, TrUserData).


encode_msg_C2S_MahjongChow(#'C2S_MahjongChow'{cardId =
						  F1},
			   Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_S2C_MahjongChow(Msg, TrUserData) ->
    encode_msg_S2C_MahjongChow(Msg, <<>>, TrUserData).


encode_msg_S2C_MahjongChow(#'S2C_MahjongChow'{seatId =
						  F1,
					      cardId = F2, meld = F3},
			   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      if TrF3 == [] -> B2;
	 true ->
	     e_field_S2C_MahjongChow_meld(TrF3, B2, TrUserData)
      end
    end.

encode_msg_C2S_MahjongHu(_Msg, _TrUserData) -> <<>>.

encode_msg_S2C_MahjongHu(Msg, TrUserData) ->
    encode_msg_S2C_MahjongHu(Msg, <<>>, TrUserData).


encode_msg_S2C_MahjongHu(#'S2C_MahjongHu'{winnerSeatId =
					      F1,
					  loserSeatId = F2, faan = F3},
			 Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_varint(TrF3, <<B2/binary, 32>>, TrUserData)
    end.

encode_msg_C2S_MahjongZimo(_Msg, _TrUserData) -> <<>>.

encode_msg_S2C_MahjongZimo(Msg, TrUserData) ->
    encode_msg_S2C_MahjongZimo(Msg, <<>>, TrUserData).


encode_msg_S2C_MahjongZimo(#'S2C_MahjongZimo'{winnerSeatId
						  = F1,
					      faan = F2},
			   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

encode_msg_C2S_MahjongChangeThree(Msg, TrUserData) ->
    encode_msg_C2S_MahjongChangeThree(Msg, <<>>,
				      TrUserData).


encode_msg_C2S_MahjongChangeThree(#'C2S_MahjongChangeThree'{seatId
								= F1,
							    threeCards = F2},
				  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     e_field_C2S_MahjongChangeThree_threeCards(TrF2, B1,
						       TrUserData)
      end
    end.

encode_msg_S2C_MahjongChangeThree(Msg, TrUserData) ->
    encode_msg_S2C_MahjongChangeThree(Msg, <<>>,
				      TrUserData).


encode_msg_S2C_MahjongChangeThree(#'S2C_MahjongChangeThree'{changeType
								= F1},
				  Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_C2S_MahjongDingQue(Msg, TrUserData) ->
    encode_msg_C2S_MahjongDingQue(Msg, <<>>, TrUserData).


encode_msg_C2S_MahjongDingQue(#'C2S_MahjongDingQue'{seatId
							= F1,
						    color = F2},
			      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

encode_msg_Struct_MahjongDingQueBrief(Msg,
				      TrUserData) ->
    encode_msg_Struct_MahjongDingQueBrief(Msg, <<>>,
					  TrUserData).


encode_msg_Struct_MahjongDingQueBrief(#'Struct_MahjongDingQueBrief'{id
									= F1,
								    color = F2},
				      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

encode_msg_S2C_MahjongDingQue(Msg, TrUserData) ->
    encode_msg_S2C_MahjongDingQue(Msg, <<>>, TrUserData).


encode_msg_S2C_MahjongDingQue(#'S2C_MahjongDingQue'{players
							= F1},
			      Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_S2C_MahjongDingQue_players(TrF1, Bin,
						TrUserData)
      end
    end.

encode_msg_C2S_MahjongNextGame(_Msg, _TrUserData) ->
    <<>>.

encode_msg_S2C_MahjongNextGame(Msg, TrUserData) ->
    encode_msg_S2C_MahjongNextGame(Msg, <<>>, TrUserData).


encode_msg_S2C_MahjongNextGame(#'S2C_MahjongNextGame'{currentround
							  = F1},
			       Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_S2C_MahjongNoPrepare(_Msg, _TrUserData) ->
    <<>>.

encode_msg_S2C_MahjongNoOwner(_Msg, _TrUserData) ->
    <<>>.

encode_msg_S2C_MahjongHaveNoPrepare(_Msg,
				    _TrUserData) ->
    <<>>.

encode_msg_S2C_MahjongFinishChangeThree(Msg,
					TrUserData) ->
    encode_msg_S2C_MahjongFinishChangeThree(Msg, <<>>,
					    TrUserData).


encode_msg_S2C_MahjongFinishChangeThree(#'S2C_MahjongFinishChangeThree'{id
									    =
									    F1},
					Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
    end.

encode_msg_S2C_MahjongFinishDingQue(Msg, TrUserData) ->
    encode_msg_S2C_MahjongFinishDingQue(Msg, <<>>,
					TrUserData).


encode_msg_S2C_MahjongFinishDingQue(#'S2C_MahjongFinishDingQue'{id
								    = F1},
				    Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
    end.

encode_msg_S2C_MahjongNoPongs(Msg, TrUserData) ->
    encode_msg_S2C_MahjongNoPongs(Msg, <<>>, TrUserData).


encode_msg_S2C_MahjongNoPongs(#'S2C_MahjongNoPongs'{seatId
							= F1,
						    cardId = F2},
			      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

encode_msg_S2C_MahjongNoKong(Msg, TrUserData) ->
    encode_msg_S2C_MahjongNoKong(Msg, <<>>, TrUserData).


encode_msg_S2C_MahjongNoKong(#'S2C_MahjongNoKong'{seatId
						      = F1,
						  cardId = F2},
			     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

encode_msg_S2C_MahjongNoZimo(Msg, TrUserData) ->
    encode_msg_S2C_MahjongNoZimo(Msg, <<>>, TrUserData).


encode_msg_S2C_MahjongNoZimo(#'S2C_MahjongNoZimo'{seatId
						      = F1},
			     Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_S2C_MahjongNoHu(Msg, TrUserData) ->
    encode_msg_S2C_MahjongNoHu(Msg, <<>>, TrUserData).


encode_msg_S2C_MahjongNoHu(#'S2C_MahjongNoHu'{seatId =
						  F1},
			   Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_S2C_MahjongHaveNoNextGame(_Msg,
				     _TrUserData) ->
    <<>>.

encode_msg_S2C_MahjongFinish(_Msg, _TrUserData) -> <<>>.

encode_msg_C2S_MahjongHistory(Msg, TrUserData) ->
    encode_msg_C2S_MahjongHistory(Msg, <<>>, TrUserData).


encode_msg_C2S_MahjongHistory(#'C2S_MahjongHistory'{gameType
							= F1,
						    startTime = F2,
						    endTime = F3, page = F4,
						    pageSize = F5},
			      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
	 end,
    begin
      TrF5 = id(F5, TrUserData),
      e_varint(TrF5, <<B4/binary, 40>>, TrUserData)
    end.

encode_msg_Struct_MahjongHistory(Msg, TrUserData) ->
    encode_msg_Struct_MahjongHistory(Msg, <<>>, TrUserData).


encode_msg_Struct_MahjongHistory(#'Struct_MahjongHistory'{gameType
							      = F1,
							  time = F2, cost = F3,
							  reward = F4,
							  start = F5,
							  'end' = F6,
							  moneyBase = F7,
							  moneyMulti = F8},
				 Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   if TrF5 == [] -> B4;
	      true ->
		  e_field_Struct_MahjongHistory_start(TrF5, B4,
						      TrUserData)
	   end
	 end,
    B6 = begin
	   TrF6 = id(F6, TrUserData),
	   e_varint(TrF6, <<B5/binary, 56>>, TrUserData)
	 end,
    B7 = begin
	   TrF7 = id(F7, TrUserData),
	   e_varint(TrF7, <<B6/binary, 96>>, TrUserData)
	 end,
    begin
      TrF8 = id(F8, TrUserData),
      e_varint(TrF8, <<B7/binary, 104>>, TrUserData)
    end.

encode_msg_S2C_MahjongHistory(Msg, TrUserData) ->
    encode_msg_S2C_MahjongHistory(Msg, <<>>, TrUserData).


encode_msg_S2C_MahjongHistory(#'S2C_MahjongHistory'{data
							= F1},
			      Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_S2C_MahjongHistory_data(TrF1, Bin, TrUserData)
      end
    end.

encode_msg_C2S_Login(Msg, TrUserData) ->
    encode_msg_C2S_Login(Msg, <<>>, TrUserData).


encode_msg_C2S_Login(#'C2S_Login'{token = F1}, Bin,
		     TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
    end.

encode_msg_S2C_Login(Msg, TrUserData) ->
    encode_msg_S2C_Login(Msg, <<>>, TrUserData).


encode_msg_S2C_Login(#'S2C_Login'{id = F1,
				  nickname = F2, money = F3},
		     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 26>>, TrUserData)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_varint(TrF3, <<B2/binary, 32>>, TrUserData)
    end.

encode_msg_S2C_Err(Msg, TrUserData) ->
    encode_msg_S2C_Err(Msg, <<>>, TrUserData).


encode_msg_S2C_Err(#'S2C_Err'{code = F1, type = F2,
			      msg = F3},
		   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_enum_EnumS2CErrCode(TrF1, <<Bin/binary, 8>>,
				 TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_enum_EnumS2CTipsShowType(TrF2, <<B1/binary, 16>>,
				      TrUserData)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
    end.

encode_msg_S2C_PlayerInfo(Msg, TrUserData) ->
    encode_msg_S2C_PlayerInfo(Msg, <<>>, TrUserData).


encode_msg_S2C_PlayerInfo(#'S2C_PlayerInfo'{moneyLeft =
						F1},
			  Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_varint(TrF1, <<Bin/binary, 16>>, TrUserData)
    end.

encode_msg_C2S_Heartbeat(_Msg, _TrUserData) -> <<>>.

encode_msg_S2C_Heartbeat(_Msg, _TrUserData) -> <<>>.

encode_msg_C2S_Gm(Msg, TrUserData) ->
    encode_msg_C2S_Gm(Msg, <<>>, TrUserData).


encode_msg_C2S_Gm(#'C2S_Gm'{cmd = F1, seqId = F2,
			    arg1 = F3, arg2 = F4, arg3 = F5, arg4 = F6,
			    arg5 = F7, arg6 = F8, arg7 = F9, arg8 = F10,
			    arg9 = F11},
		  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_type_string(TrF3, <<B2/binary, 90>>, TrUserData)
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_type_string(TrF4, <<B3/binary, 98>>, TrUserData)
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  e_type_string(TrF5, <<B4/binary, 106>>, TrUserData)
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  e_type_string(TrF6, <<B5/binary, 114>>, TrUserData)
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  e_type_string(TrF7, <<B6/binary, 122>>, TrUserData)
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  e_type_string(TrF8, <<B7/binary, 130, 1>>, TrUserData)
		end
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  e_type_string(TrF9, <<B8/binary, 138, 1>>, TrUserData)
		end
	 end,
    B10 = if F10 == undefined -> B9;
	     true ->
		 begin
		   TrF10 = id(F10, TrUserData),
		   e_type_string(TrF10, <<B9/binary, 146, 1>>, TrUserData)
		 end
	  end,
    if F11 == undefined -> B10;
       true ->
	   begin
	     TrF11 = id(F11, TrUserData),
	     e_type_string(TrF11, <<B10/binary, 154, 1>>, TrUserData)
	   end
    end.

encode_msg_S2C_Gm(Msg, TrUserData) ->
    encode_msg_S2C_Gm(Msg, <<>>, TrUserData).


encode_msg_S2C_Gm(#'S2C_Gm'{seqId = F1, code = F2}, Bin,
		  TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 16>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_int32(TrF2, <<B1/binary, 24>>, TrUserData)
    end.

e_mfield_S2C_MahjongStart_players(Msg, Bin,
				  TrUserData) ->
    SubBin = encode_msg_Struct_MahjongPlayerBrief(Msg, <<>>,
						  TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_S2C_MahjongStart_players([Elem | Rest], Bin,
				 TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_S2C_MahjongStart_players(id(Elem,
						TrUserData),
					     Bin2, TrUserData),
    e_field_S2C_MahjongStart_players(Rest, Bin3,
				     TrUserData);
e_field_S2C_MahjongStart_players([], Bin,
				 _TrUserData) ->
    Bin.

e_field_S2C_MahjongChow_meld([Elem | Rest], Bin,
			     TrUserData) ->
    Bin2 = <<Bin/binary, 24>>,
    Bin3 = e_varint(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_S2C_MahjongChow_meld(Rest, Bin3, TrUserData);
e_field_S2C_MahjongChow_meld([], Bin, _TrUserData) ->
    Bin.

e_field_C2S_MahjongChangeThree_threeCards([Elem | Rest],
					  Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 16>>,
    Bin3 = e_varint(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_C2S_MahjongChangeThree_threeCards(Rest, Bin3,
					      TrUserData);
e_field_C2S_MahjongChangeThree_threeCards([], Bin,
					  _TrUserData) ->
    Bin.

e_mfield_S2C_MahjongDingQue_players(Msg, Bin,
				    TrUserData) ->
    SubBin = encode_msg_Struct_MahjongDingQueBrief(Msg,
						   <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_S2C_MahjongDingQue_players([Elem | Rest], Bin,
				   TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_S2C_MahjongDingQue_players(id(Elem,
						  TrUserData),
					       Bin2, TrUserData),
    e_field_S2C_MahjongDingQue_players(Rest, Bin3,
				       TrUserData);
e_field_S2C_MahjongDingQue_players([], Bin,
				   _TrUserData) ->
    Bin.

e_field_Struct_MahjongHistory_start([Elem | Rest], Bin,
				    TrUserData) ->
    Bin2 = <<Bin/binary, 48>>,
    Bin3 = e_varint(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_Struct_MahjongHistory_start(Rest, Bin3,
					TrUserData);
e_field_Struct_MahjongHistory_start([], Bin,
				    _TrUserData) ->
    Bin.

e_mfield_S2C_MahjongHistory_data(Msg, Bin,
				 TrUserData) ->
    SubBin = encode_msg_Struct_MahjongHistory(Msg, <<>>,
					      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_S2C_MahjongHistory_data([Elem | Rest], Bin,
				TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_S2C_MahjongHistory_data(id(Elem,
					       TrUserData),
					    Bin2, TrUserData),
    e_field_S2C_MahjongHistory_data(Rest, Bin3, TrUserData);
e_field_S2C_MahjongHistory_data([], Bin, _TrUserData) ->
    Bin.

e_enum_EnumS2CTipsShowType('E_S2CTipsShowType_PopUp',
			   Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_enum_EnumS2CTipsShowType('E_S2CTipsShowType_Marquee',
			   Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_enum_EnumS2CTipsShowType(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

e_enum_EnumS2CErrCode('E_S2CErrCode_Succ', Bin,
		      _TrUserData) ->
    <<Bin/binary, 0>>;
e_enum_EnumS2CErrCode('E_S2CErrCode_Sys', Bin,
		      _TrUserData) ->
    <<Bin/binary, 1>>;
e_enum_EnumS2CErrCode('E_S2CErrCode_Busy', Bin,
		      _TrUserData) ->
    <<Bin/binary, 2>>;
e_enum_EnumS2CErrCode('E_S2CErrCode_OpToFrequency', Bin,
		      _TrUserData) ->
    <<Bin/binary, 3>>;
e_enum_EnumS2CErrCode('E_S2CErrCode_ReLogin', Bin,
		      _TrUserData) ->
    <<Bin/binary, 4>>;
e_enum_EnumS2CErrCode('E_S2CErrCode_NotLogin', Bin,
		      _TrUserData) ->
    <<Bin/binary, 5>>;
e_enum_EnumS2CErrCode('E_S2CErrCode_LoginCheckTimeout',
		      Bin, _TrUserData) ->
    <<Bin/binary, 6>>;
e_enum_EnumS2CErrCode('E_S2CErrCode_LoginCheckNotThrough',
		      Bin, _TrUserData) ->
    <<Bin/binary, 7>>;
e_enum_EnumS2CErrCode('E_S2CErrCode_ErrArgs', Bin,
		      _TrUserData) ->
    <<Bin/binary, 8>>;
e_enum_EnumS2CErrCode('E_S2CErrCode_ProtoErr', Bin,
		      _TrUserData) ->
    <<Bin/binary, 9>>;
e_enum_EnumS2CErrCode('E_S2CErrCode_LoginTokenInvalid',
		      Bin, _TrUserData) ->
    <<Bin/binary, 10>>;
e_enum_EnumS2CErrCode('E_S2CErrCode_BeKicked', Bin,
		      _TrUserData) ->
    <<Bin/binary, 11>>;
e_enum_EnumS2CErrCode('E_S2CErrCode_NotEnoughMoney',
		      Bin, _TrUserData) ->
    <<Bin/binary, 100>>;
e_enum_EnumS2CErrCode(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('C2S_MahjongPrepare', Bin,
		  TrUserData) ->
    id(decode_msg_C2S_MahjongPrepare(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('S2C_MahjongPrepare', Bin,
		  TrUserData) ->
    id(decode_msg_S2C_MahjongPrepare(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('C2S_MahjongCancelPrepare', Bin,
		  TrUserData) ->
    id(decode_msg_C2S_MahjongCancelPrepare(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('S2C_MahjongCancelPrepare', Bin,
		  TrUserData) ->
    id(decode_msg_S2C_MahjongCancelPrepare(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('Struct_MahjongPlayerBrief', Bin,
		  TrUserData) ->
    id(decode_msg_Struct_MahjongPlayerBrief(Bin,
					    TrUserData),
       TrUserData);
decode_msg_2_doit('C2S_MahjongStart', Bin,
		  TrUserData) ->
    id(decode_msg_C2S_MahjongStart(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('S2C_MahjongStart', Bin,
		  TrUserData) ->
    id(decode_msg_S2C_MahjongStart(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('S2C_MahjongDraw', Bin, TrUserData) ->
    id(decode_msg_S2C_MahjongDraw(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('C2S_MahjongDiscard', Bin,
		  TrUserData) ->
    id(decode_msg_C2S_MahjongDiscard(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('S2C_MahjongDiscard', Bin,
		  TrUserData) ->
    id(decode_msg_S2C_MahjongDiscard(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('C2S_MahjongPongs', Bin,
		  TrUserData) ->
    id(decode_msg_C2S_MahjongPongs(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('S2C_MahjongPongs', Bin,
		  TrUserData) ->
    id(decode_msg_S2C_MahjongPongs(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('C2S_MahjongKong', Bin, TrUserData) ->
    id(decode_msg_C2S_MahjongKong(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('S2C_MahjongKong', Bin, TrUserData) ->
    id(decode_msg_S2C_MahjongKong(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('C2S_MahjongChow', Bin, TrUserData) ->
    id(decode_msg_C2S_MahjongChow(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('S2C_MahjongChow', Bin, TrUserData) ->
    id(decode_msg_S2C_MahjongChow(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('C2S_MahjongHu', Bin, TrUserData) ->
    id(decode_msg_C2S_MahjongHu(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('S2C_MahjongHu', Bin, TrUserData) ->
    id(decode_msg_S2C_MahjongHu(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('C2S_MahjongZimo', Bin, TrUserData) ->
    id(decode_msg_C2S_MahjongZimo(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('S2C_MahjongZimo', Bin, TrUserData) ->
    id(decode_msg_S2C_MahjongZimo(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('C2S_MahjongChangeThree', Bin,
		  TrUserData) ->
    id(decode_msg_C2S_MahjongChangeThree(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('S2C_MahjongChangeThree', Bin,
		  TrUserData) ->
    id(decode_msg_S2C_MahjongChangeThree(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('C2S_MahjongDingQue', Bin,
		  TrUserData) ->
    id(decode_msg_C2S_MahjongDingQue(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('Struct_MahjongDingQueBrief', Bin,
		  TrUserData) ->
    id(decode_msg_Struct_MahjongDingQueBrief(Bin,
					     TrUserData),
       TrUserData);
decode_msg_2_doit('S2C_MahjongDingQue', Bin,
		  TrUserData) ->
    id(decode_msg_S2C_MahjongDingQue(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('C2S_MahjongNextGame', Bin,
		  TrUserData) ->
    id(decode_msg_C2S_MahjongNextGame(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('S2C_MahjongNextGame', Bin,
		  TrUserData) ->
    id(decode_msg_S2C_MahjongNextGame(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('S2C_MahjongNoPrepare', Bin,
		  TrUserData) ->
    id(decode_msg_S2C_MahjongNoPrepare(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('S2C_MahjongNoOwner', Bin,
		  TrUserData) ->
    id(decode_msg_S2C_MahjongNoOwner(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('S2C_MahjongHaveNoPrepare', Bin,
		  TrUserData) ->
    id(decode_msg_S2C_MahjongHaveNoPrepare(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('S2C_MahjongFinishChangeThree', Bin,
		  TrUserData) ->
    id(decode_msg_S2C_MahjongFinishChangeThree(Bin,
					       TrUserData),
       TrUserData);
decode_msg_2_doit('S2C_MahjongFinishDingQue', Bin,
		  TrUserData) ->
    id(decode_msg_S2C_MahjongFinishDingQue(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('S2C_MahjongNoPongs', Bin,
		  TrUserData) ->
    id(decode_msg_S2C_MahjongNoPongs(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('S2C_MahjongNoKong', Bin,
		  TrUserData) ->
    id(decode_msg_S2C_MahjongNoKong(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('S2C_MahjongNoZimo', Bin,
		  TrUserData) ->
    id(decode_msg_S2C_MahjongNoZimo(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('S2C_MahjongNoHu', Bin, TrUserData) ->
    id(decode_msg_S2C_MahjongNoHu(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('S2C_MahjongHaveNoNextGame', Bin,
		  TrUserData) ->
    id(decode_msg_S2C_MahjongHaveNoNextGame(Bin,
					    TrUserData),
       TrUserData);
decode_msg_2_doit('S2C_MahjongFinish', Bin,
		  TrUserData) ->
    id(decode_msg_S2C_MahjongFinish(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('C2S_MahjongHistory', Bin,
		  TrUserData) ->
    id(decode_msg_C2S_MahjongHistory(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('Struct_MahjongHistory', Bin,
		  TrUserData) ->
    id(decode_msg_Struct_MahjongHistory(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('S2C_MahjongHistory', Bin,
		  TrUserData) ->
    id(decode_msg_S2C_MahjongHistory(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('C2S_Login', Bin, TrUserData) ->
    id(decode_msg_C2S_Login(Bin, TrUserData), TrUserData);
decode_msg_2_doit('S2C_Login', Bin, TrUserData) ->
    id(decode_msg_S2C_Login(Bin, TrUserData), TrUserData);
decode_msg_2_doit('S2C_Err', Bin, TrUserData) ->
    id(decode_msg_S2C_Err(Bin, TrUserData), TrUserData);
decode_msg_2_doit('S2C_PlayerInfo', Bin, TrUserData) ->
    id(decode_msg_S2C_PlayerInfo(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('C2S_Heartbeat', Bin, TrUserData) ->
    id(decode_msg_C2S_Heartbeat(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('S2C_Heartbeat', Bin, TrUserData) ->
    id(decode_msg_S2C_Heartbeat(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('C2S_Gm', Bin, TrUserData) ->
    id(decode_msg_C2S_Gm(Bin, TrUserData), TrUserData);
decode_msg_2_doit('S2C_Gm', Bin, TrUserData) ->
    id(decode_msg_S2C_Gm(Bin, TrUserData), TrUserData).



decode_msg_C2S_MahjongPrepare(Bin, TrUserData) ->
    dfp_read_field_def_C2S_MahjongPrepare(Bin, 0, 0,
					  TrUserData).

dfp_read_field_def_C2S_MahjongPrepare(<<>>, 0, 0, _) ->
    #'C2S_MahjongPrepare'{};
dfp_read_field_def_C2S_MahjongPrepare(Other, Z1, Z2,
				      TrUserData) ->
    dg_read_field_def_C2S_MahjongPrepare(Other, Z1, Z2,
					 TrUserData).

dg_read_field_def_C2S_MahjongPrepare(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_C2S_MahjongPrepare(Rest, N + 7,
					 X bsl N + Acc, TrUserData);
dg_read_field_def_C2S_MahjongPrepare(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_C2S_MahjongPrepare(Rest, 0, 0, TrUserData);
      1 -> skip_64_C2S_MahjongPrepare(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_C2S_MahjongPrepare(Rest, 0, 0,
						   TrUserData);
      3 ->
	  skip_group_C2S_MahjongPrepare(Rest, Key bsr 3, 0,
					TrUserData);
      5 -> skip_32_C2S_MahjongPrepare(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_C2S_MahjongPrepare(<<>>, 0, 0, _) ->
    #'C2S_MahjongPrepare'{}.

skip_varint_C2S_MahjongPrepare(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    skip_varint_C2S_MahjongPrepare(Rest, Z1, Z2,
				   TrUserData);
skip_varint_C2S_MahjongPrepare(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    dfp_read_field_def_C2S_MahjongPrepare(Rest, Z1, Z2,
					  TrUserData).

skip_length_delimited_C2S_MahjongPrepare(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_C2S_MahjongPrepare(Rest, N + 7,
					     X bsl N + Acc, TrUserData);
skip_length_delimited_C2S_MahjongPrepare(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_C2S_MahjongPrepare(Rest2, 0, 0,
					  TrUserData).

skip_group_C2S_MahjongPrepare(Bin, FNum, Z2,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_C2S_MahjongPrepare(Rest, 0, Z2,
					  TrUserData).

skip_32_C2S_MahjongPrepare(<<_:32, Rest/binary>>, Z1,
			   Z2, TrUserData) ->
    dfp_read_field_def_C2S_MahjongPrepare(Rest, Z1, Z2,
					  TrUserData).

skip_64_C2S_MahjongPrepare(<<_:64, Rest/binary>>, Z1,
			   Z2, TrUserData) ->
    dfp_read_field_def_C2S_MahjongPrepare(Rest, Z1, Z2,
					  TrUserData).

decode_msg_S2C_MahjongPrepare(Bin, TrUserData) ->
    dfp_read_field_def_S2C_MahjongPrepare(Bin, 0, 0,
					  id(undefined, TrUserData),
					  TrUserData).

dfp_read_field_def_S2C_MahjongPrepare(<<18,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    d_field_S2C_MahjongPrepare_playerId(Rest, Z1, Z2, F@_1,
					TrUserData);
dfp_read_field_def_S2C_MahjongPrepare(<<>>, 0, 0, F@_1,
				      _) ->
    #'S2C_MahjongPrepare'{playerId = F@_1};
dfp_read_field_def_S2C_MahjongPrepare(Other, Z1, Z2,
				      F@_1, TrUserData) ->
    dg_read_field_def_S2C_MahjongPrepare(Other, Z1, Z2,
					 F@_1, TrUserData).

dg_read_field_def_S2C_MahjongPrepare(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_S2C_MahjongPrepare(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_S2C_MahjongPrepare(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      18 ->
	  d_field_S2C_MahjongPrepare_playerId(Rest, 0, 0, F@_1,
					      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_S2C_MahjongPrepare(Rest, 0, 0, F@_1,
					       TrUserData);
	    1 ->
		skip_64_S2C_MahjongPrepare(Rest, 0, 0, F@_1,
					   TrUserData);
	    2 ->
		skip_length_delimited_S2C_MahjongPrepare(Rest, 0, 0,
							 F@_1, TrUserData);
	    3 ->
		skip_group_S2C_MahjongPrepare(Rest, Key bsr 3, 0, F@_1,
					      TrUserData);
	    5 ->
		skip_32_S2C_MahjongPrepare(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_S2C_MahjongPrepare(<<>>, 0, 0, F@_1,
				     _) ->
    #'S2C_MahjongPrepare'{playerId = F@_1}.

d_field_S2C_MahjongPrepare_playerId(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_S2C_MahjongPrepare_playerId(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
d_field_S2C_MahjongPrepare_playerId(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_S2C_MahjongPrepare(RestF, 0, 0,
					  NewFValue, TrUserData).

skip_varint_S2C_MahjongPrepare(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    skip_varint_S2C_MahjongPrepare(Rest, Z1, Z2, F@_1,
				   TrUserData);
skip_varint_S2C_MahjongPrepare(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_S2C_MahjongPrepare(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_length_delimited_S2C_MahjongPrepare(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_S2C_MahjongPrepare(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_S2C_MahjongPrepare(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_S2C_MahjongPrepare(Rest2, 0, 0, F@_1,
					  TrUserData).

skip_group_S2C_MahjongPrepare(Bin, FNum, Z2, F@_1,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_S2C_MahjongPrepare(Rest, 0, Z2, F@_1,
					  TrUserData).

skip_32_S2C_MahjongPrepare(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_S2C_MahjongPrepare(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_64_S2C_MahjongPrepare(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_S2C_MahjongPrepare(Rest, Z1, Z2,
					  F@_1, TrUserData).

decode_msg_C2S_MahjongCancelPrepare(Bin, TrUserData) ->
    dfp_read_field_def_C2S_MahjongCancelPrepare(Bin, 0, 0,
						TrUserData).

dfp_read_field_def_C2S_MahjongCancelPrepare(<<>>, 0, 0,
					    _) ->
    #'C2S_MahjongCancelPrepare'{};
dfp_read_field_def_C2S_MahjongCancelPrepare(Other, Z1,
					    Z2, TrUserData) ->
    dg_read_field_def_C2S_MahjongCancelPrepare(Other, Z1,
					       Z2, TrUserData).

dg_read_field_def_C2S_MahjongCancelPrepare(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_C2S_MahjongCancelPrepare(Rest, N + 7,
					       X bsl N + Acc, TrUserData);
dg_read_field_def_C2S_MahjongCancelPrepare(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_C2S_MahjongCancelPrepare(Rest, 0, 0,
					       TrUserData);
      1 ->
	  skip_64_C2S_MahjongCancelPrepare(Rest, 0, 0,
					   TrUserData);
      2 ->
	  skip_length_delimited_C2S_MahjongCancelPrepare(Rest, 0,
							 0, TrUserData);
      3 ->
	  skip_group_C2S_MahjongCancelPrepare(Rest, Key bsr 3, 0,
					      TrUserData);
      5 ->
	  skip_32_C2S_MahjongCancelPrepare(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_C2S_MahjongCancelPrepare(<<>>, 0, 0,
					   _) ->
    #'C2S_MahjongCancelPrepare'{}.

skip_varint_C2S_MahjongCancelPrepare(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, TrUserData) ->
    skip_varint_C2S_MahjongCancelPrepare(Rest, Z1, Z2,
					 TrUserData);
skip_varint_C2S_MahjongCancelPrepare(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, TrUserData) ->
    dfp_read_field_def_C2S_MahjongCancelPrepare(Rest, Z1,
						Z2, TrUserData).

skip_length_delimited_C2S_MahjongCancelPrepare(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_C2S_MahjongCancelPrepare(Rest,
						   N + 7, X bsl N + Acc,
						   TrUserData);
skip_length_delimited_C2S_MahjongCancelPrepare(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_C2S_MahjongCancelPrepare(Rest2, 0, 0,
						TrUserData).

skip_group_C2S_MahjongCancelPrepare(Bin, FNum, Z2,
				    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_C2S_MahjongCancelPrepare(Rest, 0, Z2,
						TrUserData).

skip_32_C2S_MahjongCancelPrepare(<<_:32, Rest/binary>>,
				 Z1, Z2, TrUserData) ->
    dfp_read_field_def_C2S_MahjongCancelPrepare(Rest, Z1,
						Z2, TrUserData).

skip_64_C2S_MahjongCancelPrepare(<<_:64, Rest/binary>>,
				 Z1, Z2, TrUserData) ->
    dfp_read_field_def_C2S_MahjongCancelPrepare(Rest, Z1,
						Z2, TrUserData).

decode_msg_S2C_MahjongCancelPrepare(Bin, TrUserData) ->
    dfp_read_field_def_S2C_MahjongCancelPrepare(Bin, 0, 0,
						id(undefined, TrUserData),
						TrUserData).

dfp_read_field_def_S2C_MahjongCancelPrepare(<<18,
					      Rest/binary>>,
					    Z1, Z2, F@_1, TrUserData) ->
    d_field_S2C_MahjongCancelPrepare_playerId(Rest, Z1, Z2,
					      F@_1, TrUserData);
dfp_read_field_def_S2C_MahjongCancelPrepare(<<>>, 0, 0,
					    F@_1, _) ->
    #'S2C_MahjongCancelPrepare'{playerId = F@_1};
dfp_read_field_def_S2C_MahjongCancelPrepare(Other, Z1,
					    Z2, F@_1, TrUserData) ->
    dg_read_field_def_S2C_MahjongCancelPrepare(Other, Z1,
					       Z2, F@_1, TrUserData).

dg_read_field_def_S2C_MahjongCancelPrepare(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_S2C_MahjongCancelPrepare(Rest, N + 7,
					       X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_S2C_MahjongCancelPrepare(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      18 ->
	  d_field_S2C_MahjongCancelPrepare_playerId(Rest, 0, 0,
						    F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_S2C_MahjongCancelPrepare(Rest, 0, 0, F@_1,
						     TrUserData);
	    1 ->
		skip_64_S2C_MahjongCancelPrepare(Rest, 0, 0, F@_1,
						 TrUserData);
	    2 ->
		skip_length_delimited_S2C_MahjongCancelPrepare(Rest, 0,
							       0, F@_1,
							       TrUserData);
	    3 ->
		skip_group_S2C_MahjongCancelPrepare(Rest, Key bsr 3, 0,
						    F@_1, TrUserData);
	    5 ->
		skip_32_S2C_MahjongCancelPrepare(Rest, 0, 0, F@_1,
						 TrUserData)
	  end
    end;
dg_read_field_def_S2C_MahjongCancelPrepare(<<>>, 0, 0,
					   F@_1, _) ->
    #'S2C_MahjongCancelPrepare'{playerId = F@_1}.

d_field_S2C_MahjongCancelPrepare_playerId(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_S2C_MahjongCancelPrepare_playerId(Rest, N + 7,
					      X bsl N + Acc, F@_1, TrUserData);
d_field_S2C_MahjongCancelPrepare_playerId(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_S2C_MahjongCancelPrepare(RestF, 0, 0,
						NewFValue, TrUserData).

skip_varint_S2C_MahjongCancelPrepare(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    skip_varint_S2C_MahjongCancelPrepare(Rest, Z1, Z2, F@_1,
					 TrUserData);
skip_varint_S2C_MahjongCancelPrepare(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_S2C_MahjongCancelPrepare(Rest, Z1,
						Z2, F@_1, TrUserData).

skip_length_delimited_S2C_MahjongCancelPrepare(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_S2C_MahjongCancelPrepare(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   TrUserData);
skip_length_delimited_S2C_MahjongCancelPrepare(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_S2C_MahjongCancelPrepare(Rest2, 0, 0,
						F@_1, TrUserData).

skip_group_S2C_MahjongCancelPrepare(Bin, FNum, Z2, F@_1,
				    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_S2C_MahjongCancelPrepare(Rest, 0, Z2,
						F@_1, TrUserData).

skip_32_S2C_MahjongCancelPrepare(<<_:32, Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_S2C_MahjongCancelPrepare(Rest, Z1,
						Z2, F@_1, TrUserData).

skip_64_S2C_MahjongCancelPrepare(<<_:64, Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_S2C_MahjongCancelPrepare(Rest, Z1,
						Z2, F@_1, TrUserData).

decode_msg_Struct_MahjongPlayerBrief(Bin, TrUserData) ->
    dfp_read_field_def_Struct_MahjongPlayerBrief(Bin, 0, 0,
						 id(undefined, TrUserData),
						 id(undefined, TrUserData),
						 TrUserData).

dfp_read_field_def_Struct_MahjongPlayerBrief(<<10,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_Struct_MahjongPlayerBrief_id(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData);
dfp_read_field_def_Struct_MahjongPlayerBrief(<<16,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_Struct_MahjongPlayerBrief_seatId(Rest, Z1, Z2,
					     F@_1, F@_2, TrUserData);
dfp_read_field_def_Struct_MahjongPlayerBrief(<<>>, 0, 0,
					     F@_1, F@_2, _) ->
    #'Struct_MahjongPlayerBrief'{id = F@_1, seatId = F@_2};
dfp_read_field_def_Struct_MahjongPlayerBrief(Other, Z1,
					     Z2, F@_1, F@_2, TrUserData) ->
    dg_read_field_def_Struct_MahjongPlayerBrief(Other, Z1,
						Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_Struct_MahjongPlayerBrief(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Struct_MahjongPlayerBrief(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2,
						TrUserData);
dg_read_field_def_Struct_MahjongPlayerBrief(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Struct_MahjongPlayerBrief_id(Rest, 0, 0, F@_1,
					       F@_2, TrUserData);
      16 ->
	  d_field_Struct_MahjongPlayerBrief_seatId(Rest, 0, 0,
						   F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Struct_MahjongPlayerBrief(Rest, 0, 0, F@_1,
						      F@_2, TrUserData);
	    1 ->
		skip_64_Struct_MahjongPlayerBrief(Rest, 0, 0, F@_1,
						  F@_2, TrUserData);
	    2 ->
		skip_length_delimited_Struct_MahjongPlayerBrief(Rest, 0,
								0, F@_1, F@_2,
								TrUserData);
	    3 ->
		skip_group_Struct_MahjongPlayerBrief(Rest, Key bsr 3, 0,
						     F@_1, F@_2, TrUserData);
	    5 ->
		skip_32_Struct_MahjongPlayerBrief(Rest, 0, 0, F@_1,
						  F@_2, TrUserData)
	  end
    end;
dg_read_field_def_Struct_MahjongPlayerBrief(<<>>, 0, 0,
					    F@_1, F@_2, _) ->
    #'Struct_MahjongPlayerBrief'{id = F@_1, seatId = F@_2}.

d_field_Struct_MahjongPlayerBrief_id(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Struct_MahjongPlayerBrief_id(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_Struct_MahjongPlayerBrief_id(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Struct_MahjongPlayerBrief(RestF, 0,
						 0, NewFValue, F@_2,
						 TrUserData).

d_field_Struct_MahjongPlayerBrief_seatId(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Struct_MahjongPlayerBrief_seatId(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2,
					     TrUserData);
d_field_Struct_MahjongPlayerBrief_seatId(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_Struct_MahjongPlayerBrief(RestF, 0,
						 0, F@_1, NewFValue,
						 TrUserData).

skip_varint_Struct_MahjongPlayerBrief(<<1:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_Struct_MahjongPlayerBrief(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData);
skip_varint_Struct_MahjongPlayerBrief(<<0:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_Struct_MahjongPlayerBrief(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_Struct_MahjongPlayerBrief(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_Struct_MahjongPlayerBrief(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, TrUserData);
skip_length_delimited_Struct_MahjongPlayerBrief(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2,
						TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Struct_MahjongPlayerBrief(Rest2, 0,
						 0, F@_1, F@_2, TrUserData).

skip_group_Struct_MahjongPlayerBrief(Bin, FNum, Z2,
				     F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Struct_MahjongPlayerBrief(Rest, 0,
						 Z2, F@_1, F@_2, TrUserData).

skip_32_Struct_MahjongPlayerBrief(<<_:32, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_Struct_MahjongPlayerBrief(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData).

skip_64_Struct_MahjongPlayerBrief(<<_:64, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_Struct_MahjongPlayerBrief(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData).

decode_msg_C2S_MahjongStart(Bin, TrUserData) ->
    dfp_read_field_def_C2S_MahjongStart(Bin, 0, 0,
					TrUserData).

dfp_read_field_def_C2S_MahjongStart(<<>>, 0, 0, _) ->
    #'C2S_MahjongStart'{};
dfp_read_field_def_C2S_MahjongStart(Other, Z1, Z2,
				    TrUserData) ->
    dg_read_field_def_C2S_MahjongStart(Other, Z1, Z2,
				       TrUserData).

dg_read_field_def_C2S_MahjongStart(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_C2S_MahjongStart(Rest, N + 7,
				       X bsl N + Acc, TrUserData);
dg_read_field_def_C2S_MahjongStart(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_C2S_MahjongStart(Rest, 0, 0, TrUserData);
      1 -> skip_64_C2S_MahjongStart(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_C2S_MahjongStart(Rest, 0, 0,
						 TrUserData);
      3 ->
	  skip_group_C2S_MahjongStart(Rest, Key bsr 3, 0,
				      TrUserData);
      5 -> skip_32_C2S_MahjongStart(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_C2S_MahjongStart(<<>>, 0, 0, _) ->
    #'C2S_MahjongStart'{}.

skip_varint_C2S_MahjongStart(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, TrUserData) ->
    skip_varint_C2S_MahjongStart(Rest, Z1, Z2, TrUserData);
skip_varint_C2S_MahjongStart(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, TrUserData) ->
    dfp_read_field_def_C2S_MahjongStart(Rest, Z1, Z2,
					TrUserData).

skip_length_delimited_C2S_MahjongStart(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_C2S_MahjongStart(Rest, N + 7,
					   X bsl N + Acc, TrUserData);
skip_length_delimited_C2S_MahjongStart(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_C2S_MahjongStart(Rest2, 0, 0,
					TrUserData).

skip_group_C2S_MahjongStart(Bin, FNum, Z2,
			    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_C2S_MahjongStart(Rest, 0, Z2,
					TrUserData).

skip_32_C2S_MahjongStart(<<_:32, Rest/binary>>, Z1, Z2,
			 TrUserData) ->
    dfp_read_field_def_C2S_MahjongStart(Rest, Z1, Z2,
					TrUserData).

skip_64_C2S_MahjongStart(<<_:64, Rest/binary>>, Z1, Z2,
			 TrUserData) ->
    dfp_read_field_def_C2S_MahjongStart(Rest, Z1, Z2,
					TrUserData).

decode_msg_S2C_MahjongStart(Bin, TrUserData) ->
    dfp_read_field_def_S2C_MahjongStart(Bin, 0, 0,
					id([], TrUserData), TrUserData).

dfp_read_field_def_S2C_MahjongStart(<<18, Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    d_field_S2C_MahjongStart_players(Rest, Z1, Z2, F@_1,
				     TrUserData);
dfp_read_field_def_S2C_MahjongStart(<<>>, 0, 0, R1,
				    TrUserData) ->
    #'S2C_MahjongStart'{players =
			    lists_reverse(R1, TrUserData)};
dfp_read_field_def_S2C_MahjongStart(Other, Z1, Z2, F@_1,
				    TrUserData) ->
    dg_read_field_def_S2C_MahjongStart(Other, Z1, Z2, F@_1,
				       TrUserData).

dg_read_field_def_S2C_MahjongStart(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_S2C_MahjongStart(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_S2C_MahjongStart(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      18 ->
	  d_field_S2C_MahjongStart_players(Rest, 0, 0, F@_1,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_S2C_MahjongStart(Rest, 0, 0, F@_1,
					     TrUserData);
	    1 ->
		skip_64_S2C_MahjongStart(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_S2C_MahjongStart(Rest, 0, 0, F@_1,
						       TrUserData);
	    3 ->
		skip_group_S2C_MahjongStart(Rest, Key bsr 3, 0, F@_1,
					    TrUserData);
	    5 ->
		skip_32_S2C_MahjongStart(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_S2C_MahjongStart(<<>>, 0, 0, R1,
				   TrUserData) ->
    #'S2C_MahjongStart'{players =
			    lists_reverse(R1, TrUserData)}.

d_field_S2C_MahjongStart_players(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_S2C_MahjongStart_players(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
d_field_S2C_MahjongStart_players(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_Struct_MahjongPlayerBrief(Bs,
								    TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_S2C_MahjongStart(RestF, 0, 0,
					cons(NewFValue, Prev, TrUserData),
					TrUserData).

skip_varint_S2C_MahjongStart(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, TrUserData) ->
    skip_varint_S2C_MahjongStart(Rest, Z1, Z2, F@_1,
				 TrUserData);
skip_varint_S2C_MahjongStart(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_S2C_MahjongStart(Rest, Z1, Z2, F@_1,
					TrUserData).

skip_length_delimited_S2C_MahjongStart(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_S2C_MahjongStart(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_S2C_MahjongStart(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_S2C_MahjongStart(Rest2, 0, 0, F@_1,
					TrUserData).

skip_group_S2C_MahjongStart(Bin, FNum, Z2, F@_1,
			    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_S2C_MahjongStart(Rest, 0, Z2, F@_1,
					TrUserData).

skip_32_S2C_MahjongStart(<<_:32, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    dfp_read_field_def_S2C_MahjongStart(Rest, Z1, Z2, F@_1,
					TrUserData).

skip_64_S2C_MahjongStart(<<_:64, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    dfp_read_field_def_S2C_MahjongStart(Rest, Z1, Z2, F@_1,
					TrUserData).

decode_msg_S2C_MahjongDraw(Bin, TrUserData) ->
    dfp_read_field_def_S2C_MahjongDraw(Bin, 0, 0,
				       id(undefined, TrUserData),
				       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_S2C_MahjongDraw(<<8, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_S2C_MahjongDraw_cardId(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
dfp_read_field_def_S2C_MahjongDraw(<<16, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_S2C_MahjongDraw_seatId(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
dfp_read_field_def_S2C_MahjongDraw(<<>>, 0, 0, F@_1,
				   F@_2, _) ->
    #'S2C_MahjongDraw'{cardId = F@_1, seatId = F@_2};
dfp_read_field_def_S2C_MahjongDraw(Other, Z1, Z2, F@_1,
				   F@_2, TrUserData) ->
    dg_read_field_def_S2C_MahjongDraw(Other, Z1, Z2, F@_1,
				      F@_2, TrUserData).

dg_read_field_def_S2C_MahjongDraw(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_S2C_MahjongDraw(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_S2C_MahjongDraw(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_S2C_MahjongDraw_cardId(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
      16 ->
	  d_field_S2C_MahjongDraw_seatId(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_S2C_MahjongDraw(Rest, 0, 0, F@_1, F@_2,
					    TrUserData);
	    1 ->
		skip_64_S2C_MahjongDraw(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
	    2 ->
		skip_length_delimited_S2C_MahjongDraw(Rest, 0, 0, F@_1,
						      F@_2, TrUserData);
	    3 ->
		skip_group_S2C_MahjongDraw(Rest, Key bsr 3, 0, F@_1,
					   F@_2, TrUserData);
	    5 ->
		skip_32_S2C_MahjongDraw(Rest, 0, 0, F@_1, F@_2,
					TrUserData)
	  end
    end;
dg_read_field_def_S2C_MahjongDraw(<<>>, 0, 0, F@_1,
				  F@_2, _) ->
    #'S2C_MahjongDraw'{cardId = F@_1, seatId = F@_2}.

d_field_S2C_MahjongDraw_cardId(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_S2C_MahjongDraw_cardId(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_S2C_MahjongDraw_cardId(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_S2C_MahjongDraw(RestF, 0, 0,
				       NewFValue, F@_2, TrUserData).

d_field_S2C_MahjongDraw_seatId(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_S2C_MahjongDraw_seatId(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_S2C_MahjongDraw_seatId(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_S2C_MahjongDraw(RestF, 0, 0, F@_1,
				       NewFValue, TrUserData).

skip_varint_S2C_MahjongDraw(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_S2C_MahjongDraw(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData);
skip_varint_S2C_MahjongDraw(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_S2C_MahjongDraw(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData).

skip_length_delimited_S2C_MahjongDraw(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_S2C_MahjongDraw(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
skip_length_delimited_S2C_MahjongDraw(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_S2C_MahjongDraw(Rest2, 0, 0, F@_1,
				       F@_2, TrUserData).

skip_group_S2C_MahjongDraw(Bin, FNum, Z2, F@_1, F@_2,
			   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_S2C_MahjongDraw(Rest, 0, Z2, F@_1,
				       F@_2, TrUserData).

skip_32_S2C_MahjongDraw(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_S2C_MahjongDraw(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData).

skip_64_S2C_MahjongDraw(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_S2C_MahjongDraw(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData).

decode_msg_C2S_MahjongDiscard(Bin, TrUserData) ->
    dfp_read_field_def_C2S_MahjongDiscard(Bin, 0, 0,
					  id(undefined, TrUserData),
					  TrUserData).

dfp_read_field_def_C2S_MahjongDiscard(<<8,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    d_field_C2S_MahjongDiscard_cardId(Rest, Z1, Z2, F@_1,
				      TrUserData);
dfp_read_field_def_C2S_MahjongDiscard(<<>>, 0, 0, F@_1,
				      _) ->
    #'C2S_MahjongDiscard'{cardId = F@_1};
dfp_read_field_def_C2S_MahjongDiscard(Other, Z1, Z2,
				      F@_1, TrUserData) ->
    dg_read_field_def_C2S_MahjongDiscard(Other, Z1, Z2,
					 F@_1, TrUserData).

dg_read_field_def_C2S_MahjongDiscard(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_C2S_MahjongDiscard(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_C2S_MahjongDiscard(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_C2S_MahjongDiscard_cardId(Rest, 0, 0, F@_1,
					    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_C2S_MahjongDiscard(Rest, 0, 0, F@_1,
					       TrUserData);
	    1 ->
		skip_64_C2S_MahjongDiscard(Rest, 0, 0, F@_1,
					   TrUserData);
	    2 ->
		skip_length_delimited_C2S_MahjongDiscard(Rest, 0, 0,
							 F@_1, TrUserData);
	    3 ->
		skip_group_C2S_MahjongDiscard(Rest, Key bsr 3, 0, F@_1,
					      TrUserData);
	    5 ->
		skip_32_C2S_MahjongDiscard(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_C2S_MahjongDiscard(<<>>, 0, 0, F@_1,
				     _) ->
    #'C2S_MahjongDiscard'{cardId = F@_1}.

d_field_C2S_MahjongDiscard_cardId(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_C2S_MahjongDiscard_cardId(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
d_field_C2S_MahjongDiscard_cardId(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_C2S_MahjongDiscard(RestF, 0, 0,
					  NewFValue, TrUserData).

skip_varint_C2S_MahjongDiscard(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    skip_varint_C2S_MahjongDiscard(Rest, Z1, Z2, F@_1,
				   TrUserData);
skip_varint_C2S_MahjongDiscard(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_C2S_MahjongDiscard(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_length_delimited_C2S_MahjongDiscard(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_C2S_MahjongDiscard(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_C2S_MahjongDiscard(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_C2S_MahjongDiscard(Rest2, 0, 0, F@_1,
					  TrUserData).

skip_group_C2S_MahjongDiscard(Bin, FNum, Z2, F@_1,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_C2S_MahjongDiscard(Rest, 0, Z2, F@_1,
					  TrUserData).

skip_32_C2S_MahjongDiscard(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_C2S_MahjongDiscard(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_64_C2S_MahjongDiscard(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_C2S_MahjongDiscard(Rest, Z1, Z2,
					  F@_1, TrUserData).

decode_msg_S2C_MahjongDiscard(Bin, TrUserData) ->
    dfp_read_field_def_S2C_MahjongDiscard(Bin, 0, 0,
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  TrUserData).

dfp_read_field_def_S2C_MahjongDiscard(<<8,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_S2C_MahjongDiscard_cardId(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData);
dfp_read_field_def_S2C_MahjongDiscard(<<16,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_S2C_MahjongDiscard_seatId(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData);
dfp_read_field_def_S2C_MahjongDiscard(<<>>, 0, 0, F@_1,
				      F@_2, _) ->
    #'S2C_MahjongDiscard'{cardId = F@_1, seatId = F@_2};
dfp_read_field_def_S2C_MahjongDiscard(Other, Z1, Z2,
				      F@_1, F@_2, TrUserData) ->
    dg_read_field_def_S2C_MahjongDiscard(Other, Z1, Z2,
					 F@_1, F@_2, TrUserData).

dg_read_field_def_S2C_MahjongDiscard(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_S2C_MahjongDiscard(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_S2C_MahjongDiscard(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_S2C_MahjongDiscard_cardId(Rest, 0, 0, F@_1,
					    F@_2, TrUserData);
      16 ->
	  d_field_S2C_MahjongDiscard_seatId(Rest, 0, 0, F@_1,
					    F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_S2C_MahjongDiscard(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    1 ->
		skip_64_S2C_MahjongDiscard(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    2 ->
		skip_length_delimited_S2C_MahjongDiscard(Rest, 0, 0,
							 F@_1, F@_2,
							 TrUserData);
	    3 ->
		skip_group_S2C_MahjongDiscard(Rest, Key bsr 3, 0, F@_1,
					      F@_2, TrUserData);
	    5 ->
		skip_32_S2C_MahjongDiscard(Rest, 0, 0, F@_1, F@_2,
					   TrUserData)
	  end
    end;
dg_read_field_def_S2C_MahjongDiscard(<<>>, 0, 0, F@_1,
				     F@_2, _) ->
    #'S2C_MahjongDiscard'{cardId = F@_1, seatId = F@_2}.

d_field_S2C_MahjongDiscard_cardId(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_S2C_MahjongDiscard_cardId(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_S2C_MahjongDiscard_cardId(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_S2C_MahjongDiscard(RestF, 0, 0,
					  NewFValue, F@_2, TrUserData).

d_field_S2C_MahjongDiscard_seatId(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_S2C_MahjongDiscard_seatId(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_S2C_MahjongDiscard_seatId(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_S2C_MahjongDiscard(RestF, 0, 0, F@_1,
					  NewFValue, TrUserData).

skip_varint_S2C_MahjongDiscard(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_S2C_MahjongDiscard(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
skip_varint_S2C_MahjongDiscard(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_S2C_MahjongDiscard(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

skip_length_delimited_S2C_MahjongDiscard(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_S2C_MahjongDiscard(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2,
					     TrUserData);
skip_length_delimited_S2C_MahjongDiscard(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_S2C_MahjongDiscard(Rest2, 0, 0, F@_1,
					  F@_2, TrUserData).

skip_group_S2C_MahjongDiscard(Bin, FNum, Z2, F@_1, F@_2,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_S2C_MahjongDiscard(Rest, 0, Z2, F@_1,
					  F@_2, TrUserData).

skip_32_S2C_MahjongDiscard(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_S2C_MahjongDiscard(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

skip_64_S2C_MahjongDiscard(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_S2C_MahjongDiscard(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

decode_msg_C2S_MahjongPongs(Bin, TrUserData) ->
    dfp_read_field_def_C2S_MahjongPongs(Bin, 0, 0,
					id(undefined, TrUserData), TrUserData).

dfp_read_field_def_C2S_MahjongPongs(<<8, Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    d_field_C2S_MahjongPongs_cardId(Rest, Z1, Z2, F@_1,
				    TrUserData);
dfp_read_field_def_C2S_MahjongPongs(<<>>, 0, 0, F@_1,
				    _) ->
    #'C2S_MahjongPongs'{cardId = F@_1};
dfp_read_field_def_C2S_MahjongPongs(Other, Z1, Z2, F@_1,
				    TrUserData) ->
    dg_read_field_def_C2S_MahjongPongs(Other, Z1, Z2, F@_1,
				       TrUserData).

dg_read_field_def_C2S_MahjongPongs(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_C2S_MahjongPongs(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_C2S_MahjongPongs(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_C2S_MahjongPongs_cardId(Rest, 0, 0, F@_1,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_C2S_MahjongPongs(Rest, 0, 0, F@_1,
					     TrUserData);
	    1 ->
		skip_64_C2S_MahjongPongs(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_C2S_MahjongPongs(Rest, 0, 0, F@_1,
						       TrUserData);
	    3 ->
		skip_group_C2S_MahjongPongs(Rest, Key bsr 3, 0, F@_1,
					    TrUserData);
	    5 ->
		skip_32_C2S_MahjongPongs(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_C2S_MahjongPongs(<<>>, 0, 0, F@_1,
				   _) ->
    #'C2S_MahjongPongs'{cardId = F@_1}.

d_field_C2S_MahjongPongs_cardId(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_C2S_MahjongPongs_cardId(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
d_field_C2S_MahjongPongs_cardId(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_C2S_MahjongPongs(RestF, 0, 0,
					NewFValue, TrUserData).

skip_varint_C2S_MahjongPongs(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, TrUserData) ->
    skip_varint_C2S_MahjongPongs(Rest, Z1, Z2, F@_1,
				 TrUserData);
skip_varint_C2S_MahjongPongs(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_C2S_MahjongPongs(Rest, Z1, Z2, F@_1,
					TrUserData).

skip_length_delimited_C2S_MahjongPongs(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_C2S_MahjongPongs(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_C2S_MahjongPongs(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_C2S_MahjongPongs(Rest2, 0, 0, F@_1,
					TrUserData).

skip_group_C2S_MahjongPongs(Bin, FNum, Z2, F@_1,
			    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_C2S_MahjongPongs(Rest, 0, Z2, F@_1,
					TrUserData).

skip_32_C2S_MahjongPongs(<<_:32, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    dfp_read_field_def_C2S_MahjongPongs(Rest, Z1, Z2, F@_1,
					TrUserData).

skip_64_C2S_MahjongPongs(<<_:64, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    dfp_read_field_def_C2S_MahjongPongs(Rest, Z1, Z2, F@_1,
					TrUserData).

decode_msg_S2C_MahjongPongs(Bin, TrUserData) ->
    dfp_read_field_def_S2C_MahjongPongs(Bin, 0, 0,
					id(undefined, TrUserData),
					id(undefined, TrUserData), TrUserData).

dfp_read_field_def_S2C_MahjongPongs(<<8, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_S2C_MahjongPongs_seatId(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
dfp_read_field_def_S2C_MahjongPongs(<<16, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_S2C_MahjongPongs_cardId(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
dfp_read_field_def_S2C_MahjongPongs(<<>>, 0, 0, F@_1,
				    F@_2, _) ->
    #'S2C_MahjongPongs'{seatId = F@_1, cardId = F@_2};
dfp_read_field_def_S2C_MahjongPongs(Other, Z1, Z2, F@_1,
				    F@_2, TrUserData) ->
    dg_read_field_def_S2C_MahjongPongs(Other, Z1, Z2, F@_1,
				       F@_2, TrUserData).

dg_read_field_def_S2C_MahjongPongs(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_S2C_MahjongPongs(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_S2C_MahjongPongs(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_S2C_MahjongPongs_seatId(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
      16 ->
	  d_field_S2C_MahjongPongs_cardId(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_S2C_MahjongPongs(Rest, 0, 0, F@_1, F@_2,
					     TrUserData);
	    1 ->
		skip_64_S2C_MahjongPongs(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
	    2 ->
		skip_length_delimited_S2C_MahjongPongs(Rest, 0, 0, F@_1,
						       F@_2, TrUserData);
	    3 ->
		skip_group_S2C_MahjongPongs(Rest, Key bsr 3, 0, F@_1,
					    F@_2, TrUserData);
	    5 ->
		skip_32_S2C_MahjongPongs(Rest, 0, 0, F@_1, F@_2,
					 TrUserData)
	  end
    end;
dg_read_field_def_S2C_MahjongPongs(<<>>, 0, 0, F@_1,
				   F@_2, _) ->
    #'S2C_MahjongPongs'{seatId = F@_1, cardId = F@_2}.

d_field_S2C_MahjongPongs_seatId(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_S2C_MahjongPongs_seatId(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_S2C_MahjongPongs_seatId(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_S2C_MahjongPongs(RestF, 0, 0,
					NewFValue, F@_2, TrUserData).

d_field_S2C_MahjongPongs_cardId(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_S2C_MahjongPongs_cardId(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_S2C_MahjongPongs_cardId(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_S2C_MahjongPongs(RestF, 0, 0, F@_1,
					NewFValue, TrUserData).

skip_varint_S2C_MahjongPongs(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_S2C_MahjongPongs(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData);
skip_varint_S2C_MahjongPongs(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_S2C_MahjongPongs(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData).

skip_length_delimited_S2C_MahjongPongs(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_S2C_MahjongPongs(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2,
					   TrUserData);
skip_length_delimited_S2C_MahjongPongs(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_S2C_MahjongPongs(Rest2, 0, 0, F@_1,
					F@_2, TrUserData).

skip_group_S2C_MahjongPongs(Bin, FNum, Z2, F@_1, F@_2,
			    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_S2C_MahjongPongs(Rest, 0, Z2, F@_1,
					F@_2, TrUserData).

skip_32_S2C_MahjongPongs(<<_:32, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_S2C_MahjongPongs(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData).

skip_64_S2C_MahjongPongs(<<_:64, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_S2C_MahjongPongs(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData).

decode_msg_C2S_MahjongKong(Bin, TrUserData) ->
    dfp_read_field_def_C2S_MahjongKong(Bin, 0, 0,
				       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_C2S_MahjongKong(<<8, Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    d_field_C2S_MahjongKong_cardId(Rest, Z1, Z2, F@_1,
				   TrUserData);
dfp_read_field_def_C2S_MahjongKong(<<>>, 0, 0, F@_1,
				   _) ->
    #'C2S_MahjongKong'{cardId = F@_1};
dfp_read_field_def_C2S_MahjongKong(Other, Z1, Z2, F@_1,
				   TrUserData) ->
    dg_read_field_def_C2S_MahjongKong(Other, Z1, Z2, F@_1,
				      TrUserData).

dg_read_field_def_C2S_MahjongKong(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_C2S_MahjongKong(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_C2S_MahjongKong(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_C2S_MahjongKong_cardId(Rest, 0, 0, F@_1,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_C2S_MahjongKong(Rest, 0, 0, F@_1,
					    TrUserData);
	    1 ->
		skip_64_C2S_MahjongKong(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_C2S_MahjongKong(Rest, 0, 0, F@_1,
						      TrUserData);
	    3 ->
		skip_group_C2S_MahjongKong(Rest, Key bsr 3, 0, F@_1,
					   TrUserData);
	    5 ->
		skip_32_C2S_MahjongKong(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_C2S_MahjongKong(<<>>, 0, 0, F@_1,
				  _) ->
    #'C2S_MahjongKong'{cardId = F@_1}.

d_field_C2S_MahjongKong_cardId(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_C2S_MahjongKong_cardId(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
d_field_C2S_MahjongKong_cardId(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_C2S_MahjongKong(RestF, 0, 0,
				       NewFValue, TrUserData).

skip_varint_C2S_MahjongKong(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, TrUserData) ->
    skip_varint_C2S_MahjongKong(Rest, Z1, Z2, F@_1,
				TrUserData);
skip_varint_C2S_MahjongKong(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_C2S_MahjongKong(Rest, Z1, Z2, F@_1,
				       TrUserData).

skip_length_delimited_C2S_MahjongKong(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_C2S_MahjongKong(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_C2S_MahjongKong(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_C2S_MahjongKong(Rest2, 0, 0, F@_1,
				       TrUserData).

skip_group_C2S_MahjongKong(Bin, FNum, Z2, F@_1,
			   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_C2S_MahjongKong(Rest, 0, Z2, F@_1,
				       TrUserData).

skip_32_C2S_MahjongKong(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    dfp_read_field_def_C2S_MahjongKong(Rest, Z1, Z2, F@_1,
				       TrUserData).

skip_64_C2S_MahjongKong(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    dfp_read_field_def_C2S_MahjongKong(Rest, Z1, Z2, F@_1,
				       TrUserData).

decode_msg_S2C_MahjongKong(Bin, TrUserData) ->
    dfp_read_field_def_S2C_MahjongKong(Bin, 0, 0,
				       id(undefined, TrUserData),
				       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_S2C_MahjongKong(<<8, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_S2C_MahjongKong_seatId(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
dfp_read_field_def_S2C_MahjongKong(<<16, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_S2C_MahjongKong_cardId(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
dfp_read_field_def_S2C_MahjongKong(<<>>, 0, 0, F@_1,
				   F@_2, _) ->
    #'S2C_MahjongKong'{seatId = F@_1, cardId = F@_2};
dfp_read_field_def_S2C_MahjongKong(Other, Z1, Z2, F@_1,
				   F@_2, TrUserData) ->
    dg_read_field_def_S2C_MahjongKong(Other, Z1, Z2, F@_1,
				      F@_2, TrUserData).

dg_read_field_def_S2C_MahjongKong(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_S2C_MahjongKong(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_S2C_MahjongKong(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_S2C_MahjongKong_seatId(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
      16 ->
	  d_field_S2C_MahjongKong_cardId(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_S2C_MahjongKong(Rest, 0, 0, F@_1, F@_2,
					    TrUserData);
	    1 ->
		skip_64_S2C_MahjongKong(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
	    2 ->
		skip_length_delimited_S2C_MahjongKong(Rest, 0, 0, F@_1,
						      F@_2, TrUserData);
	    3 ->
		skip_group_S2C_MahjongKong(Rest, Key bsr 3, 0, F@_1,
					   F@_2, TrUserData);
	    5 ->
		skip_32_S2C_MahjongKong(Rest, 0, 0, F@_1, F@_2,
					TrUserData)
	  end
    end;
dg_read_field_def_S2C_MahjongKong(<<>>, 0, 0, F@_1,
				  F@_2, _) ->
    #'S2C_MahjongKong'{seatId = F@_1, cardId = F@_2}.

d_field_S2C_MahjongKong_seatId(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_S2C_MahjongKong_seatId(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_S2C_MahjongKong_seatId(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_S2C_MahjongKong(RestF, 0, 0,
				       NewFValue, F@_2, TrUserData).

d_field_S2C_MahjongKong_cardId(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_S2C_MahjongKong_cardId(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_S2C_MahjongKong_cardId(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_S2C_MahjongKong(RestF, 0, 0, F@_1,
				       NewFValue, TrUserData).

skip_varint_S2C_MahjongKong(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_S2C_MahjongKong(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData);
skip_varint_S2C_MahjongKong(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_S2C_MahjongKong(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData).

skip_length_delimited_S2C_MahjongKong(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_S2C_MahjongKong(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
skip_length_delimited_S2C_MahjongKong(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_S2C_MahjongKong(Rest2, 0, 0, F@_1,
				       F@_2, TrUserData).

skip_group_S2C_MahjongKong(Bin, FNum, Z2, F@_1, F@_2,
			   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_S2C_MahjongKong(Rest, 0, Z2, F@_1,
				       F@_2, TrUserData).

skip_32_S2C_MahjongKong(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_S2C_MahjongKong(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData).

skip_64_S2C_MahjongKong(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_S2C_MahjongKong(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData).

decode_msg_C2S_MahjongChow(Bin, TrUserData) ->
    dfp_read_field_def_C2S_MahjongChow(Bin, 0, 0,
				       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_C2S_MahjongChow(<<8, Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    d_field_C2S_MahjongChow_cardId(Rest, Z1, Z2, F@_1,
				   TrUserData);
dfp_read_field_def_C2S_MahjongChow(<<>>, 0, 0, F@_1,
				   _) ->
    #'C2S_MahjongChow'{cardId = F@_1};
dfp_read_field_def_C2S_MahjongChow(Other, Z1, Z2, F@_1,
				   TrUserData) ->
    dg_read_field_def_C2S_MahjongChow(Other, Z1, Z2, F@_1,
				      TrUserData).

dg_read_field_def_C2S_MahjongChow(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_C2S_MahjongChow(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_C2S_MahjongChow(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_C2S_MahjongChow_cardId(Rest, 0, 0, F@_1,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_C2S_MahjongChow(Rest, 0, 0, F@_1,
					    TrUserData);
	    1 ->
		skip_64_C2S_MahjongChow(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_C2S_MahjongChow(Rest, 0, 0, F@_1,
						      TrUserData);
	    3 ->
		skip_group_C2S_MahjongChow(Rest, Key bsr 3, 0, F@_1,
					   TrUserData);
	    5 ->
		skip_32_C2S_MahjongChow(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_C2S_MahjongChow(<<>>, 0, 0, F@_1,
				  _) ->
    #'C2S_MahjongChow'{cardId = F@_1}.

d_field_C2S_MahjongChow_cardId(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_C2S_MahjongChow_cardId(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
d_field_C2S_MahjongChow_cardId(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_C2S_MahjongChow(RestF, 0, 0,
				       NewFValue, TrUserData).

skip_varint_C2S_MahjongChow(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, TrUserData) ->
    skip_varint_C2S_MahjongChow(Rest, Z1, Z2, F@_1,
				TrUserData);
skip_varint_C2S_MahjongChow(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_C2S_MahjongChow(Rest, Z1, Z2, F@_1,
				       TrUserData).

skip_length_delimited_C2S_MahjongChow(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_C2S_MahjongChow(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_C2S_MahjongChow(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_C2S_MahjongChow(Rest2, 0, 0, F@_1,
				       TrUserData).

skip_group_C2S_MahjongChow(Bin, FNum, Z2, F@_1,
			   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_C2S_MahjongChow(Rest, 0, Z2, F@_1,
				       TrUserData).

skip_32_C2S_MahjongChow(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    dfp_read_field_def_C2S_MahjongChow(Rest, Z1, Z2, F@_1,
				       TrUserData).

skip_64_C2S_MahjongChow(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    dfp_read_field_def_C2S_MahjongChow(Rest, Z1, Z2, F@_1,
				       TrUserData).

decode_msg_S2C_MahjongChow(Bin, TrUserData) ->
    dfp_read_field_def_S2C_MahjongChow(Bin, 0, 0,
				       id(undefined, TrUserData),
				       id(undefined, TrUserData),
				       id([], TrUserData), TrUserData).

dfp_read_field_def_S2C_MahjongChow(<<8, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_S2C_MahjongChow_seatId(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData);
dfp_read_field_def_S2C_MahjongChow(<<16, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_S2C_MahjongChow_cardId(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData);
dfp_read_field_def_S2C_MahjongChow(<<26, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_pfield_S2C_MahjongChow_meld(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData);
dfp_read_field_def_S2C_MahjongChow(<<24, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_S2C_MahjongChow_meld(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData);
dfp_read_field_def_S2C_MahjongChow(<<>>, 0, 0, F@_1,
				   F@_2, R1, TrUserData) ->
    #'S2C_MahjongChow'{seatId = F@_1, cardId = F@_2,
		       meld = lists_reverse(R1, TrUserData)};
dfp_read_field_def_S2C_MahjongChow(Other, Z1, Z2, F@_1,
				   F@_2, F@_3, TrUserData) ->
    dg_read_field_def_S2C_MahjongChow(Other, Z1, Z2, F@_1,
				      F@_2, F@_3, TrUserData).

dg_read_field_def_S2C_MahjongChow(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_S2C_MahjongChow(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3,
				      TrUserData);
dg_read_field_def_S2C_MahjongChow(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_S2C_MahjongChow_seatId(Rest, 0, 0, F@_1, F@_2,
					 F@_3, TrUserData);
      16 ->
	  d_field_S2C_MahjongChow_cardId(Rest, 0, 0, F@_1, F@_2,
					 F@_3, TrUserData);
      26 ->
	  d_pfield_S2C_MahjongChow_meld(Rest, 0, 0, F@_1, F@_2,
					F@_3, TrUserData);
      24 ->
	  d_field_S2C_MahjongChow_meld(Rest, 0, 0, F@_1, F@_2,
				       F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_S2C_MahjongChow(Rest, 0, 0, F@_1, F@_2,
					    F@_3, TrUserData);
	    1 ->
		skip_64_S2C_MahjongChow(Rest, 0, 0, F@_1, F@_2, F@_3,
					TrUserData);
	    2 ->
		skip_length_delimited_S2C_MahjongChow(Rest, 0, 0, F@_1,
						      F@_2, F@_3, TrUserData);
	    3 ->
		skip_group_S2C_MahjongChow(Rest, Key bsr 3, 0, F@_1,
					   F@_2, F@_3, TrUserData);
	    5 ->
		skip_32_S2C_MahjongChow(Rest, 0, 0, F@_1, F@_2, F@_3,
					TrUserData)
	  end
    end;
dg_read_field_def_S2C_MahjongChow(<<>>, 0, 0, F@_1,
				  F@_2, R1, TrUserData) ->
    #'S2C_MahjongChow'{seatId = F@_1, cardId = F@_2,
		       meld = lists_reverse(R1, TrUserData)}.

d_field_S2C_MahjongChow_seatId(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_S2C_MahjongChow_seatId(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_S2C_MahjongChow_seatId(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_S2C_MahjongChow(RestF, 0, 0,
				       NewFValue, F@_2, F@_3, TrUserData).

d_field_S2C_MahjongChow_cardId(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_S2C_MahjongChow_cardId(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_S2C_MahjongChow_cardId(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_S2C_MahjongChow(RestF, 0, 0, F@_1,
				       NewFValue, F@_3, TrUserData).

d_field_S2C_MahjongChow_meld(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_S2C_MahjongChow_meld(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, TrUserData);
d_field_S2C_MahjongChow_meld(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_S2C_MahjongChow(RestF, 0, 0, F@_1,
				       F@_2, cons(NewFValue, Prev, TrUserData),
				       TrUserData).

d_pfield_S2C_MahjongChow_meld(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_pfield_S2C_MahjongChow_meld(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_pfield_S2C_MahjongChow_meld(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, E, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq =
	d_packed_field_S2C_MahjongChow_meld(PackedBytes, 0, 0,
					    E, TrUserData),
    dfp_read_field_def_S2C_MahjongChow(Rest2, 0, 0, F@_1,
				       F@_2, NewSeq, TrUserData).

d_packed_field_S2C_MahjongChow_meld(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, AccSeq, TrUserData)
    when N < 57 ->
    d_packed_field_S2C_MahjongChow_meld(Rest, N + 7,
					X bsl N + Acc, AccSeq, TrUserData);
d_packed_field_S2C_MahjongChow_meld(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    d_packed_field_S2C_MahjongChow_meld(RestF, 0, 0,
					[NewFValue | AccSeq], TrUserData);
d_packed_field_S2C_MahjongChow_meld(<<>>, 0, 0, AccSeq,
				    _) ->
    AccSeq.

skip_varint_S2C_MahjongChow(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_S2C_MahjongChow(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData);
skip_varint_S2C_MahjongChow(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_S2C_MahjongChow(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, TrUserData).

skip_length_delimited_S2C_MahjongChow(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_S2C_MahjongChow(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3,
					  TrUserData);
skip_length_delimited_S2C_MahjongChow(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_S2C_MahjongChow(Rest2, 0, 0, F@_1,
				       F@_2, F@_3, TrUserData).

skip_group_S2C_MahjongChow(Bin, FNum, Z2, F@_1, F@_2,
			   F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_S2C_MahjongChow(Rest, 0, Z2, F@_1,
				       F@_2, F@_3, TrUserData).

skip_32_S2C_MahjongChow(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_S2C_MahjongChow(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, TrUserData).

skip_64_S2C_MahjongChow(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_S2C_MahjongChow(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, TrUserData).

decode_msg_C2S_MahjongHu(Bin, TrUserData) ->
    dfp_read_field_def_C2S_MahjongHu(Bin, 0, 0, TrUserData).

dfp_read_field_def_C2S_MahjongHu(<<>>, 0, 0, _) ->
    #'C2S_MahjongHu'{};
dfp_read_field_def_C2S_MahjongHu(Other, Z1, Z2,
				 TrUserData) ->
    dg_read_field_def_C2S_MahjongHu(Other, Z1, Z2,
				    TrUserData).

dg_read_field_def_C2S_MahjongHu(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_C2S_MahjongHu(Rest, N + 7,
				    X bsl N + Acc, TrUserData);
dg_read_field_def_C2S_MahjongHu(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_C2S_MahjongHu(Rest, 0, 0, TrUserData);
      1 -> skip_64_C2S_MahjongHu(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_C2S_MahjongHu(Rest, 0, 0,
					      TrUserData);
      3 ->
	  skip_group_C2S_MahjongHu(Rest, Key bsr 3, 0,
				   TrUserData);
      5 -> skip_32_C2S_MahjongHu(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_C2S_MahjongHu(<<>>, 0, 0, _) ->
    #'C2S_MahjongHu'{}.

skip_varint_C2S_MahjongHu(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, TrUserData) ->
    skip_varint_C2S_MahjongHu(Rest, Z1, Z2, TrUserData);
skip_varint_C2S_MahjongHu(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, TrUserData) ->
    dfp_read_field_def_C2S_MahjongHu(Rest, Z1, Z2,
				     TrUserData).

skip_length_delimited_C2S_MahjongHu(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_C2S_MahjongHu(Rest, N + 7,
					X bsl N + Acc, TrUserData);
skip_length_delimited_C2S_MahjongHu(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_C2S_MahjongHu(Rest2, 0, 0,
				     TrUserData).

skip_group_C2S_MahjongHu(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_C2S_MahjongHu(Rest, 0, Z2,
				     TrUserData).

skip_32_C2S_MahjongHu(<<_:32, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_C2S_MahjongHu(Rest, Z1, Z2,
				     TrUserData).

skip_64_C2S_MahjongHu(<<_:64, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_C2S_MahjongHu(Rest, Z1, Z2,
				     TrUserData).

decode_msg_S2C_MahjongHu(Bin, TrUserData) ->
    dfp_read_field_def_S2C_MahjongHu(Bin, 0, 0,
				     id(undefined, TrUserData),
				     id(undefined, TrUserData),
				     id(undefined, TrUserData), TrUserData).

dfp_read_field_def_S2C_MahjongHu(<<8, Rest/binary>>, Z1,
				 Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_S2C_MahjongHu_winnerSeatId(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, TrUserData);
dfp_read_field_def_S2C_MahjongHu(<<16, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_S2C_MahjongHu_loserSeatId(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, TrUserData);
dfp_read_field_def_S2C_MahjongHu(<<32, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_S2C_MahjongHu_faan(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData);
dfp_read_field_def_S2C_MahjongHu(<<>>, 0, 0, F@_1, F@_2,
				 F@_3, _) ->
    #'S2C_MahjongHu'{winnerSeatId = F@_1,
		     loserSeatId = F@_2, faan = F@_3};
dfp_read_field_def_S2C_MahjongHu(Other, Z1, Z2, F@_1,
				 F@_2, F@_3, TrUserData) ->
    dg_read_field_def_S2C_MahjongHu(Other, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData).

dg_read_field_def_S2C_MahjongHu(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_S2C_MahjongHu(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3,
				    TrUserData);
dg_read_field_def_S2C_MahjongHu(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_S2C_MahjongHu_winnerSeatId(Rest, 0, 0, F@_1,
					     F@_2, F@_3, TrUserData);
      16 ->
	  d_field_S2C_MahjongHu_loserSeatId(Rest, 0, 0, F@_1,
					    F@_2, F@_3, TrUserData);
      32 ->
	  d_field_S2C_MahjongHu_faan(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_S2C_MahjongHu(Rest, 0, 0, F@_1, F@_2, F@_3,
					  TrUserData);
	    1 ->
		skip_64_S2C_MahjongHu(Rest, 0, 0, F@_1, F@_2, F@_3,
				      TrUserData);
	    2 ->
		skip_length_delimited_S2C_MahjongHu(Rest, 0, 0, F@_1,
						    F@_2, F@_3, TrUserData);
	    3 ->
		skip_group_S2C_MahjongHu(Rest, Key bsr 3, 0, F@_1, F@_2,
					 F@_3, TrUserData);
	    5 ->
		skip_32_S2C_MahjongHu(Rest, 0, 0, F@_1, F@_2, F@_3,
				      TrUserData)
	  end
    end;
dg_read_field_def_S2C_MahjongHu(<<>>, 0, 0, F@_1, F@_2,
				F@_3, _) ->
    #'S2C_MahjongHu'{winnerSeatId = F@_1,
		     loserSeatId = F@_2, faan = F@_3}.

d_field_S2C_MahjongHu_winnerSeatId(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_S2C_MahjongHu_winnerSeatId(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3,
				       TrUserData);
d_field_S2C_MahjongHu_winnerSeatId(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_S2C_MahjongHu(RestF, 0, 0, NewFValue,
				     F@_2, F@_3, TrUserData).

d_field_S2C_MahjongHu_loserSeatId(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_S2C_MahjongHu_loserSeatId(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3,
				      TrUserData);
d_field_S2C_MahjongHu_loserSeatId(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_S2C_MahjongHu(RestF, 0, 0, F@_1,
				     NewFValue, F@_3, TrUserData).

d_field_S2C_MahjongHu_faan(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_S2C_MahjongHu_faan(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
d_field_S2C_MahjongHu_faan(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_S2C_MahjongHu(RestF, 0, 0, F@_1,
				     F@_2, NewFValue, TrUserData).

skip_varint_S2C_MahjongHu(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_S2C_MahjongHu(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData);
skip_varint_S2C_MahjongHu(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_S2C_MahjongHu(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, TrUserData).

skip_length_delimited_S2C_MahjongHu(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_S2C_MahjongHu(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3,
					TrUserData);
skip_length_delimited_S2C_MahjongHu(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_S2C_MahjongHu(Rest2, 0, 0, F@_1,
				     F@_2, F@_3, TrUserData).

skip_group_S2C_MahjongHu(Bin, FNum, Z2, F@_1, F@_2,
			 F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_S2C_MahjongHu(Rest, 0, Z2, F@_1,
				     F@_2, F@_3, TrUserData).

skip_32_S2C_MahjongHu(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_S2C_MahjongHu(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, TrUserData).

skip_64_S2C_MahjongHu(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_S2C_MahjongHu(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, TrUserData).

decode_msg_C2S_MahjongZimo(Bin, TrUserData) ->
    dfp_read_field_def_C2S_MahjongZimo(Bin, 0, 0,
				       TrUserData).

dfp_read_field_def_C2S_MahjongZimo(<<>>, 0, 0, _) ->
    #'C2S_MahjongZimo'{};
dfp_read_field_def_C2S_MahjongZimo(Other, Z1, Z2,
				   TrUserData) ->
    dg_read_field_def_C2S_MahjongZimo(Other, Z1, Z2,
				      TrUserData).

dg_read_field_def_C2S_MahjongZimo(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_C2S_MahjongZimo(Rest, N + 7,
				      X bsl N + Acc, TrUserData);
dg_read_field_def_C2S_MahjongZimo(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_C2S_MahjongZimo(Rest, 0, 0, TrUserData);
      1 -> skip_64_C2S_MahjongZimo(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_C2S_MahjongZimo(Rest, 0, 0,
						TrUserData);
      3 ->
	  skip_group_C2S_MahjongZimo(Rest, Key bsr 3, 0,
				     TrUserData);
      5 -> skip_32_C2S_MahjongZimo(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_C2S_MahjongZimo(<<>>, 0, 0, _) ->
    #'C2S_MahjongZimo'{}.

skip_varint_C2S_MahjongZimo(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, TrUserData) ->
    skip_varint_C2S_MahjongZimo(Rest, Z1, Z2, TrUserData);
skip_varint_C2S_MahjongZimo(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, TrUserData) ->
    dfp_read_field_def_C2S_MahjongZimo(Rest, Z1, Z2,
				       TrUserData).

skip_length_delimited_C2S_MahjongZimo(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_C2S_MahjongZimo(Rest, N + 7,
					  X bsl N + Acc, TrUserData);
skip_length_delimited_C2S_MahjongZimo(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_C2S_MahjongZimo(Rest2, 0, 0,
				       TrUserData).

skip_group_C2S_MahjongZimo(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_C2S_MahjongZimo(Rest, 0, Z2,
				       TrUserData).

skip_32_C2S_MahjongZimo(<<_:32, Rest/binary>>, Z1, Z2,
			TrUserData) ->
    dfp_read_field_def_C2S_MahjongZimo(Rest, Z1, Z2,
				       TrUserData).

skip_64_C2S_MahjongZimo(<<_:64, Rest/binary>>, Z1, Z2,
			TrUserData) ->
    dfp_read_field_def_C2S_MahjongZimo(Rest, Z1, Z2,
				       TrUserData).

decode_msg_S2C_MahjongZimo(Bin, TrUserData) ->
    dfp_read_field_def_S2C_MahjongZimo(Bin, 0, 0,
				       id(undefined, TrUserData),
				       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_S2C_MahjongZimo(<<8, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_S2C_MahjongZimo_winnerSeatId(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData);
dfp_read_field_def_S2C_MahjongZimo(<<16, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_S2C_MahjongZimo_faan(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData);
dfp_read_field_def_S2C_MahjongZimo(<<>>, 0, 0, F@_1,
				   F@_2, _) ->
    #'S2C_MahjongZimo'{winnerSeatId = F@_1, faan = F@_2};
dfp_read_field_def_S2C_MahjongZimo(Other, Z1, Z2, F@_1,
				   F@_2, TrUserData) ->
    dg_read_field_def_S2C_MahjongZimo(Other, Z1, Z2, F@_1,
				      F@_2, TrUserData).

dg_read_field_def_S2C_MahjongZimo(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_S2C_MahjongZimo(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_S2C_MahjongZimo(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_S2C_MahjongZimo_winnerSeatId(Rest, 0, 0, F@_1,
					       F@_2, TrUserData);
      16 ->
	  d_field_S2C_MahjongZimo_faan(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_S2C_MahjongZimo(Rest, 0, 0, F@_1, F@_2,
					    TrUserData);
	    1 ->
		skip_64_S2C_MahjongZimo(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
	    2 ->
		skip_length_delimited_S2C_MahjongZimo(Rest, 0, 0, F@_1,
						      F@_2, TrUserData);
	    3 ->
		skip_group_S2C_MahjongZimo(Rest, Key bsr 3, 0, F@_1,
					   F@_2, TrUserData);
	    5 ->
		skip_32_S2C_MahjongZimo(Rest, 0, 0, F@_1, F@_2,
					TrUserData)
	  end
    end;
dg_read_field_def_S2C_MahjongZimo(<<>>, 0, 0, F@_1,
				  F@_2, _) ->
    #'S2C_MahjongZimo'{winnerSeatId = F@_1, faan = F@_2}.

d_field_S2C_MahjongZimo_winnerSeatId(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_S2C_MahjongZimo_winnerSeatId(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_S2C_MahjongZimo_winnerSeatId(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_S2C_MahjongZimo(RestF, 0, 0,
				       NewFValue, F@_2, TrUserData).

d_field_S2C_MahjongZimo_faan(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_S2C_MahjongZimo_faan(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
d_field_S2C_MahjongZimo_faan(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_S2C_MahjongZimo(RestF, 0, 0, F@_1,
				       NewFValue, TrUserData).

skip_varint_S2C_MahjongZimo(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_S2C_MahjongZimo(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData);
skip_varint_S2C_MahjongZimo(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_S2C_MahjongZimo(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData).

skip_length_delimited_S2C_MahjongZimo(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_S2C_MahjongZimo(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
skip_length_delimited_S2C_MahjongZimo(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_S2C_MahjongZimo(Rest2, 0, 0, F@_1,
				       F@_2, TrUserData).

skip_group_S2C_MahjongZimo(Bin, FNum, Z2, F@_1, F@_2,
			   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_S2C_MahjongZimo(Rest, 0, Z2, F@_1,
				       F@_2, TrUserData).

skip_32_S2C_MahjongZimo(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_S2C_MahjongZimo(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData).

skip_64_S2C_MahjongZimo(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_S2C_MahjongZimo(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData).

decode_msg_C2S_MahjongChangeThree(Bin, TrUserData) ->
    dfp_read_field_def_C2S_MahjongChangeThree(Bin, 0, 0,
					      id(undefined, TrUserData),
					      id([], TrUserData), TrUserData).

dfp_read_field_def_C2S_MahjongChangeThree(<<8,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_C2S_MahjongChangeThree_seatId(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData);
dfp_read_field_def_C2S_MahjongChangeThree(<<18,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_pfield_C2S_MahjongChangeThree_threeCards(Rest, Z1, Z2,
					       F@_1, F@_2, TrUserData);
dfp_read_field_def_C2S_MahjongChangeThree(<<16,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_C2S_MahjongChangeThree_threeCards(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData);
dfp_read_field_def_C2S_MahjongChangeThree(<<>>, 0, 0,
					  F@_1, R1, TrUserData) ->
    #'C2S_MahjongChangeThree'{seatId = F@_1,
			      threeCards = lists_reverse(R1, TrUserData)};
dfp_read_field_def_C2S_MahjongChangeThree(Other, Z1, Z2,
					  F@_1, F@_2, TrUserData) ->
    dg_read_field_def_C2S_MahjongChangeThree(Other, Z1, Z2,
					     F@_1, F@_2, TrUserData).

dg_read_field_def_C2S_MahjongChangeThree(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_C2S_MahjongChangeThree(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2,
					     TrUserData);
dg_read_field_def_C2S_MahjongChangeThree(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_C2S_MahjongChangeThree_seatId(Rest, 0, 0, F@_1,
						F@_2, TrUserData);
      18 ->
	  d_pfield_C2S_MahjongChangeThree_threeCards(Rest, 0, 0,
						     F@_1, F@_2, TrUserData);
      16 ->
	  d_field_C2S_MahjongChangeThree_threeCards(Rest, 0, 0,
						    F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_C2S_MahjongChangeThree(Rest, 0, 0, F@_1,
						   F@_2, TrUserData);
	    1 ->
		skip_64_C2S_MahjongChangeThree(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    2 ->
		skip_length_delimited_C2S_MahjongChangeThree(Rest, 0, 0,
							     F@_1, F@_2,
							     TrUserData);
	    3 ->
		skip_group_C2S_MahjongChangeThree(Rest, Key bsr 3, 0,
						  F@_1, F@_2, TrUserData);
	    5 ->
		skip_32_C2S_MahjongChangeThree(Rest, 0, 0, F@_1, F@_2,
					       TrUserData)
	  end
    end;
dg_read_field_def_C2S_MahjongChangeThree(<<>>, 0, 0,
					 F@_1, R1, TrUserData) ->
    #'C2S_MahjongChangeThree'{seatId = F@_1,
			      threeCards = lists_reverse(R1, TrUserData)}.

d_field_C2S_MahjongChangeThree_seatId(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_C2S_MahjongChangeThree_seatId(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
d_field_C2S_MahjongChangeThree_seatId(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_C2S_MahjongChangeThree(RestF, 0, 0,
					      NewFValue, F@_2, TrUserData).

d_field_C2S_MahjongChangeThree_threeCards(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_C2S_MahjongChangeThree_threeCards(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2,
					      TrUserData);
d_field_C2S_MahjongChangeThree_threeCards(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_C2S_MahjongChangeThree(RestF, 0, 0,
					      F@_1,
					      cons(NewFValue, Prev, TrUserData),
					      TrUserData).

d_pfield_C2S_MahjongChangeThree_threeCards(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_pfield_C2S_MahjongChangeThree_threeCards(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2,
					       TrUserData);
d_pfield_C2S_MahjongChangeThree_threeCards(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, E, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq =
	d_packed_field_C2S_MahjongChangeThree_threeCards(PackedBytes,
							 0, 0, E, TrUserData),
    dfp_read_field_def_C2S_MahjongChangeThree(Rest2, 0, 0,
					      F@_1, NewSeq, TrUserData).

d_packed_field_C2S_MahjongChangeThree_threeCards(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, AccSeq, TrUserData)
    when N < 57 ->
    d_packed_field_C2S_MahjongChangeThree_threeCards(Rest,
						     N + 7, X bsl N + Acc,
						     AccSeq, TrUserData);
d_packed_field_C2S_MahjongChangeThree_threeCards(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    d_packed_field_C2S_MahjongChangeThree_threeCards(RestF,
						     0, 0, [NewFValue | AccSeq],
						     TrUserData);
d_packed_field_C2S_MahjongChangeThree_threeCards(<<>>,
						 0, 0, AccSeq, _) ->
    AccSeq.

skip_varint_C2S_MahjongChangeThree(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_C2S_MahjongChangeThree(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
skip_varint_C2S_MahjongChangeThree(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_C2S_MahjongChangeThree(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData).

skip_length_delimited_C2S_MahjongChangeThree(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_C2S_MahjongChangeThree(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, TrUserData);
skip_length_delimited_C2S_MahjongChangeThree(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_C2S_MahjongChangeThree(Rest2, 0, 0,
					      F@_1, F@_2, TrUserData).

skip_group_C2S_MahjongChangeThree(Bin, FNum, Z2, F@_1,
				  F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_C2S_MahjongChangeThree(Rest, 0, Z2,
					      F@_1, F@_2, TrUserData).

skip_32_C2S_MahjongChangeThree(<<_:32, Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_C2S_MahjongChangeThree(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData).

skip_64_C2S_MahjongChangeThree(<<_:64, Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_C2S_MahjongChangeThree(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData).

decode_msg_S2C_MahjongChangeThree(Bin, TrUserData) ->
    dfp_read_field_def_S2C_MahjongChangeThree(Bin, 0, 0,
					      id(undefined, TrUserData),
					      TrUserData).

dfp_read_field_def_S2C_MahjongChangeThree(<<8,
					    Rest/binary>>,
					  Z1, Z2, F@_1, TrUserData) ->
    d_field_S2C_MahjongChangeThree_changeType(Rest, Z1, Z2,
					      F@_1, TrUserData);
dfp_read_field_def_S2C_MahjongChangeThree(<<>>, 0, 0,
					  F@_1, _) ->
    #'S2C_MahjongChangeThree'{changeType = F@_1};
dfp_read_field_def_S2C_MahjongChangeThree(Other, Z1, Z2,
					  F@_1, TrUserData) ->
    dg_read_field_def_S2C_MahjongChangeThree(Other, Z1, Z2,
					     F@_1, TrUserData).

dg_read_field_def_S2C_MahjongChangeThree(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_S2C_MahjongChangeThree(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_S2C_MahjongChangeThree(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_S2C_MahjongChangeThree_changeType(Rest, 0, 0,
						    F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_S2C_MahjongChangeThree(Rest, 0, 0, F@_1,
						   TrUserData);
	    1 ->
		skip_64_S2C_MahjongChangeThree(Rest, 0, 0, F@_1,
					       TrUserData);
	    2 ->
		skip_length_delimited_S2C_MahjongChangeThree(Rest, 0, 0,
							     F@_1, TrUserData);
	    3 ->
		skip_group_S2C_MahjongChangeThree(Rest, Key bsr 3, 0,
						  F@_1, TrUserData);
	    5 ->
		skip_32_S2C_MahjongChangeThree(Rest, 0, 0, F@_1,
					       TrUserData)
	  end
    end;
dg_read_field_def_S2C_MahjongChangeThree(<<>>, 0, 0,
					 F@_1, _) ->
    #'S2C_MahjongChangeThree'{changeType = F@_1}.

d_field_S2C_MahjongChangeThree_changeType(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_S2C_MahjongChangeThree_changeType(Rest, N + 7,
					      X bsl N + Acc, F@_1, TrUserData);
d_field_S2C_MahjongChangeThree_changeType(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_S2C_MahjongChangeThree(RestF, 0, 0,
					      NewFValue, TrUserData).

skip_varint_S2C_MahjongChangeThree(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_S2C_MahjongChangeThree(Rest, Z1, Z2, F@_1,
				       TrUserData);
skip_varint_S2C_MahjongChangeThree(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_S2C_MahjongChangeThree(Rest, Z1, Z2,
					      F@_1, TrUserData).

skip_length_delimited_S2C_MahjongChangeThree(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_S2C_MahjongChangeThree(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 TrUserData);
skip_length_delimited_S2C_MahjongChangeThree(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_S2C_MahjongChangeThree(Rest2, 0, 0,
					      F@_1, TrUserData).

skip_group_S2C_MahjongChangeThree(Bin, FNum, Z2, F@_1,
				  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_S2C_MahjongChangeThree(Rest, 0, Z2,
					      F@_1, TrUserData).

skip_32_S2C_MahjongChangeThree(<<_:32, Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_S2C_MahjongChangeThree(Rest, Z1, Z2,
					      F@_1, TrUserData).

skip_64_S2C_MahjongChangeThree(<<_:64, Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_S2C_MahjongChangeThree(Rest, Z1, Z2,
					      F@_1, TrUserData).

decode_msg_C2S_MahjongDingQue(Bin, TrUserData) ->
    dfp_read_field_def_C2S_MahjongDingQue(Bin, 0, 0,
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  TrUserData).

dfp_read_field_def_C2S_MahjongDingQue(<<8,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_C2S_MahjongDingQue_seatId(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData);
dfp_read_field_def_C2S_MahjongDingQue(<<16,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_C2S_MahjongDingQue_color(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
dfp_read_field_def_C2S_MahjongDingQue(<<>>, 0, 0, F@_1,
				      F@_2, _) ->
    #'C2S_MahjongDingQue'{seatId = F@_1, color = F@_2};
dfp_read_field_def_C2S_MahjongDingQue(Other, Z1, Z2,
				      F@_1, F@_2, TrUserData) ->
    dg_read_field_def_C2S_MahjongDingQue(Other, Z1, Z2,
					 F@_1, F@_2, TrUserData).

dg_read_field_def_C2S_MahjongDingQue(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_C2S_MahjongDingQue(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_C2S_MahjongDingQue(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_C2S_MahjongDingQue_seatId(Rest, 0, 0, F@_1,
					    F@_2, TrUserData);
      16 ->
	  d_field_C2S_MahjongDingQue_color(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_C2S_MahjongDingQue(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    1 ->
		skip_64_C2S_MahjongDingQue(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    2 ->
		skip_length_delimited_C2S_MahjongDingQue(Rest, 0, 0,
							 F@_1, F@_2,
							 TrUserData);
	    3 ->
		skip_group_C2S_MahjongDingQue(Rest, Key bsr 3, 0, F@_1,
					      F@_2, TrUserData);
	    5 ->
		skip_32_C2S_MahjongDingQue(Rest, 0, 0, F@_1, F@_2,
					   TrUserData)
	  end
    end;
dg_read_field_def_C2S_MahjongDingQue(<<>>, 0, 0, F@_1,
				     F@_2, _) ->
    #'C2S_MahjongDingQue'{seatId = F@_1, color = F@_2}.

d_field_C2S_MahjongDingQue_seatId(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_C2S_MahjongDingQue_seatId(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_C2S_MahjongDingQue_seatId(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_C2S_MahjongDingQue(RestF, 0, 0,
					  NewFValue, F@_2, TrUserData).

d_field_C2S_MahjongDingQue_color(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_C2S_MahjongDingQue_color(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_C2S_MahjongDingQue_color(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_C2S_MahjongDingQue(RestF, 0, 0, F@_1,
					  NewFValue, TrUserData).

skip_varint_C2S_MahjongDingQue(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_C2S_MahjongDingQue(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
skip_varint_C2S_MahjongDingQue(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_C2S_MahjongDingQue(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

skip_length_delimited_C2S_MahjongDingQue(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_C2S_MahjongDingQue(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2,
					     TrUserData);
skip_length_delimited_C2S_MahjongDingQue(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_C2S_MahjongDingQue(Rest2, 0, 0, F@_1,
					  F@_2, TrUserData).

skip_group_C2S_MahjongDingQue(Bin, FNum, Z2, F@_1, F@_2,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_C2S_MahjongDingQue(Rest, 0, Z2, F@_1,
					  F@_2, TrUserData).

skip_32_C2S_MahjongDingQue(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_C2S_MahjongDingQue(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

skip_64_C2S_MahjongDingQue(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_C2S_MahjongDingQue(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

decode_msg_Struct_MahjongDingQueBrief(Bin,
				      TrUserData) ->
    dfp_read_field_def_Struct_MahjongDingQueBrief(Bin, 0, 0,
						  id(undefined, TrUserData),
						  id(undefined, TrUserData),
						  TrUserData).

dfp_read_field_def_Struct_MahjongDingQueBrief(<<10,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_Struct_MahjongDingQueBrief_id(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData);
dfp_read_field_def_Struct_MahjongDingQueBrief(<<16,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_Struct_MahjongDingQueBrief_color(Rest, Z1, Z2,
					     F@_1, F@_2, TrUserData);
dfp_read_field_def_Struct_MahjongDingQueBrief(<<>>, 0,
					      0, F@_1, F@_2, _) ->
    #'Struct_MahjongDingQueBrief'{id = F@_1, color = F@_2};
dfp_read_field_def_Struct_MahjongDingQueBrief(Other, Z1,
					      Z2, F@_1, F@_2, TrUserData) ->
    dg_read_field_def_Struct_MahjongDingQueBrief(Other, Z1,
						 Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_Struct_MahjongDingQueBrief(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Struct_MahjongDingQueBrief(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, TrUserData);
dg_read_field_def_Struct_MahjongDingQueBrief(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Struct_MahjongDingQueBrief_id(Rest, 0, 0, F@_1,
						F@_2, TrUserData);
      16 ->
	  d_field_Struct_MahjongDingQueBrief_color(Rest, 0, 0,
						   F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Struct_MahjongDingQueBrief(Rest, 0, 0, F@_1,
						       F@_2, TrUserData);
	    1 ->
		skip_64_Struct_MahjongDingQueBrief(Rest, 0, 0, F@_1,
						   F@_2, TrUserData);
	    2 ->
		skip_length_delimited_Struct_MahjongDingQueBrief(Rest,
								 0, 0, F@_1,
								 F@_2,
								 TrUserData);
	    3 ->
		skip_group_Struct_MahjongDingQueBrief(Rest, Key bsr 3,
						      0, F@_1, F@_2,
						      TrUserData);
	    5 ->
		skip_32_Struct_MahjongDingQueBrief(Rest, 0, 0, F@_1,
						   F@_2, TrUserData)
	  end
    end;
dg_read_field_def_Struct_MahjongDingQueBrief(<<>>, 0, 0,
					     F@_1, F@_2, _) ->
    #'Struct_MahjongDingQueBrief'{id = F@_1, color = F@_2}.

d_field_Struct_MahjongDingQueBrief_id(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Struct_MahjongDingQueBrief_id(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
d_field_Struct_MahjongDingQueBrief_id(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Struct_MahjongDingQueBrief(RestF, 0,
						  0, NewFValue, F@_2,
						  TrUserData).

d_field_Struct_MahjongDingQueBrief_color(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Struct_MahjongDingQueBrief_color(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2,
					     TrUserData);
d_field_Struct_MahjongDingQueBrief_color(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_Struct_MahjongDingQueBrief(RestF, 0,
						  0, F@_1, NewFValue,
						  TrUserData).

skip_varint_Struct_MahjongDingQueBrief(<<1:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_Struct_MahjongDingQueBrief(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData);
skip_varint_Struct_MahjongDingQueBrief(<<0:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_Struct_MahjongDingQueBrief(Rest, Z1,
						  Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_Struct_MahjongDingQueBrief(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_Struct_MahjongDingQueBrief(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, TrUserData);
skip_length_delimited_Struct_MahjongDingQueBrief(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2,
						 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Struct_MahjongDingQueBrief(Rest2, 0,
						  0, F@_1, F@_2, TrUserData).

skip_group_Struct_MahjongDingQueBrief(Bin, FNum, Z2,
				      F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Struct_MahjongDingQueBrief(Rest, 0,
						  Z2, F@_1, F@_2, TrUserData).

skip_32_Struct_MahjongDingQueBrief(<<_:32,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_Struct_MahjongDingQueBrief(Rest, Z1,
						  Z2, F@_1, F@_2, TrUserData).

skip_64_Struct_MahjongDingQueBrief(<<_:64,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_Struct_MahjongDingQueBrief(Rest, Z1,
						  Z2, F@_1, F@_2, TrUserData).

decode_msg_S2C_MahjongDingQue(Bin, TrUserData) ->
    dfp_read_field_def_S2C_MahjongDingQue(Bin, 0, 0,
					  id([], TrUserData), TrUserData).

dfp_read_field_def_S2C_MahjongDingQue(<<18,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    d_field_S2C_MahjongDingQue_players(Rest, Z1, Z2, F@_1,
				       TrUserData);
dfp_read_field_def_S2C_MahjongDingQue(<<>>, 0, 0, R1,
				      TrUserData) ->
    #'S2C_MahjongDingQue'{players =
			      lists_reverse(R1, TrUserData)};
dfp_read_field_def_S2C_MahjongDingQue(Other, Z1, Z2,
				      F@_1, TrUserData) ->
    dg_read_field_def_S2C_MahjongDingQue(Other, Z1, Z2,
					 F@_1, TrUserData).

dg_read_field_def_S2C_MahjongDingQue(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_S2C_MahjongDingQue(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_S2C_MahjongDingQue(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      18 ->
	  d_field_S2C_MahjongDingQue_players(Rest, 0, 0, F@_1,
					     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_S2C_MahjongDingQue(Rest, 0, 0, F@_1,
					       TrUserData);
	    1 ->
		skip_64_S2C_MahjongDingQue(Rest, 0, 0, F@_1,
					   TrUserData);
	    2 ->
		skip_length_delimited_S2C_MahjongDingQue(Rest, 0, 0,
							 F@_1, TrUserData);
	    3 ->
		skip_group_S2C_MahjongDingQue(Rest, Key bsr 3, 0, F@_1,
					      TrUserData);
	    5 ->
		skip_32_S2C_MahjongDingQue(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_S2C_MahjongDingQue(<<>>, 0, 0, R1,
				     TrUserData) ->
    #'S2C_MahjongDingQue'{players =
			      lists_reverse(R1, TrUserData)}.

d_field_S2C_MahjongDingQue_players(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_S2C_MahjongDingQue_players(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
d_field_S2C_MahjongDingQue_players(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_Struct_MahjongDingQueBrief(Bs,
								     TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_S2C_MahjongDingQue(RestF, 0, 0,
					  cons(NewFValue, Prev, TrUserData),
					  TrUserData).

skip_varint_S2C_MahjongDingQue(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    skip_varint_S2C_MahjongDingQue(Rest, Z1, Z2, F@_1,
				   TrUserData);
skip_varint_S2C_MahjongDingQue(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_S2C_MahjongDingQue(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_length_delimited_S2C_MahjongDingQue(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_S2C_MahjongDingQue(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_S2C_MahjongDingQue(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_S2C_MahjongDingQue(Rest2, 0, 0, F@_1,
					  TrUserData).

skip_group_S2C_MahjongDingQue(Bin, FNum, Z2, F@_1,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_S2C_MahjongDingQue(Rest, 0, Z2, F@_1,
					  TrUserData).

skip_32_S2C_MahjongDingQue(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_S2C_MahjongDingQue(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_64_S2C_MahjongDingQue(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_S2C_MahjongDingQue(Rest, Z1, Z2,
					  F@_1, TrUserData).

decode_msg_C2S_MahjongNextGame(Bin, TrUserData) ->
    dfp_read_field_def_C2S_MahjongNextGame(Bin, 0, 0,
					   TrUserData).

dfp_read_field_def_C2S_MahjongNextGame(<<>>, 0, 0, _) ->
    #'C2S_MahjongNextGame'{};
dfp_read_field_def_C2S_MahjongNextGame(Other, Z1, Z2,
				       TrUserData) ->
    dg_read_field_def_C2S_MahjongNextGame(Other, Z1, Z2,
					  TrUserData).

dg_read_field_def_C2S_MahjongNextGame(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_C2S_MahjongNextGame(Rest, N + 7,
					  X bsl N + Acc, TrUserData);
dg_read_field_def_C2S_MahjongNextGame(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_C2S_MahjongNextGame(Rest, 0, 0, TrUserData);
      1 ->
	  skip_64_C2S_MahjongNextGame(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_C2S_MahjongNextGame(Rest, 0, 0,
						    TrUserData);
      3 ->
	  skip_group_C2S_MahjongNextGame(Rest, Key bsr 3, 0,
					 TrUserData);
      5 -> skip_32_C2S_MahjongNextGame(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_C2S_MahjongNextGame(<<>>, 0, 0, _) ->
    #'C2S_MahjongNextGame'{}.

skip_varint_C2S_MahjongNextGame(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, TrUserData) ->
    skip_varint_C2S_MahjongNextGame(Rest, Z1, Z2,
				    TrUserData);
skip_varint_C2S_MahjongNextGame(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, TrUserData) ->
    dfp_read_field_def_C2S_MahjongNextGame(Rest, Z1, Z2,
					   TrUserData).

skip_length_delimited_C2S_MahjongNextGame(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_C2S_MahjongNextGame(Rest, N + 7,
					      X bsl N + Acc, TrUserData);
skip_length_delimited_C2S_MahjongNextGame(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_C2S_MahjongNextGame(Rest2, 0, 0,
					   TrUserData).

skip_group_C2S_MahjongNextGame(Bin, FNum, Z2,
			       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_C2S_MahjongNextGame(Rest, 0, Z2,
					   TrUserData).

skip_32_C2S_MahjongNextGame(<<_:32, Rest/binary>>, Z1,
			    Z2, TrUserData) ->
    dfp_read_field_def_C2S_MahjongNextGame(Rest, Z1, Z2,
					   TrUserData).

skip_64_C2S_MahjongNextGame(<<_:64, Rest/binary>>, Z1,
			    Z2, TrUserData) ->
    dfp_read_field_def_C2S_MahjongNextGame(Rest, Z1, Z2,
					   TrUserData).

decode_msg_S2C_MahjongNextGame(Bin, TrUserData) ->
    dfp_read_field_def_S2C_MahjongNextGame(Bin, 0, 0,
					   id(undefined, TrUserData),
					   TrUserData).

dfp_read_field_def_S2C_MahjongNextGame(<<8,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    d_field_S2C_MahjongNextGame_currentround(Rest, Z1, Z2,
					     F@_1, TrUserData);
dfp_read_field_def_S2C_MahjongNextGame(<<>>, 0, 0, F@_1,
				       _) ->
    #'S2C_MahjongNextGame'{currentround = F@_1};
dfp_read_field_def_S2C_MahjongNextGame(Other, Z1, Z2,
				       F@_1, TrUserData) ->
    dg_read_field_def_S2C_MahjongNextGame(Other, Z1, Z2,
					  F@_1, TrUserData).

dg_read_field_def_S2C_MahjongNextGame(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_S2C_MahjongNextGame(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_S2C_MahjongNextGame(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_S2C_MahjongNextGame_currentround(Rest, 0, 0,
						   F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_S2C_MahjongNextGame(Rest, 0, 0, F@_1,
						TrUserData);
	    1 ->
		skip_64_S2C_MahjongNextGame(Rest, 0, 0, F@_1,
					    TrUserData);
	    2 ->
		skip_length_delimited_S2C_MahjongNextGame(Rest, 0, 0,
							  F@_1, TrUserData);
	    3 ->
		skip_group_S2C_MahjongNextGame(Rest, Key bsr 3, 0, F@_1,
					       TrUserData);
	    5 ->
		skip_32_S2C_MahjongNextGame(Rest, 0, 0, F@_1,
					    TrUserData)
	  end
    end;
dg_read_field_def_S2C_MahjongNextGame(<<>>, 0, 0, F@_1,
				      _) ->
    #'S2C_MahjongNextGame'{currentround = F@_1}.

d_field_S2C_MahjongNextGame_currentround(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_S2C_MahjongNextGame_currentround(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
d_field_S2C_MahjongNextGame_currentround(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_S2C_MahjongNextGame(RestF, 0, 0,
					   NewFValue, TrUserData).

skip_varint_S2C_MahjongNextGame(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    skip_varint_S2C_MahjongNextGame(Rest, Z1, Z2, F@_1,
				    TrUserData);
skip_varint_S2C_MahjongNextGame(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_S2C_MahjongNextGame(Rest, Z1, Z2,
					   F@_1, TrUserData).

skip_length_delimited_S2C_MahjongNextGame(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_S2C_MahjongNextGame(Rest, N + 7,
					      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_S2C_MahjongNextGame(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_S2C_MahjongNextGame(Rest2, 0, 0,
					   F@_1, TrUserData).

skip_group_S2C_MahjongNextGame(Bin, FNum, Z2, F@_1,
			       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_S2C_MahjongNextGame(Rest, 0, Z2,
					   F@_1, TrUserData).

skip_32_S2C_MahjongNextGame(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, TrUserData) ->
    dfp_read_field_def_S2C_MahjongNextGame(Rest, Z1, Z2,
					   F@_1, TrUserData).

skip_64_S2C_MahjongNextGame(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, TrUserData) ->
    dfp_read_field_def_S2C_MahjongNextGame(Rest, Z1, Z2,
					   F@_1, TrUserData).

decode_msg_S2C_MahjongNoPrepare(Bin, TrUserData) ->
    dfp_read_field_def_S2C_MahjongNoPrepare(Bin, 0, 0,
					    TrUserData).

dfp_read_field_def_S2C_MahjongNoPrepare(<<>>, 0, 0,
					_) ->
    #'S2C_MahjongNoPrepare'{};
dfp_read_field_def_S2C_MahjongNoPrepare(Other, Z1, Z2,
					TrUserData) ->
    dg_read_field_def_S2C_MahjongNoPrepare(Other, Z1, Z2,
					   TrUserData).

dg_read_field_def_S2C_MahjongNoPrepare(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_S2C_MahjongNoPrepare(Rest, N + 7,
					   X bsl N + Acc, TrUserData);
dg_read_field_def_S2C_MahjongNoPrepare(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_S2C_MahjongNoPrepare(Rest, 0, 0,
					   TrUserData);
      1 ->
	  skip_64_S2C_MahjongNoPrepare(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_S2C_MahjongNoPrepare(Rest, 0, 0,
						     TrUserData);
      3 ->
	  skip_group_S2C_MahjongNoPrepare(Rest, Key bsr 3, 0,
					  TrUserData);
      5 ->
	  skip_32_S2C_MahjongNoPrepare(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_S2C_MahjongNoPrepare(<<>>, 0, 0, _) ->
    #'S2C_MahjongNoPrepare'{}.

skip_varint_S2C_MahjongNoPrepare(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, TrUserData) ->
    skip_varint_S2C_MahjongNoPrepare(Rest, Z1, Z2,
				     TrUserData);
skip_varint_S2C_MahjongNoPrepare(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, TrUserData) ->
    dfp_read_field_def_S2C_MahjongNoPrepare(Rest, Z1, Z2,
					    TrUserData).

skip_length_delimited_S2C_MahjongNoPrepare(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_S2C_MahjongNoPrepare(Rest, N + 7,
					       X bsl N + Acc, TrUserData);
skip_length_delimited_S2C_MahjongNoPrepare(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_S2C_MahjongNoPrepare(Rest2, 0, 0,
					    TrUserData).

skip_group_S2C_MahjongNoPrepare(Bin, FNum, Z2,
				TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_S2C_MahjongNoPrepare(Rest, 0, Z2,
					    TrUserData).

skip_32_S2C_MahjongNoPrepare(<<_:32, Rest/binary>>, Z1,
			     Z2, TrUserData) ->
    dfp_read_field_def_S2C_MahjongNoPrepare(Rest, Z1, Z2,
					    TrUserData).

skip_64_S2C_MahjongNoPrepare(<<_:64, Rest/binary>>, Z1,
			     Z2, TrUserData) ->
    dfp_read_field_def_S2C_MahjongNoPrepare(Rest, Z1, Z2,
					    TrUserData).

decode_msg_S2C_MahjongNoOwner(Bin, TrUserData) ->
    dfp_read_field_def_S2C_MahjongNoOwner(Bin, 0, 0,
					  TrUserData).

dfp_read_field_def_S2C_MahjongNoOwner(<<>>, 0, 0, _) ->
    #'S2C_MahjongNoOwner'{};
dfp_read_field_def_S2C_MahjongNoOwner(Other, Z1, Z2,
				      TrUserData) ->
    dg_read_field_def_S2C_MahjongNoOwner(Other, Z1, Z2,
					 TrUserData).

dg_read_field_def_S2C_MahjongNoOwner(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_S2C_MahjongNoOwner(Rest, N + 7,
					 X bsl N + Acc, TrUserData);
dg_read_field_def_S2C_MahjongNoOwner(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_S2C_MahjongNoOwner(Rest, 0, 0, TrUserData);
      1 -> skip_64_S2C_MahjongNoOwner(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_S2C_MahjongNoOwner(Rest, 0, 0,
						   TrUserData);
      3 ->
	  skip_group_S2C_MahjongNoOwner(Rest, Key bsr 3, 0,
					TrUserData);
      5 -> skip_32_S2C_MahjongNoOwner(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_S2C_MahjongNoOwner(<<>>, 0, 0, _) ->
    #'S2C_MahjongNoOwner'{}.

skip_varint_S2C_MahjongNoOwner(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    skip_varint_S2C_MahjongNoOwner(Rest, Z1, Z2,
				   TrUserData);
skip_varint_S2C_MahjongNoOwner(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    dfp_read_field_def_S2C_MahjongNoOwner(Rest, Z1, Z2,
					  TrUserData).

skip_length_delimited_S2C_MahjongNoOwner(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_S2C_MahjongNoOwner(Rest, N + 7,
					     X bsl N + Acc, TrUserData);
skip_length_delimited_S2C_MahjongNoOwner(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_S2C_MahjongNoOwner(Rest2, 0, 0,
					  TrUserData).

skip_group_S2C_MahjongNoOwner(Bin, FNum, Z2,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_S2C_MahjongNoOwner(Rest, 0, Z2,
					  TrUserData).

skip_32_S2C_MahjongNoOwner(<<_:32, Rest/binary>>, Z1,
			   Z2, TrUserData) ->
    dfp_read_field_def_S2C_MahjongNoOwner(Rest, Z1, Z2,
					  TrUserData).

skip_64_S2C_MahjongNoOwner(<<_:64, Rest/binary>>, Z1,
			   Z2, TrUserData) ->
    dfp_read_field_def_S2C_MahjongNoOwner(Rest, Z1, Z2,
					  TrUserData).

decode_msg_S2C_MahjongHaveNoPrepare(Bin, TrUserData) ->
    dfp_read_field_def_S2C_MahjongHaveNoPrepare(Bin, 0, 0,
						TrUserData).

dfp_read_field_def_S2C_MahjongHaveNoPrepare(<<>>, 0, 0,
					    _) ->
    #'S2C_MahjongHaveNoPrepare'{};
dfp_read_field_def_S2C_MahjongHaveNoPrepare(Other, Z1,
					    Z2, TrUserData) ->
    dg_read_field_def_S2C_MahjongHaveNoPrepare(Other, Z1,
					       Z2, TrUserData).

dg_read_field_def_S2C_MahjongHaveNoPrepare(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_S2C_MahjongHaveNoPrepare(Rest, N + 7,
					       X bsl N + Acc, TrUserData);
dg_read_field_def_S2C_MahjongHaveNoPrepare(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_S2C_MahjongHaveNoPrepare(Rest, 0, 0,
					       TrUserData);
      1 ->
	  skip_64_S2C_MahjongHaveNoPrepare(Rest, 0, 0,
					   TrUserData);
      2 ->
	  skip_length_delimited_S2C_MahjongHaveNoPrepare(Rest, 0,
							 0, TrUserData);
      3 ->
	  skip_group_S2C_MahjongHaveNoPrepare(Rest, Key bsr 3, 0,
					      TrUserData);
      5 ->
	  skip_32_S2C_MahjongHaveNoPrepare(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_S2C_MahjongHaveNoPrepare(<<>>, 0, 0,
					   _) ->
    #'S2C_MahjongHaveNoPrepare'{}.

skip_varint_S2C_MahjongHaveNoPrepare(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, TrUserData) ->
    skip_varint_S2C_MahjongHaveNoPrepare(Rest, Z1, Z2,
					 TrUserData);
skip_varint_S2C_MahjongHaveNoPrepare(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, TrUserData) ->
    dfp_read_field_def_S2C_MahjongHaveNoPrepare(Rest, Z1,
						Z2, TrUserData).

skip_length_delimited_S2C_MahjongHaveNoPrepare(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_S2C_MahjongHaveNoPrepare(Rest,
						   N + 7, X bsl N + Acc,
						   TrUserData);
skip_length_delimited_S2C_MahjongHaveNoPrepare(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_S2C_MahjongHaveNoPrepare(Rest2, 0, 0,
						TrUserData).

skip_group_S2C_MahjongHaveNoPrepare(Bin, FNum, Z2,
				    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_S2C_MahjongHaveNoPrepare(Rest, 0, Z2,
						TrUserData).

skip_32_S2C_MahjongHaveNoPrepare(<<_:32, Rest/binary>>,
				 Z1, Z2, TrUserData) ->
    dfp_read_field_def_S2C_MahjongHaveNoPrepare(Rest, Z1,
						Z2, TrUserData).

skip_64_S2C_MahjongHaveNoPrepare(<<_:64, Rest/binary>>,
				 Z1, Z2, TrUserData) ->
    dfp_read_field_def_S2C_MahjongHaveNoPrepare(Rest, Z1,
						Z2, TrUserData).

decode_msg_S2C_MahjongFinishChangeThree(Bin,
					TrUserData) ->
    dfp_read_field_def_S2C_MahjongFinishChangeThree(Bin, 0,
						    0,
						    id(undefined, TrUserData),
						    TrUserData).

dfp_read_field_def_S2C_MahjongFinishChangeThree(<<10,
						  Rest/binary>>,
						Z1, Z2, F@_1, TrUserData) ->
    d_field_S2C_MahjongFinishChangeThree_id(Rest, Z1, Z2,
					    F@_1, TrUserData);
dfp_read_field_def_S2C_MahjongFinishChangeThree(<<>>, 0,
						0, F@_1, _) ->
    #'S2C_MahjongFinishChangeThree'{id = F@_1};
dfp_read_field_def_S2C_MahjongFinishChangeThree(Other,
						Z1, Z2, F@_1, TrUserData) ->
    dg_read_field_def_S2C_MahjongFinishChangeThree(Other,
						   Z1, Z2, F@_1, TrUserData).

dg_read_field_def_S2C_MahjongFinishChangeThree(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_S2C_MahjongFinishChangeThree(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   TrUserData);
dg_read_field_def_S2C_MahjongFinishChangeThree(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_S2C_MahjongFinishChangeThree_id(Rest, 0, 0,
						  F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_S2C_MahjongFinishChangeThree(Rest, 0, 0,
							 F@_1, TrUserData);
	    1 ->
		skip_64_S2C_MahjongFinishChangeThree(Rest, 0, 0, F@_1,
						     TrUserData);
	    2 ->
		skip_length_delimited_S2C_MahjongFinishChangeThree(Rest,
								   0, 0, F@_1,
								   TrUserData);
	    3 ->
		skip_group_S2C_MahjongFinishChangeThree(Rest, Key bsr 3,
							0, F@_1, TrUserData);
	    5 ->
		skip_32_S2C_MahjongFinishChangeThree(Rest, 0, 0, F@_1,
						     TrUserData)
	  end
    end;
dg_read_field_def_S2C_MahjongFinishChangeThree(<<>>, 0,
					       0, F@_1, _) ->
    #'S2C_MahjongFinishChangeThree'{id = F@_1}.

d_field_S2C_MahjongFinishChangeThree_id(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_S2C_MahjongFinishChangeThree_id(Rest, N + 7,
					    X bsl N + Acc, F@_1, TrUserData);
d_field_S2C_MahjongFinishChangeThree_id(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_S2C_MahjongFinishChangeThree(RestF,
						    0, 0, NewFValue,
						    TrUserData).

skip_varint_S2C_MahjongFinishChangeThree(<<1:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, F@_1, TrUserData) ->
    skip_varint_S2C_MahjongFinishChangeThree(Rest, Z1, Z2,
					     F@_1, TrUserData);
skip_varint_S2C_MahjongFinishChangeThree(<<0:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_S2C_MahjongFinishChangeThree(Rest,
						    Z1, Z2, F@_1, TrUserData).

skip_length_delimited_S2C_MahjongFinishChangeThree(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_S2C_MahjongFinishChangeThree(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, TrUserData);
skip_length_delimited_S2C_MahjongFinishChangeThree(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_S2C_MahjongFinishChangeThree(Rest2,
						    0, 0, F@_1, TrUserData).

skip_group_S2C_MahjongFinishChangeThree(Bin, FNum, Z2,
					F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_S2C_MahjongFinishChangeThree(Rest, 0,
						    Z2, F@_1, TrUserData).

skip_32_S2C_MahjongFinishChangeThree(<<_:32,
				       Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_S2C_MahjongFinishChangeThree(Rest,
						    Z1, Z2, F@_1, TrUserData).

skip_64_S2C_MahjongFinishChangeThree(<<_:64,
				       Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_S2C_MahjongFinishChangeThree(Rest,
						    Z1, Z2, F@_1, TrUserData).

decode_msg_S2C_MahjongFinishDingQue(Bin, TrUserData) ->
    dfp_read_field_def_S2C_MahjongFinishDingQue(Bin, 0, 0,
						id(undefined, TrUserData),
						TrUserData).

dfp_read_field_def_S2C_MahjongFinishDingQue(<<10,
					      Rest/binary>>,
					    Z1, Z2, F@_1, TrUserData) ->
    d_field_S2C_MahjongFinishDingQue_id(Rest, Z1, Z2, F@_1,
					TrUserData);
dfp_read_field_def_S2C_MahjongFinishDingQue(<<>>, 0, 0,
					    F@_1, _) ->
    #'S2C_MahjongFinishDingQue'{id = F@_1};
dfp_read_field_def_S2C_MahjongFinishDingQue(Other, Z1,
					    Z2, F@_1, TrUserData) ->
    dg_read_field_def_S2C_MahjongFinishDingQue(Other, Z1,
					       Z2, F@_1, TrUserData).

dg_read_field_def_S2C_MahjongFinishDingQue(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_S2C_MahjongFinishDingQue(Rest, N + 7,
					       X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_S2C_MahjongFinishDingQue(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_S2C_MahjongFinishDingQue_id(Rest, 0, 0, F@_1,
					      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_S2C_MahjongFinishDingQue(Rest, 0, 0, F@_1,
						     TrUserData);
	    1 ->
		skip_64_S2C_MahjongFinishDingQue(Rest, 0, 0, F@_1,
						 TrUserData);
	    2 ->
		skip_length_delimited_S2C_MahjongFinishDingQue(Rest, 0,
							       0, F@_1,
							       TrUserData);
	    3 ->
		skip_group_S2C_MahjongFinishDingQue(Rest, Key bsr 3, 0,
						    F@_1, TrUserData);
	    5 ->
		skip_32_S2C_MahjongFinishDingQue(Rest, 0, 0, F@_1,
						 TrUserData)
	  end
    end;
dg_read_field_def_S2C_MahjongFinishDingQue(<<>>, 0, 0,
					   F@_1, _) ->
    #'S2C_MahjongFinishDingQue'{id = F@_1}.

d_field_S2C_MahjongFinishDingQue_id(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_S2C_MahjongFinishDingQue_id(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
d_field_S2C_MahjongFinishDingQue_id(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_S2C_MahjongFinishDingQue(RestF, 0, 0,
						NewFValue, TrUserData).

skip_varint_S2C_MahjongFinishDingQue(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    skip_varint_S2C_MahjongFinishDingQue(Rest, Z1, Z2, F@_1,
					 TrUserData);
skip_varint_S2C_MahjongFinishDingQue(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_S2C_MahjongFinishDingQue(Rest, Z1,
						Z2, F@_1, TrUserData).

skip_length_delimited_S2C_MahjongFinishDingQue(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_S2C_MahjongFinishDingQue(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   TrUserData);
skip_length_delimited_S2C_MahjongFinishDingQue(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_S2C_MahjongFinishDingQue(Rest2, 0, 0,
						F@_1, TrUserData).

skip_group_S2C_MahjongFinishDingQue(Bin, FNum, Z2, F@_1,
				    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_S2C_MahjongFinishDingQue(Rest, 0, Z2,
						F@_1, TrUserData).

skip_32_S2C_MahjongFinishDingQue(<<_:32, Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_S2C_MahjongFinishDingQue(Rest, Z1,
						Z2, F@_1, TrUserData).

skip_64_S2C_MahjongFinishDingQue(<<_:64, Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_S2C_MahjongFinishDingQue(Rest, Z1,
						Z2, F@_1, TrUserData).

decode_msg_S2C_MahjongNoPongs(Bin, TrUserData) ->
    dfp_read_field_def_S2C_MahjongNoPongs(Bin, 0, 0,
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  TrUserData).

dfp_read_field_def_S2C_MahjongNoPongs(<<8,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_S2C_MahjongNoPongs_seatId(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData);
dfp_read_field_def_S2C_MahjongNoPongs(<<16,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_S2C_MahjongNoPongs_cardId(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData);
dfp_read_field_def_S2C_MahjongNoPongs(<<>>, 0, 0, F@_1,
				      F@_2, _) ->
    #'S2C_MahjongNoPongs'{seatId = F@_1, cardId = F@_2};
dfp_read_field_def_S2C_MahjongNoPongs(Other, Z1, Z2,
				      F@_1, F@_2, TrUserData) ->
    dg_read_field_def_S2C_MahjongNoPongs(Other, Z1, Z2,
					 F@_1, F@_2, TrUserData).

dg_read_field_def_S2C_MahjongNoPongs(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_S2C_MahjongNoPongs(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_S2C_MahjongNoPongs(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_S2C_MahjongNoPongs_seatId(Rest, 0, 0, F@_1,
					    F@_2, TrUserData);
      16 ->
	  d_field_S2C_MahjongNoPongs_cardId(Rest, 0, 0, F@_1,
					    F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_S2C_MahjongNoPongs(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    1 ->
		skip_64_S2C_MahjongNoPongs(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    2 ->
		skip_length_delimited_S2C_MahjongNoPongs(Rest, 0, 0,
							 F@_1, F@_2,
							 TrUserData);
	    3 ->
		skip_group_S2C_MahjongNoPongs(Rest, Key bsr 3, 0, F@_1,
					      F@_2, TrUserData);
	    5 ->
		skip_32_S2C_MahjongNoPongs(Rest, 0, 0, F@_1, F@_2,
					   TrUserData)
	  end
    end;
dg_read_field_def_S2C_MahjongNoPongs(<<>>, 0, 0, F@_1,
				     F@_2, _) ->
    #'S2C_MahjongNoPongs'{seatId = F@_1, cardId = F@_2}.

d_field_S2C_MahjongNoPongs_seatId(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_S2C_MahjongNoPongs_seatId(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_S2C_MahjongNoPongs_seatId(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_S2C_MahjongNoPongs(RestF, 0, 0,
					  NewFValue, F@_2, TrUserData).

d_field_S2C_MahjongNoPongs_cardId(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_S2C_MahjongNoPongs_cardId(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_S2C_MahjongNoPongs_cardId(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_S2C_MahjongNoPongs(RestF, 0, 0, F@_1,
					  NewFValue, TrUserData).

skip_varint_S2C_MahjongNoPongs(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_S2C_MahjongNoPongs(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
skip_varint_S2C_MahjongNoPongs(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_S2C_MahjongNoPongs(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

skip_length_delimited_S2C_MahjongNoPongs(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_S2C_MahjongNoPongs(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2,
					     TrUserData);
skip_length_delimited_S2C_MahjongNoPongs(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_S2C_MahjongNoPongs(Rest2, 0, 0, F@_1,
					  F@_2, TrUserData).

skip_group_S2C_MahjongNoPongs(Bin, FNum, Z2, F@_1, F@_2,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_S2C_MahjongNoPongs(Rest, 0, Z2, F@_1,
					  F@_2, TrUserData).

skip_32_S2C_MahjongNoPongs(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_S2C_MahjongNoPongs(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

skip_64_S2C_MahjongNoPongs(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_S2C_MahjongNoPongs(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

decode_msg_S2C_MahjongNoKong(Bin, TrUserData) ->
    dfp_read_field_def_S2C_MahjongNoKong(Bin, 0, 0,
					 id(undefined, TrUserData),
					 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_S2C_MahjongNoKong(<<8, Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_S2C_MahjongNoKong_seatId(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
dfp_read_field_def_S2C_MahjongNoKong(<<16,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_S2C_MahjongNoKong_cardId(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
dfp_read_field_def_S2C_MahjongNoKong(<<>>, 0, 0, F@_1,
				     F@_2, _) ->
    #'S2C_MahjongNoKong'{seatId = F@_1, cardId = F@_2};
dfp_read_field_def_S2C_MahjongNoKong(Other, Z1, Z2,
				     F@_1, F@_2, TrUserData) ->
    dg_read_field_def_S2C_MahjongNoKong(Other, Z1, Z2, F@_1,
					F@_2, TrUserData).

dg_read_field_def_S2C_MahjongNoKong(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_S2C_MahjongNoKong(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_S2C_MahjongNoKong(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_S2C_MahjongNoKong_seatId(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      16 ->
	  d_field_S2C_MahjongNoKong_cardId(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_S2C_MahjongNoKong(Rest, 0, 0, F@_1, F@_2,
					      TrUserData);
	    1 ->
		skip_64_S2C_MahjongNoKong(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
	    2 ->
		skip_length_delimited_S2C_MahjongNoKong(Rest, 0, 0,
							F@_1, F@_2, TrUserData);
	    3 ->
		skip_group_S2C_MahjongNoKong(Rest, Key bsr 3, 0, F@_1,
					     F@_2, TrUserData);
	    5 ->
		skip_32_S2C_MahjongNoKong(Rest, 0, 0, F@_1, F@_2,
					  TrUserData)
	  end
    end;
dg_read_field_def_S2C_MahjongNoKong(<<>>, 0, 0, F@_1,
				    F@_2, _) ->
    #'S2C_MahjongNoKong'{seatId = F@_1, cardId = F@_2}.

d_field_S2C_MahjongNoKong_seatId(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_S2C_MahjongNoKong_seatId(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_S2C_MahjongNoKong_seatId(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_S2C_MahjongNoKong(RestF, 0, 0,
					 NewFValue, F@_2, TrUserData).

d_field_S2C_MahjongNoKong_cardId(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_S2C_MahjongNoKong_cardId(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_S2C_MahjongNoKong_cardId(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_S2C_MahjongNoKong(RestF, 0, 0, F@_1,
					 NewFValue, TrUserData).

skip_varint_S2C_MahjongNoKong(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_S2C_MahjongNoKong(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData);
skip_varint_S2C_MahjongNoKong(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_S2C_MahjongNoKong(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

skip_length_delimited_S2C_MahjongNoKong(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_S2C_MahjongNoKong(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2,
					    TrUserData);
skip_length_delimited_S2C_MahjongNoKong(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_S2C_MahjongNoKong(Rest2, 0, 0, F@_1,
					 F@_2, TrUserData).

skip_group_S2C_MahjongNoKong(Bin, FNum, Z2, F@_1, F@_2,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_S2C_MahjongNoKong(Rest, 0, Z2, F@_1,
					 F@_2, TrUserData).

skip_32_S2C_MahjongNoKong(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_S2C_MahjongNoKong(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

skip_64_S2C_MahjongNoKong(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_S2C_MahjongNoKong(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

decode_msg_S2C_MahjongNoZimo(Bin, TrUserData) ->
    dfp_read_field_def_S2C_MahjongNoZimo(Bin, 0, 0,
					 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_S2C_MahjongNoZimo(<<8, Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    d_field_S2C_MahjongNoZimo_seatId(Rest, Z1, Z2, F@_1,
				     TrUserData);
dfp_read_field_def_S2C_MahjongNoZimo(<<>>, 0, 0, F@_1,
				     _) ->
    #'S2C_MahjongNoZimo'{seatId = F@_1};
dfp_read_field_def_S2C_MahjongNoZimo(Other, Z1, Z2,
				     F@_1, TrUserData) ->
    dg_read_field_def_S2C_MahjongNoZimo(Other, Z1, Z2, F@_1,
					TrUserData).

dg_read_field_def_S2C_MahjongNoZimo(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_S2C_MahjongNoZimo(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_S2C_MahjongNoZimo(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_S2C_MahjongNoZimo_seatId(Rest, 0, 0, F@_1,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_S2C_MahjongNoZimo(Rest, 0, 0, F@_1,
					      TrUserData);
	    1 ->
		skip_64_S2C_MahjongNoZimo(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_S2C_MahjongNoZimo(Rest, 0, 0,
							F@_1, TrUserData);
	    3 ->
		skip_group_S2C_MahjongNoZimo(Rest, Key bsr 3, 0, F@_1,
					     TrUserData);
	    5 ->
		skip_32_S2C_MahjongNoZimo(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_S2C_MahjongNoZimo(<<>>, 0, 0, F@_1,
				    _) ->
    #'S2C_MahjongNoZimo'{seatId = F@_1}.

d_field_S2C_MahjongNoZimo_seatId(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_S2C_MahjongNoZimo_seatId(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
d_field_S2C_MahjongNoZimo_seatId(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_S2C_MahjongNoZimo(RestF, 0, 0,
					 NewFValue, TrUserData).

skip_varint_S2C_MahjongNoZimo(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, TrUserData) ->
    skip_varint_S2C_MahjongNoZimo(Rest, Z1, Z2, F@_1,
				  TrUserData);
skip_varint_S2C_MahjongNoZimo(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_S2C_MahjongNoZimo(Rest, Z1, Z2, F@_1,
					 TrUserData).

skip_length_delimited_S2C_MahjongNoZimo(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_S2C_MahjongNoZimo(Rest, N + 7,
					    X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_S2C_MahjongNoZimo(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_S2C_MahjongNoZimo(Rest2, 0, 0, F@_1,
					 TrUserData).

skip_group_S2C_MahjongNoZimo(Bin, FNum, Z2, F@_1,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_S2C_MahjongNoZimo(Rest, 0, Z2, F@_1,
					 TrUserData).

skip_32_S2C_MahjongNoZimo(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, TrUserData) ->
    dfp_read_field_def_S2C_MahjongNoZimo(Rest, Z1, Z2, F@_1,
					 TrUserData).

skip_64_S2C_MahjongNoZimo(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, TrUserData) ->
    dfp_read_field_def_S2C_MahjongNoZimo(Rest, Z1, Z2, F@_1,
					 TrUserData).

decode_msg_S2C_MahjongNoHu(Bin, TrUserData) ->
    dfp_read_field_def_S2C_MahjongNoHu(Bin, 0, 0,
				       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_S2C_MahjongNoHu(<<8, Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    d_field_S2C_MahjongNoHu_seatId(Rest, Z1, Z2, F@_1,
				   TrUserData);
dfp_read_field_def_S2C_MahjongNoHu(<<>>, 0, 0, F@_1,
				   _) ->
    #'S2C_MahjongNoHu'{seatId = F@_1};
dfp_read_field_def_S2C_MahjongNoHu(Other, Z1, Z2, F@_1,
				   TrUserData) ->
    dg_read_field_def_S2C_MahjongNoHu(Other, Z1, Z2, F@_1,
				      TrUserData).

dg_read_field_def_S2C_MahjongNoHu(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_S2C_MahjongNoHu(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_S2C_MahjongNoHu(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_S2C_MahjongNoHu_seatId(Rest, 0, 0, F@_1,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_S2C_MahjongNoHu(Rest, 0, 0, F@_1,
					    TrUserData);
	    1 ->
		skip_64_S2C_MahjongNoHu(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_S2C_MahjongNoHu(Rest, 0, 0, F@_1,
						      TrUserData);
	    3 ->
		skip_group_S2C_MahjongNoHu(Rest, Key bsr 3, 0, F@_1,
					   TrUserData);
	    5 ->
		skip_32_S2C_MahjongNoHu(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_S2C_MahjongNoHu(<<>>, 0, 0, F@_1,
				  _) ->
    #'S2C_MahjongNoHu'{seatId = F@_1}.

d_field_S2C_MahjongNoHu_seatId(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_S2C_MahjongNoHu_seatId(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
d_field_S2C_MahjongNoHu_seatId(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_S2C_MahjongNoHu(RestF, 0, 0,
				       NewFValue, TrUserData).

skip_varint_S2C_MahjongNoHu(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, TrUserData) ->
    skip_varint_S2C_MahjongNoHu(Rest, Z1, Z2, F@_1,
				TrUserData);
skip_varint_S2C_MahjongNoHu(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_S2C_MahjongNoHu(Rest, Z1, Z2, F@_1,
				       TrUserData).

skip_length_delimited_S2C_MahjongNoHu(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_S2C_MahjongNoHu(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_S2C_MahjongNoHu(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_S2C_MahjongNoHu(Rest2, 0, 0, F@_1,
				       TrUserData).

skip_group_S2C_MahjongNoHu(Bin, FNum, Z2, F@_1,
			   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_S2C_MahjongNoHu(Rest, 0, Z2, F@_1,
				       TrUserData).

skip_32_S2C_MahjongNoHu(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    dfp_read_field_def_S2C_MahjongNoHu(Rest, Z1, Z2, F@_1,
				       TrUserData).

skip_64_S2C_MahjongNoHu(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    dfp_read_field_def_S2C_MahjongNoHu(Rest, Z1, Z2, F@_1,
				       TrUserData).

decode_msg_S2C_MahjongHaveNoNextGame(Bin, TrUserData) ->
    dfp_read_field_def_S2C_MahjongHaveNoNextGame(Bin, 0, 0,
						 TrUserData).

dfp_read_field_def_S2C_MahjongHaveNoNextGame(<<>>, 0, 0,
					     _) ->
    #'S2C_MahjongHaveNoNextGame'{};
dfp_read_field_def_S2C_MahjongHaveNoNextGame(Other, Z1,
					     Z2, TrUserData) ->
    dg_read_field_def_S2C_MahjongHaveNoNextGame(Other, Z1,
						Z2, TrUserData).

dg_read_field_def_S2C_MahjongHaveNoNextGame(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_S2C_MahjongHaveNoNextGame(Rest, N + 7,
						X bsl N + Acc, TrUserData);
dg_read_field_def_S2C_MahjongHaveNoNextGame(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_S2C_MahjongHaveNoNextGame(Rest, 0, 0,
						TrUserData);
      1 ->
	  skip_64_S2C_MahjongHaveNoNextGame(Rest, 0, 0,
					    TrUserData);
      2 ->
	  skip_length_delimited_S2C_MahjongHaveNoNextGame(Rest, 0,
							  0, TrUserData);
      3 ->
	  skip_group_S2C_MahjongHaveNoNextGame(Rest, Key bsr 3, 0,
					       TrUserData);
      5 ->
	  skip_32_S2C_MahjongHaveNoNextGame(Rest, 0, 0,
					    TrUserData)
    end;
dg_read_field_def_S2C_MahjongHaveNoNextGame(<<>>, 0, 0,
					    _) ->
    #'S2C_MahjongHaveNoNextGame'{}.

skip_varint_S2C_MahjongHaveNoNextGame(<<1:1, _:7,
					Rest/binary>>,
				      Z1, Z2, TrUserData) ->
    skip_varint_S2C_MahjongHaveNoNextGame(Rest, Z1, Z2,
					  TrUserData);
skip_varint_S2C_MahjongHaveNoNextGame(<<0:1, _:7,
					Rest/binary>>,
				      Z1, Z2, TrUserData) ->
    dfp_read_field_def_S2C_MahjongHaveNoNextGame(Rest, Z1,
						 Z2, TrUserData).

skip_length_delimited_S2C_MahjongHaveNoNextGame(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_S2C_MahjongHaveNoNextGame(Rest,
						    N + 7, X bsl N + Acc,
						    TrUserData);
skip_length_delimited_S2C_MahjongHaveNoNextGame(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_S2C_MahjongHaveNoNextGame(Rest2, 0,
						 0, TrUserData).

skip_group_S2C_MahjongHaveNoNextGame(Bin, FNum, Z2,
				     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_S2C_MahjongHaveNoNextGame(Rest, 0,
						 Z2, TrUserData).

skip_32_S2C_MahjongHaveNoNextGame(<<_:32, Rest/binary>>,
				  Z1, Z2, TrUserData) ->
    dfp_read_field_def_S2C_MahjongHaveNoNextGame(Rest, Z1,
						 Z2, TrUserData).

skip_64_S2C_MahjongHaveNoNextGame(<<_:64, Rest/binary>>,
				  Z1, Z2, TrUserData) ->
    dfp_read_field_def_S2C_MahjongHaveNoNextGame(Rest, Z1,
						 Z2, TrUserData).

decode_msg_S2C_MahjongFinish(Bin, TrUserData) ->
    dfp_read_field_def_S2C_MahjongFinish(Bin, 0, 0,
					 TrUserData).

dfp_read_field_def_S2C_MahjongFinish(<<>>, 0, 0, _) ->
    #'S2C_MahjongFinish'{};
dfp_read_field_def_S2C_MahjongFinish(Other, Z1, Z2,
				     TrUserData) ->
    dg_read_field_def_S2C_MahjongFinish(Other, Z1, Z2,
					TrUserData).

dg_read_field_def_S2C_MahjongFinish(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_S2C_MahjongFinish(Rest, N + 7,
					X bsl N + Acc, TrUserData);
dg_read_field_def_S2C_MahjongFinish(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_S2C_MahjongFinish(Rest, 0, 0, TrUserData);
      1 -> skip_64_S2C_MahjongFinish(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_S2C_MahjongFinish(Rest, 0, 0,
						  TrUserData);
      3 ->
	  skip_group_S2C_MahjongFinish(Rest, Key bsr 3, 0,
				       TrUserData);
      5 -> skip_32_S2C_MahjongFinish(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_S2C_MahjongFinish(<<>>, 0, 0, _) ->
    #'S2C_MahjongFinish'{}.

skip_varint_S2C_MahjongFinish(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, TrUserData) ->
    skip_varint_S2C_MahjongFinish(Rest, Z1, Z2, TrUserData);
skip_varint_S2C_MahjongFinish(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, TrUserData) ->
    dfp_read_field_def_S2C_MahjongFinish(Rest, Z1, Z2,
					 TrUserData).

skip_length_delimited_S2C_MahjongFinish(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_S2C_MahjongFinish(Rest, N + 7,
					    X bsl N + Acc, TrUserData);
skip_length_delimited_S2C_MahjongFinish(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_S2C_MahjongFinish(Rest2, 0, 0,
					 TrUserData).

skip_group_S2C_MahjongFinish(Bin, FNum, Z2,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_S2C_MahjongFinish(Rest, 0, Z2,
					 TrUserData).

skip_32_S2C_MahjongFinish(<<_:32, Rest/binary>>, Z1, Z2,
			  TrUserData) ->
    dfp_read_field_def_S2C_MahjongFinish(Rest, Z1, Z2,
					 TrUserData).

skip_64_S2C_MahjongFinish(<<_:64, Rest/binary>>, Z1, Z2,
			  TrUserData) ->
    dfp_read_field_def_S2C_MahjongFinish(Rest, Z1, Z2,
					 TrUserData).

decode_msg_C2S_MahjongHistory(Bin, TrUserData) ->
    dfp_read_field_def_C2S_MahjongHistory(Bin, 0, 0,
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  TrUserData).

dfp_read_field_def_C2S_MahjongHistory(<<8,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      TrUserData) ->
    d_field_C2S_MahjongHistory_gameType(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_C2S_MahjongHistory(<<16,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      TrUserData) ->
    d_field_C2S_MahjongHistory_startTime(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_C2S_MahjongHistory(<<24,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      TrUserData) ->
    d_field_C2S_MahjongHistory_endTime(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_C2S_MahjongHistory(<<32,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      TrUserData) ->
    d_field_C2S_MahjongHistory_page(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_C2S_MahjongHistory(<<40,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      TrUserData) ->
    d_field_C2S_MahjongHistory_pageSize(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_C2S_MahjongHistory(<<>>, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, F@_5, _) ->
    #'C2S_MahjongHistory'{gameType = F@_1, startTime = F@_2,
			  endTime = F@_3, page = F@_4, pageSize = F@_5};
dfp_read_field_def_C2S_MahjongHistory(Other, Z1, Z2,
				      F@_1, F@_2, F@_3, F@_4, F@_5,
				      TrUserData) ->
    dg_read_field_def_C2S_MahjongHistory(Other, Z1, Z2,
					 F@_1, F@_2, F@_3, F@_4, F@_5,
					 TrUserData).

dg_read_field_def_C2S_MahjongHistory(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				     TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_C2S_MahjongHistory(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, TrUserData);
dg_read_field_def_C2S_MahjongHistory(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_C2S_MahjongHistory_gameType(Rest, 0, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5,
					      TrUserData);
      16 ->
	  d_field_C2S_MahjongHistory_startTime(Rest, 0, 0, F@_1,
					       F@_2, F@_3, F@_4, F@_5,
					       TrUserData);
      24 ->
	  d_field_C2S_MahjongHistory_endTime(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5,
					     TrUserData);
      32 ->
	  d_field_C2S_MahjongHistory_page(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, TrUserData);
      40 ->
	  d_field_C2S_MahjongHistory_pageSize(Rest, 0, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5,
					      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_C2S_MahjongHistory(Rest, 0, 0, F@_1, F@_2,
					       F@_3, F@_4, F@_5, TrUserData);
	    1 ->
		skip_64_C2S_MahjongHistory(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, F@_5, TrUserData);
	    2 ->
		skip_length_delimited_C2S_MahjongHistory(Rest, 0, 0,
							 F@_1, F@_2, F@_3, F@_4,
							 F@_5, TrUserData);
	    3 ->
		skip_group_C2S_MahjongHistory(Rest, Key bsr 3, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5,
					      TrUserData);
	    5 ->
		skip_32_C2S_MahjongHistory(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, F@_5, TrUserData)
	  end
    end;
dg_read_field_def_C2S_MahjongHistory(<<>>, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, F@_5, _) ->
    #'C2S_MahjongHistory'{gameType = F@_1, startTime = F@_2,
			  endTime = F@_3, page = F@_4, pageSize = F@_5}.

d_field_C2S_MahjongHistory_gameType(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData)
    when N < 57 ->
    d_field_C2S_MahjongHistory_gameType(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, TrUserData);
d_field_C2S_MahjongHistory_gameType(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _, F@_2, F@_3, F@_4, F@_5,
				    TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_C2S_MahjongHistory(RestF, 0, 0,
					  NewFValue, F@_2, F@_3, F@_4, F@_5,
					  TrUserData).

d_field_C2S_MahjongHistory_startTime(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				     TrUserData)
    when N < 57 ->
    d_field_C2S_MahjongHistory_startTime(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, TrUserData);
d_field_C2S_MahjongHistory_startTime(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, _, F@_3, F@_4, F@_5,
				     TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_C2S_MahjongHistory(RestF, 0, 0, F@_1,
					  NewFValue, F@_3, F@_4, F@_5,
					  TrUserData).

d_field_C2S_MahjongHistory_endTime(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData)
    when N < 57 ->
    d_field_C2S_MahjongHistory_endTime(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, TrUserData);
d_field_C2S_MahjongHistory_endTime(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, _, F@_4, F@_5,
				   TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_C2S_MahjongHistory(RestF, 0, 0, F@_1,
					  F@_2, NewFValue, F@_4, F@_5,
					  TrUserData).

d_field_C2S_MahjongHistory_page(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData)
    when N < 57 ->
    d_field_C2S_MahjongHistory_page(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData);
d_field_C2S_MahjongHistory_page(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, _, F@_5,
				TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_C2S_MahjongHistory(RestF, 0, 0, F@_1,
					  F@_2, F@_3, NewFValue, F@_5,
					  TrUserData).

d_field_C2S_MahjongHistory_pageSize(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData)
    when N < 57 ->
    d_field_C2S_MahjongHistory_pageSize(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, TrUserData);
d_field_C2S_MahjongHistory_pageSize(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, _,
				    TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_C2S_MahjongHistory(RestF, 0, 0, F@_1,
					  F@_2, F@_3, F@_4, NewFValue,
					  TrUserData).

skip_varint_C2S_MahjongHistory(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
			       TrUserData) ->
    skip_varint_C2S_MahjongHistory(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, TrUserData);
skip_varint_C2S_MahjongHistory(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
			       TrUserData) ->
    dfp_read_field_def_C2S_MahjongHistory(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData).

skip_length_delimited_C2S_MahjongHistory(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 TrUserData)
    when N < 57 ->
    skip_length_delimited_C2S_MahjongHistory(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, F@_5, TrUserData);
skip_length_delimited_C2S_MahjongHistory(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_C2S_MahjongHistory(Rest2, 0, 0, F@_1,
					  F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_C2S_MahjongHistory(Bin, FNum, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_C2S_MahjongHistory(Rest, 0, Z2, F@_1,
					  F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_C2S_MahjongHistory(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_C2S_MahjongHistory(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData).

skip_64_C2S_MahjongHistory(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_C2S_MahjongHistory(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData).

decode_msg_Struct_MahjongHistory(Bin, TrUserData) ->
    dfp_read_field_def_Struct_MahjongHistory(Bin, 0, 0,
					     id(undefined, TrUserData),
					     id(undefined, TrUserData),
					     id(undefined, TrUserData),
					     id(undefined, TrUserData),
					     id([], TrUserData),
					     id(undefined, TrUserData),
					     id(undefined, TrUserData),
					     id(undefined, TrUserData),
					     TrUserData).

dfp_read_field_def_Struct_MahjongHistory(<<8,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, TrUserData) ->
    d_field_Struct_MahjongHistory_gameType(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					   F@_7, F@_8, TrUserData);
dfp_read_field_def_Struct_MahjongHistory(<<16,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, TrUserData) ->
    d_field_Struct_MahjongHistory_time(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       TrUserData);
dfp_read_field_def_Struct_MahjongHistory(<<24,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, TrUserData) ->
    d_field_Struct_MahjongHistory_cost(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       TrUserData);
dfp_read_field_def_Struct_MahjongHistory(<<32,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, TrUserData) ->
    d_field_Struct_MahjongHistory_reward(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					 F@_8, TrUserData);
dfp_read_field_def_Struct_MahjongHistory(<<50,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, TrUserData) ->
    d_pfield_Struct_MahjongHistory_start(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					 F@_8, TrUserData);
dfp_read_field_def_Struct_MahjongHistory(<<48,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, TrUserData) ->
    d_field_Struct_MahjongHistory_start(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					F@_8, TrUserData);
dfp_read_field_def_Struct_MahjongHistory(<<56,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, TrUserData) ->
    d_field_Struct_MahjongHistory_end(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				      TrUserData);
dfp_read_field_def_Struct_MahjongHistory(<<96,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, TrUserData) ->
    d_field_Struct_MahjongHistory_moneyBase(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    F@_7, F@_8, TrUserData);
dfp_read_field_def_Struct_MahjongHistory(<<104,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, TrUserData) ->
    d_field_Struct_MahjongHistory_moneyMulti(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					     F@_7, F@_8, TrUserData);
dfp_read_field_def_Struct_MahjongHistory(<<>>, 0, 0,
					 F@_1, F@_2, F@_3, F@_4, R1, F@_6, F@_7,
					 F@_8, TrUserData) ->
    #'Struct_MahjongHistory'{gameType = F@_1, time = F@_2,
			     cost = F@_3, reward = F@_4,
			     start = lists_reverse(R1, TrUserData),
			     'end' = F@_6, moneyBase = F@_7, moneyMulti = F@_8};
dfp_read_field_def_Struct_MahjongHistory(Other, Z1, Z2,
					 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					 F@_7, F@_8, TrUserData) ->
    dg_read_field_def_Struct_MahjongHistory(Other, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    F@_7, F@_8, TrUserData).

dg_read_field_def_Struct_MahjongHistory(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Struct_MahjongHistory(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    F@_4, F@_5, F@_6, F@_7, F@_8,
					    TrUserData);
dg_read_field_def_Struct_MahjongHistory(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_Struct_MahjongHistory_gameType(Rest, 0, 0, F@_1,
						 F@_2, F@_3, F@_4, F@_5, F@_6,
						 F@_7, F@_8, TrUserData);
      16 ->
	  d_field_Struct_MahjongHistory_time(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					     F@_8, TrUserData);
      24 ->
	  d_field_Struct_MahjongHistory_cost(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					     F@_8, TrUserData);
      32 ->
	  d_field_Struct_MahjongHistory_reward(Rest, 0, 0, F@_1,
					       F@_2, F@_3, F@_4, F@_5, F@_6,
					       F@_7, F@_8, TrUserData);
      50 ->
	  d_pfield_Struct_MahjongHistory_start(Rest, 0, 0, F@_1,
					       F@_2, F@_3, F@_4, F@_5, F@_6,
					       F@_7, F@_8, TrUserData);
      48 ->
	  d_field_Struct_MahjongHistory_start(Rest, 0, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5, F@_6,
					      F@_7, F@_8, TrUserData);
      56 ->
	  d_field_Struct_MahjongHistory_end(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					    F@_8, TrUserData);
      96 ->
	  d_field_Struct_MahjongHistory_moneyBase(Rest, 0, 0,
						  F@_1, F@_2, F@_3, F@_4, F@_5,
						  F@_6, F@_7, F@_8, TrUserData);
      104 ->
	  d_field_Struct_MahjongHistory_moneyMulti(Rest, 0, 0,
						   F@_1, F@_2, F@_3, F@_4, F@_5,
						   F@_6, F@_7, F@_8,
						   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Struct_MahjongHistory(Rest, 0, 0, F@_1,
						  F@_2, F@_3, F@_4, F@_5, F@_6,
						  F@_7, F@_8, TrUserData);
	    1 ->
		skip_64_Struct_MahjongHistory(Rest, 0, 0, F@_1, F@_2,
					      F@_3, F@_4, F@_5, F@_6, F@_7,
					      F@_8, TrUserData);
	    2 ->
		skip_length_delimited_Struct_MahjongHistory(Rest, 0, 0,
							    F@_1, F@_2, F@_3,
							    F@_4, F@_5, F@_6,
							    F@_7, F@_8,
							    TrUserData);
	    3 ->
		skip_group_Struct_MahjongHistory(Rest, Key bsr 3, 0,
						 F@_1, F@_2, F@_3, F@_4, F@_5,
						 F@_6, F@_7, F@_8, TrUserData);
	    5 ->
		skip_32_Struct_MahjongHistory(Rest, 0, 0, F@_1, F@_2,
					      F@_3, F@_4, F@_5, F@_6, F@_7,
					      F@_8, TrUserData)
	  end
    end;
dg_read_field_def_Struct_MahjongHistory(<<>>, 0, 0,
					F@_1, F@_2, F@_3, F@_4, R1, F@_6, F@_7,
					F@_8, TrUserData) ->
    #'Struct_MahjongHistory'{gameType = F@_1, time = F@_2,
			     cost = F@_3, reward = F@_4,
			     start = lists_reverse(R1, TrUserData),
			     'end' = F@_6, moneyBase = F@_7, moneyMulti = F@_8}.

d_field_Struct_MahjongHistory_gameType(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, F@_7, F@_8, TrUserData)
    when N < 57 ->
    d_field_Struct_MahjongHistory_gameType(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   F@_4, F@_5, F@_6, F@_7, F@_8,
					   TrUserData);
d_field_Struct_MahjongHistory_gameType(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6,
				       F@_7, F@_8, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_Struct_MahjongHistory(RestF, 0, 0,
					     NewFValue, F@_2, F@_3, F@_4, F@_5,
					     F@_6, F@_7, F@_8, TrUserData).

d_field_Struct_MahjongHistory_time(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, TrUserData)
    when N < 57 ->
    d_field_Struct_MahjongHistory_time(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_Struct_MahjongHistory_time(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_Struct_MahjongHistory(RestF, 0, 0,
					     F@_1, NewFValue, F@_3, F@_4, F@_5,
					     F@_6, F@_7, F@_8, TrUserData).

d_field_Struct_MahjongHistory_cost(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, TrUserData)
    when N < 57 ->
    d_field_Struct_MahjongHistory_cost(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_Struct_MahjongHistory_cost(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6,
				   F@_7, F@_8, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_Struct_MahjongHistory(RestF, 0, 0,
					     F@_1, F@_2, NewFValue, F@_4, F@_5,
					     F@_6, F@_7, F@_8, TrUserData).

d_field_Struct_MahjongHistory_reward(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, TrUserData)
    when N < 57 ->
    d_field_Struct_MahjongHistory_reward(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_Struct_MahjongHistory_reward(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6,
				     F@_7, F@_8, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_Struct_MahjongHistory(RestF, 0, 0,
					     F@_1, F@_2, F@_3, NewFValue, F@_5,
					     F@_6, F@_7, F@_8, TrUserData).

d_field_Struct_MahjongHistory_start(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    F@_7, F@_8, TrUserData)
    when N < 57 ->
    d_field_Struct_MahjongHistory_start(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_Struct_MahjongHistory_start(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, Prev, F@_6,
				    F@_7, F@_8, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_Struct_MahjongHistory(RestF, 0, 0,
					     F@_1, F@_2, F@_3, F@_4,
					     cons(NewFValue, Prev, TrUserData),
					     F@_6, F@_7, F@_8, TrUserData).

d_pfield_Struct_MahjongHistory_start(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, TrUserData)
    when N < 57 ->
    d_pfield_Struct_MahjongHistory_start(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, F@_6, F@_7, F@_8, TrUserData);
d_pfield_Struct_MahjongHistory_start(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, E, F@_6,
				     F@_7, F@_8, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq =
	d_packed_field_Struct_MahjongHistory_start(PackedBytes,
						   0, 0, E, TrUserData),
    dfp_read_field_def_Struct_MahjongHistory(Rest2, 0, 0,
					     F@_1, F@_2, F@_3, F@_4, NewSeq,
					     F@_6, F@_7, F@_8, TrUserData).

d_packed_field_Struct_MahjongHistory_start(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, AccSeq, TrUserData)
    when N < 57 ->
    d_packed_field_Struct_MahjongHistory_start(Rest, N + 7,
					       X bsl N + Acc, AccSeq,
					       TrUserData);
d_packed_field_Struct_MahjongHistory_start(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    d_packed_field_Struct_MahjongHistory_start(RestF, 0, 0,
					       [NewFValue | AccSeq],
					       TrUserData);
d_packed_field_Struct_MahjongHistory_start(<<>>, 0, 0,
					   AccSeq, _) ->
    AccSeq.

d_field_Struct_MahjongHistory_end(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, TrUserData)
    when N < 57 ->
    d_field_Struct_MahjongHistory_end(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_Struct_MahjongHistory_end(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7,
				  F@_8, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_Struct_MahjongHistory(RestF, 0, 0,
					     F@_1, F@_2, F@_3, F@_4, F@_5,
					     NewFValue, F@_7, F@_8, TrUserData).

d_field_Struct_MahjongHistory_moneyBase(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, TrUserData)
    when N < 57 ->
    d_field_Struct_MahjongHistory_moneyBase(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    F@_4, F@_5, F@_6, F@_7, F@_8,
					    TrUserData);
d_field_Struct_MahjongHistory_moneyBase(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, _, F@_8, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_Struct_MahjongHistory(RestF, 0, 0,
					     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					     NewFValue, F@_8, TrUserData).

d_field_Struct_MahjongHistory_moneyMulti(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, TrUserData)
    when N < 57 ->
    d_field_Struct_MahjongHistory_moneyMulti(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, F@_5, F@_6, F@_7, F@_8,
					     TrUserData);
d_field_Struct_MahjongHistory_moneyMulti(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_Struct_MahjongHistory(RestF, 0, 0,
					     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					     F@_7, NewFValue, TrUserData).

skip_varint_Struct_MahjongHistory(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, TrUserData) ->
    skip_varint_Struct_MahjongHistory(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				      TrUserData);
skip_varint_Struct_MahjongHistory(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, TrUserData) ->
    dfp_read_field_def_Struct_MahjongHistory(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					     F@_7, F@_8, TrUserData).

skip_length_delimited_Struct_MahjongHistory(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, F@_7, F@_8, TrUserData)
    when N < 57 ->
    skip_length_delimited_Struct_MahjongHistory(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2, F@_3,
						F@_4, F@_5, F@_6, F@_7, F@_8,
						TrUserData);
skip_length_delimited_Struct_MahjongHistory(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, F@_7, F@_8,
					    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Struct_MahjongHistory(Rest2, 0, 0,
					     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					     F@_7, F@_8, TrUserData).

skip_group_Struct_MahjongHistory(Bin, FNum, Z2, F@_1,
				 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Struct_MahjongHistory(Rest, 0, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					     F@_7, F@_8, TrUserData).

skip_32_Struct_MahjongHistory(<<_:32, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, TrUserData) ->
    dfp_read_field_def_Struct_MahjongHistory(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					     F@_7, F@_8, TrUserData).

skip_64_Struct_MahjongHistory(<<_:64, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, TrUserData) ->
    dfp_read_field_def_Struct_MahjongHistory(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					     F@_7, F@_8, TrUserData).

decode_msg_S2C_MahjongHistory(Bin, TrUserData) ->
    dfp_read_field_def_S2C_MahjongHistory(Bin, 0, 0,
					  id([], TrUserData), TrUserData).

dfp_read_field_def_S2C_MahjongHistory(<<10,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    d_field_S2C_MahjongHistory_data(Rest, Z1, Z2, F@_1,
				    TrUserData);
dfp_read_field_def_S2C_MahjongHistory(<<>>, 0, 0, R1,
				      TrUserData) ->
    #'S2C_MahjongHistory'{data =
			      lists_reverse(R1, TrUserData)};
dfp_read_field_def_S2C_MahjongHistory(Other, Z1, Z2,
				      F@_1, TrUserData) ->
    dg_read_field_def_S2C_MahjongHistory(Other, Z1, Z2,
					 F@_1, TrUserData).

dg_read_field_def_S2C_MahjongHistory(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_S2C_MahjongHistory(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_S2C_MahjongHistory(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_S2C_MahjongHistory_data(Rest, 0, 0, F@_1,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_S2C_MahjongHistory(Rest, 0, 0, F@_1,
					       TrUserData);
	    1 ->
		skip_64_S2C_MahjongHistory(Rest, 0, 0, F@_1,
					   TrUserData);
	    2 ->
		skip_length_delimited_S2C_MahjongHistory(Rest, 0, 0,
							 F@_1, TrUserData);
	    3 ->
		skip_group_S2C_MahjongHistory(Rest, Key bsr 3, 0, F@_1,
					      TrUserData);
	    5 ->
		skip_32_S2C_MahjongHistory(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_S2C_MahjongHistory(<<>>, 0, 0, R1,
				     TrUserData) ->
    #'S2C_MahjongHistory'{data =
			      lists_reverse(R1, TrUserData)}.

d_field_S2C_MahjongHistory_data(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_S2C_MahjongHistory_data(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
d_field_S2C_MahjongHistory_data(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_Struct_MahjongHistory(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_S2C_MahjongHistory(RestF, 0, 0,
					  cons(NewFValue, Prev, TrUserData),
					  TrUserData).

skip_varint_S2C_MahjongHistory(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    skip_varint_S2C_MahjongHistory(Rest, Z1, Z2, F@_1,
				   TrUserData);
skip_varint_S2C_MahjongHistory(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_S2C_MahjongHistory(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_length_delimited_S2C_MahjongHistory(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_S2C_MahjongHistory(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_S2C_MahjongHistory(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_S2C_MahjongHistory(Rest2, 0, 0, F@_1,
					  TrUserData).

skip_group_S2C_MahjongHistory(Bin, FNum, Z2, F@_1,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_S2C_MahjongHistory(Rest, 0, Z2, F@_1,
					  TrUserData).

skip_32_S2C_MahjongHistory(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_S2C_MahjongHistory(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_64_S2C_MahjongHistory(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_S2C_MahjongHistory(Rest, Z1, Z2,
					  F@_1, TrUserData).

decode_msg_C2S_Login(Bin, TrUserData) ->
    dfp_read_field_def_C2S_Login(Bin, 0, 0,
				 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_C2S_Login(<<10, Rest/binary>>, Z1,
			     Z2, F@_1, TrUserData) ->
    d_field_C2S_Login_token(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_C2S_Login(<<>>, 0, 0, F@_1, _) ->
    #'C2S_Login'{token = F@_1};
dfp_read_field_def_C2S_Login(Other, Z1, Z2, F@_1,
			     TrUserData) ->
    dg_read_field_def_C2S_Login(Other, Z1, Z2, F@_1,
				TrUserData).

dg_read_field_def_C2S_Login(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_C2S_Login(Rest, N + 7, X bsl N + Acc,
				F@_1, TrUserData);
dg_read_field_def_C2S_Login(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_C2S_Login_token(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_C2S_Login(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_C2S_Login(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_C2S_Login(Rest, 0, 0, F@_1,
						TrUserData);
	    3 ->
		skip_group_C2S_Login(Rest, Key bsr 3, 0, F@_1,
				     TrUserData);
	    5 -> skip_32_C2S_Login(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_C2S_Login(<<>>, 0, 0, F@_1, _) ->
    #'C2S_Login'{token = F@_1}.

d_field_C2S_Login_token(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_C2S_Login_token(Rest, N + 7, X bsl N + Acc,
			    F@_1, TrUserData);
d_field_C2S_Login_token(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_C2S_Login(RestF, 0, 0, NewFValue,
				 TrUserData).

skip_varint_C2S_Login(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    skip_varint_C2S_Login(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_C2S_Login(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_C2S_Login(Rest, Z1, Z2, F@_1,
				 TrUserData).

skip_length_delimited_C2S_Login(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_C2S_Login(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_C2S_Login(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_C2S_Login(Rest2, 0, 0, F@_1,
				 TrUserData).

skip_group_C2S_Login(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_C2S_Login(Rest, 0, Z2, F@_1,
				 TrUserData).

skip_32_C2S_Login(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  TrUserData) ->
    dfp_read_field_def_C2S_Login(Rest, Z1, Z2, F@_1,
				 TrUserData).

skip_64_C2S_Login(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  TrUserData) ->
    dfp_read_field_def_C2S_Login(Rest, Z1, Z2, F@_1,
				 TrUserData).

decode_msg_S2C_Login(Bin, TrUserData) ->
    dfp_read_field_def_S2C_Login(Bin, 0, 0,
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_S2C_Login(<<10, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_S2C_Login_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 TrUserData);
dfp_read_field_def_S2C_Login(<<26, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_S2C_Login_nickname(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData);
dfp_read_field_def_S2C_Login(<<32, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_S2C_Login_money(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData);
dfp_read_field_def_S2C_Login(<<>>, 0, 0, F@_1, F@_2,
			     F@_3, _) ->
    #'S2C_Login'{id = F@_1, nickname = F@_2, money = F@_3};
dfp_read_field_def_S2C_Login(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, TrUserData) ->
    dg_read_field_def_S2C_Login(Other, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

dg_read_field_def_S2C_Login(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_S2C_Login(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_S2C_Login(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_S2C_Login_id(Rest, 0, 0, F@_1, F@_2, F@_3,
			       TrUserData);
      26 ->
	  d_field_S2C_Login_nickname(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
      32 ->
	  d_field_S2C_Login_money(Rest, 0, 0, F@_1, F@_2, F@_3,
				  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_S2C_Login(Rest, 0, 0, F@_1, F@_2, F@_3,
				      TrUserData);
	    1 ->
		skip_64_S2C_Login(Rest, 0, 0, F@_1, F@_2, F@_3,
				  TrUserData);
	    2 ->
		skip_length_delimited_S2C_Login(Rest, 0, 0, F@_1, F@_2,
						F@_3, TrUserData);
	    3 ->
		skip_group_S2C_Login(Rest, Key bsr 3, 0, F@_1, F@_2,
				     F@_3, TrUserData);
	    5 ->
		skip_32_S2C_Login(Rest, 0, 0, F@_1, F@_2, F@_3,
				  TrUserData)
	  end
    end;
dg_read_field_def_S2C_Login(<<>>, 0, 0, F@_1, F@_2,
			    F@_3, _) ->
    #'S2C_Login'{id = F@_1, nickname = F@_2, money = F@_3}.

d_field_S2C_Login_id(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_S2C_Login_id(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, TrUserData);
d_field_S2C_Login_id(<<0:1, X:7, Rest/binary>>, N, Acc,
		     _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_S2C_Login(RestF, 0, 0, NewFValue,
				 F@_2, F@_3, TrUserData).

d_field_S2C_Login_nickname(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_S2C_Login_nickname(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
d_field_S2C_Login_nickname(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_S2C_Login(RestF, 0, 0, F@_1,
				 NewFValue, F@_3, TrUserData).

d_field_S2C_Login_money(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_S2C_Login_money(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, TrUserData);
d_field_S2C_Login_money(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_S2C_Login(RestF, 0, 0, F@_1, F@_2,
				 NewFValue, TrUserData).

skip_varint_S2C_Login(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_S2C_Login(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  TrUserData);
skip_varint_S2C_Login(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_S2C_Login(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

skip_length_delimited_S2C_Login(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_S2C_Login(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3,
				    TrUserData);
skip_length_delimited_S2C_Login(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_S2C_Login(Rest2, 0, 0, F@_1, F@_2,
				 F@_3, TrUserData).

skip_group_S2C_Login(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_S2C_Login(Rest, 0, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

skip_32_S2C_Login(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_S2C_Login(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

skip_64_S2C_Login(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_S2C_Login(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

decode_msg_S2C_Err(Bin, TrUserData) ->
    dfp_read_field_def_S2C_Err(Bin, 0, 0,
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_S2C_Err(<<8, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, TrUserData) ->
    d_field_S2C_Err_code(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 TrUserData);
dfp_read_field_def_S2C_Err(<<16, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, TrUserData) ->
    d_field_S2C_Err_type(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 TrUserData);
dfp_read_field_def_S2C_Err(<<26, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, TrUserData) ->
    d_field_S2C_Err_msg(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			TrUserData);
dfp_read_field_def_S2C_Err(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   _) ->
    #'S2C_Err'{code = F@_1, type = F@_2, msg = F@_3};
dfp_read_field_def_S2C_Err(Other, Z1, Z2, F@_1, F@_2,
			   F@_3, TrUserData) ->
    dg_read_field_def_S2C_Err(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData).

dg_read_field_def_S2C_Err(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_S2C_Err(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_S2C_Err(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_S2C_Err_code(Rest, 0, 0, F@_1, F@_2, F@_3,
			       TrUserData);
      16 ->
	  d_field_S2C_Err_type(Rest, 0, 0, F@_1, F@_2, F@_3,
			       TrUserData);
      26 ->
	  d_field_S2C_Err_msg(Rest, 0, 0, F@_1, F@_2, F@_3,
			      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_S2C_Err(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
	    1 ->
		skip_64_S2C_Err(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData);
	    2 ->
		skip_length_delimited_S2C_Err(Rest, 0, 0, F@_1, F@_2,
					      F@_3, TrUserData);
	    3 ->
		skip_group_S2C_Err(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				   TrUserData);
	    5 ->
		skip_32_S2C_Err(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData)
	  end
    end;
dg_read_field_def_S2C_Err(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  _) ->
    #'S2C_Err'{code = F@_1, type = F@_2, msg = F@_3}.

d_field_S2C_Err_code(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_S2C_Err_code(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, TrUserData);
d_field_S2C_Err_code(<<0:1, X:7, Rest/binary>>, N, Acc,
		     _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_EnumS2CErrCode(begin
						     <<Res:32/signed-native>> =
							 <<(X bsl N +
							      Acc):32/unsigned-native>>,
						     id(Res, TrUserData)
						   end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_S2C_Err(RestF, 0, 0, NewFValue, F@_2,
			       F@_3, TrUserData).

d_field_S2C_Err_type(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_S2C_Err_type(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, TrUserData);
d_field_S2C_Err_type(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} =
	{id(d_enum_EnumS2CTipsShowType(begin
					 <<Res:32/signed-native>> = <<(X bsl N +
									 Acc):32/unsigned-native>>,
					 id(Res, TrUserData)
				       end),
	    TrUserData),
	 Rest},
    dfp_read_field_def_S2C_Err(RestF, 0, 0, F@_1, NewFValue,
			       F@_3, TrUserData).

d_field_S2C_Err_msg(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_S2C_Err_msg(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, TrUserData);
d_field_S2C_Err_msg(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_S2C_Err(RestF, 0, 0, F@_1, F@_2,
			       NewFValue, TrUserData).

skip_varint_S2C_Err(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_S2C_Err(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			TrUserData);
skip_varint_S2C_Err(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_S2C_Err(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

skip_length_delimited_S2C_Err(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_S2C_Err(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_S2C_Err(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_S2C_Err(Rest2, 0, 0, F@_1, F@_2,
			       F@_3, TrUserData).

skip_group_S2C_Err(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_S2C_Err(Rest, 0, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

skip_32_S2C_Err(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_S2C_Err(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

skip_64_S2C_Err(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_S2C_Err(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

decode_msg_S2C_PlayerInfo(Bin, TrUserData) ->
    dfp_read_field_def_S2C_PlayerInfo(Bin, 0, 0,
				      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_S2C_PlayerInfo(<<16, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    d_field_S2C_PlayerInfo_moneyLeft(Rest, Z1, Z2, F@_1,
				     TrUserData);
dfp_read_field_def_S2C_PlayerInfo(<<>>, 0, 0, F@_1,
				  _) ->
    #'S2C_PlayerInfo'{moneyLeft = F@_1};
dfp_read_field_def_S2C_PlayerInfo(Other, Z1, Z2, F@_1,
				  TrUserData) ->
    dg_read_field_def_S2C_PlayerInfo(Other, Z1, Z2, F@_1,
				     TrUserData).

dg_read_field_def_S2C_PlayerInfo(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_S2C_PlayerInfo(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_S2C_PlayerInfo(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      16 ->
	  d_field_S2C_PlayerInfo_moneyLeft(Rest, 0, 0, F@_1,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_S2C_PlayerInfo(Rest, 0, 0, F@_1,
					   TrUserData);
	    1 ->
		skip_64_S2C_PlayerInfo(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_S2C_PlayerInfo(Rest, 0, 0, F@_1,
						     TrUserData);
	    3 ->
		skip_group_S2C_PlayerInfo(Rest, Key bsr 3, 0, F@_1,
					  TrUserData);
	    5 ->
		skip_32_S2C_PlayerInfo(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_S2C_PlayerInfo(<<>>, 0, 0, F@_1, _) ->
    #'S2C_PlayerInfo'{moneyLeft = F@_1}.

d_field_S2C_PlayerInfo_moneyLeft(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_S2C_PlayerInfo_moneyLeft(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
d_field_S2C_PlayerInfo_moneyLeft(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_S2C_PlayerInfo(RestF, 0, 0,
				      NewFValue, TrUserData).

skip_varint_S2C_PlayerInfo(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_S2C_PlayerInfo(Rest, Z1, Z2, F@_1,
			       TrUserData);
skip_varint_S2C_PlayerInfo(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_S2C_PlayerInfo(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_length_delimited_S2C_PlayerInfo(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_S2C_PlayerInfo(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_S2C_PlayerInfo(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_S2C_PlayerInfo(Rest2, 0, 0, F@_1,
				      TrUserData).

skip_group_S2C_PlayerInfo(Bin, FNum, Z2, F@_1,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_S2C_PlayerInfo(Rest, 0, Z2, F@_1,
				      TrUserData).

skip_32_S2C_PlayerInfo(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_S2C_PlayerInfo(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_64_S2C_PlayerInfo(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_S2C_PlayerInfo(Rest, Z1, Z2, F@_1,
				      TrUserData).

decode_msg_C2S_Heartbeat(Bin, TrUserData) ->
    dfp_read_field_def_C2S_Heartbeat(Bin, 0, 0, TrUserData).

dfp_read_field_def_C2S_Heartbeat(<<>>, 0, 0, _) ->
    #'C2S_Heartbeat'{};
dfp_read_field_def_C2S_Heartbeat(Other, Z1, Z2,
				 TrUserData) ->
    dg_read_field_def_C2S_Heartbeat(Other, Z1, Z2,
				    TrUserData).

dg_read_field_def_C2S_Heartbeat(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_C2S_Heartbeat(Rest, N + 7,
				    X bsl N + Acc, TrUserData);
dg_read_field_def_C2S_Heartbeat(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_C2S_Heartbeat(Rest, 0, 0, TrUserData);
      1 -> skip_64_C2S_Heartbeat(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_C2S_Heartbeat(Rest, 0, 0,
					      TrUserData);
      3 ->
	  skip_group_C2S_Heartbeat(Rest, Key bsr 3, 0,
				   TrUserData);
      5 -> skip_32_C2S_Heartbeat(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_C2S_Heartbeat(<<>>, 0, 0, _) ->
    #'C2S_Heartbeat'{}.

skip_varint_C2S_Heartbeat(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, TrUserData) ->
    skip_varint_C2S_Heartbeat(Rest, Z1, Z2, TrUserData);
skip_varint_C2S_Heartbeat(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, TrUserData) ->
    dfp_read_field_def_C2S_Heartbeat(Rest, Z1, Z2,
				     TrUserData).

skip_length_delimited_C2S_Heartbeat(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_C2S_Heartbeat(Rest, N + 7,
					X bsl N + Acc, TrUserData);
skip_length_delimited_C2S_Heartbeat(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_C2S_Heartbeat(Rest2, 0, 0,
				     TrUserData).

skip_group_C2S_Heartbeat(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_C2S_Heartbeat(Rest, 0, Z2,
				     TrUserData).

skip_32_C2S_Heartbeat(<<_:32, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_C2S_Heartbeat(Rest, Z1, Z2,
				     TrUserData).

skip_64_C2S_Heartbeat(<<_:64, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_C2S_Heartbeat(Rest, Z1, Z2,
				     TrUserData).

decode_msg_S2C_Heartbeat(Bin, TrUserData) ->
    dfp_read_field_def_S2C_Heartbeat(Bin, 0, 0, TrUserData).

dfp_read_field_def_S2C_Heartbeat(<<>>, 0, 0, _) ->
    #'S2C_Heartbeat'{};
dfp_read_field_def_S2C_Heartbeat(Other, Z1, Z2,
				 TrUserData) ->
    dg_read_field_def_S2C_Heartbeat(Other, Z1, Z2,
				    TrUserData).

dg_read_field_def_S2C_Heartbeat(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_S2C_Heartbeat(Rest, N + 7,
				    X bsl N + Acc, TrUserData);
dg_read_field_def_S2C_Heartbeat(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_S2C_Heartbeat(Rest, 0, 0, TrUserData);
      1 -> skip_64_S2C_Heartbeat(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_S2C_Heartbeat(Rest, 0, 0,
					      TrUserData);
      3 ->
	  skip_group_S2C_Heartbeat(Rest, Key bsr 3, 0,
				   TrUserData);
      5 -> skip_32_S2C_Heartbeat(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_S2C_Heartbeat(<<>>, 0, 0, _) ->
    #'S2C_Heartbeat'{}.

skip_varint_S2C_Heartbeat(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, TrUserData) ->
    skip_varint_S2C_Heartbeat(Rest, Z1, Z2, TrUserData);
skip_varint_S2C_Heartbeat(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, TrUserData) ->
    dfp_read_field_def_S2C_Heartbeat(Rest, Z1, Z2,
				     TrUserData).

skip_length_delimited_S2C_Heartbeat(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_S2C_Heartbeat(Rest, N + 7,
					X bsl N + Acc, TrUserData);
skip_length_delimited_S2C_Heartbeat(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_S2C_Heartbeat(Rest2, 0, 0,
				     TrUserData).

skip_group_S2C_Heartbeat(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_S2C_Heartbeat(Rest, 0, Z2,
				     TrUserData).

skip_32_S2C_Heartbeat(<<_:32, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_S2C_Heartbeat(Rest, Z1, Z2,
				     TrUserData).

skip_64_S2C_Heartbeat(<<_:64, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_S2C_Heartbeat(Rest, Z1, Z2,
				     TrUserData).

decode_msg_C2S_Gm(Bin, TrUserData) ->
    dfp_read_field_def_C2S_Gm(Bin, 0, 0,
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_C2S_Gm(<<10, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, TrUserData) ->
    d_field_C2S_Gm_cmd(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
dfp_read_field_def_C2S_Gm(<<16, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, TrUserData) ->
    d_field_C2S_Gm_seqId(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			 TrUserData);
dfp_read_field_def_C2S_Gm(<<90, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, TrUserData) ->
    d_field_C2S_Gm_arg1(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			TrUserData);
dfp_read_field_def_C2S_Gm(<<98, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, TrUserData) ->
    d_field_C2S_Gm_arg2(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			TrUserData);
dfp_read_field_def_C2S_Gm(<<106, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, TrUserData) ->
    d_field_C2S_Gm_arg3(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			TrUserData);
dfp_read_field_def_C2S_Gm(<<114, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, TrUserData) ->
    d_field_C2S_Gm_arg4(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			TrUserData);
dfp_read_field_def_C2S_Gm(<<122, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, TrUserData) ->
    d_field_C2S_Gm_arg5(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			TrUserData);
dfp_read_field_def_C2S_Gm(<<130, 1, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, TrUserData) ->
    d_field_C2S_Gm_arg6(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			TrUserData);
dfp_read_field_def_C2S_Gm(<<138, 1, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, TrUserData) ->
    d_field_C2S_Gm_arg7(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			TrUserData);
dfp_read_field_def_C2S_Gm(<<146, 1, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, TrUserData) ->
    d_field_C2S_Gm_arg8(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			TrUserData);
dfp_read_field_def_C2S_Gm(<<154, 1, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, TrUserData) ->
    d_field_C2S_Gm_arg9(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			TrUserData);
dfp_read_field_def_C2S_Gm(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			  _) ->
    #'C2S_Gm'{cmd = F@_1, seqId = F@_2, arg1 = F@_3,
	      arg2 = F@_4, arg3 = F@_5, arg4 = F@_6, arg5 = F@_7,
	      arg6 = F@_8, arg7 = F@_9, arg8 = F@_10, arg9 = F@_11};
dfp_read_field_def_C2S_Gm(Other, Z1, Z2, F@_1, F@_2,
			  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			  F@_11, TrUserData) ->
    dg_read_field_def_C2S_Gm(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			     F@_11, TrUserData).

dg_read_field_def_C2S_Gm(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_C2S_Gm(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, F@_10, F@_11, TrUserData);
dg_read_field_def_C2S_Gm(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_C2S_Gm_cmd(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			     F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			     TrUserData);
      16 ->
	  d_field_C2S_Gm_seqId(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			       TrUserData);
      90 ->
	  d_field_C2S_Gm_arg1(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      TrUserData);
      98 ->
	  d_field_C2S_Gm_arg2(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      TrUserData);
      106 ->
	  d_field_C2S_Gm_arg3(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      TrUserData);
      114 ->
	  d_field_C2S_Gm_arg4(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      TrUserData);
      122 ->
	  d_field_C2S_Gm_arg5(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      TrUserData);
      130 ->
	  d_field_C2S_Gm_arg6(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      TrUserData);
      138 ->
	  d_field_C2S_Gm_arg7(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      TrUserData);
      146 ->
	  d_field_C2S_Gm_arg8(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      TrUserData);
      154 ->
	  d_field_C2S_Gm_arg9(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_C2S_Gm(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				   TrUserData);
	    1 ->
		skip_64_C2S_Gm(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			       F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			       TrUserData);
	    2 ->
		skip_length_delimited_C2S_Gm(Rest, 0, 0, F@_1, F@_2,
					     F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					     F@_9, F@_10, F@_11, TrUserData);
	    3 ->
		skip_group_C2S_Gm(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				  F@_11, TrUserData);
	    5 ->
		skip_32_C2S_Gm(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			       F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData)
	  end
    end;
dg_read_field_def_C2S_Gm(<<>>, 0, 0, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, _) ->
    #'C2S_Gm'{cmd = F@_1, seqId = F@_2, arg1 = F@_3,
	      arg2 = F@_4, arg3 = F@_5, arg4 = F@_6, arg5 = F@_7,
	      arg6 = F@_8, arg7 = F@_9, arg8 = F@_10, arg9 = F@_11}.

d_field_C2S_Gm_cmd(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		   F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_C2S_Gm_cmd(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		       F@_11, TrUserData);
d_field_C2S_Gm_cmd(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		   F@_11, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_C2S_Gm(RestF, 0, 0, NewFValue, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, TrUserData).

d_field_C2S_Gm_seqId(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_C2S_Gm_seqId(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			 F@_11, TrUserData);
d_field_C2S_Gm_seqId(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_C2S_Gm(RestF, 0, 0, F@_1, NewFValue,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, TrUserData).

d_field_C2S_Gm_arg1(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_C2S_Gm_arg1(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			F@_11, TrUserData);
d_field_C2S_Gm_arg1(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_C2S_Gm(RestF, 0, 0, F@_1, F@_2,
			      NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			      F@_10, F@_11, TrUserData).

d_field_C2S_Gm_arg2(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_C2S_Gm_arg2(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			F@_11, TrUserData);
d_field_C2S_Gm_arg2(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_C2S_Gm(RestF, 0, 0, F@_1, F@_2, F@_3,
			      NewFValue, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, TrUserData).

d_field_C2S_Gm_arg3(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_C2S_Gm_arg3(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			F@_11, TrUserData);
d_field_C2S_Gm_arg3(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, F@_8, F@_9,
		    F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_C2S_Gm(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, NewFValue, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, TrUserData).

d_field_C2S_Gm_arg4(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_C2S_Gm_arg4(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			F@_11, TrUserData);
d_field_C2S_Gm_arg4(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8, F@_9,
		    F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_C2S_Gm(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, NewFValue, F@_7, F@_8, F@_9, F@_10,
			      F@_11, TrUserData).

d_field_C2S_Gm_arg5(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_C2S_Gm_arg5(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			F@_11, TrUserData);
d_field_C2S_Gm_arg5(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8, F@_9,
		    F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_C2S_Gm(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, NewFValue, F@_8, F@_9, F@_10,
			      F@_11, TrUserData).

d_field_C2S_Gm_arg6(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_C2S_Gm_arg6(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			F@_11, TrUserData);
d_field_C2S_Gm_arg6(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _, F@_9,
		    F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_C2S_Gm(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, NewFValue, F@_9, F@_10,
			      F@_11, TrUserData).

d_field_C2S_Gm_arg7(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_C2S_Gm_arg7(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			F@_11, TrUserData);
d_field_C2S_Gm_arg7(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, _,
		    F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_C2S_Gm(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, NewFValue, F@_10,
			      F@_11, TrUserData).

d_field_C2S_Gm_arg8(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_C2S_Gm_arg8(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			F@_11, TrUserData);
d_field_C2S_Gm_arg8(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, _,
		    F@_11, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_C2S_Gm(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, NewFValue,
			      F@_11, TrUserData).

d_field_C2S_Gm_arg9(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_C2S_Gm_arg9(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			F@_11, TrUserData);
d_field_C2S_Gm_arg9(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_C2S_Gm(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      NewFValue, TrUserData).

skip_varint_C2S_Gm(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		   F@_10, F@_11, TrUserData) ->
    skip_varint_C2S_Gm(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
skip_varint_C2S_Gm(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		   F@_10, F@_11, TrUserData) ->
    dfp_read_field_def_C2S_Gm(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, TrUserData).

skip_length_delimited_C2S_Gm(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, F@_9, F@_10, F@_11, TrUserData)
    when N < 57 ->
    skip_length_delimited_C2S_Gm(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				 F@_9, F@_10, F@_11, TrUserData);
skip_length_delimited_C2S_Gm(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_C2S_Gm(Rest2, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      TrUserData).

skip_group_C2S_Gm(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4,
		  F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
		  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_C2S_Gm(Rest, 0, Z2, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      TrUserData).

skip_32_C2S_Gm(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
	       F@_11, TrUserData) ->
    dfp_read_field_def_C2S_Gm(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, TrUserData).

skip_64_C2S_Gm(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
	       F@_11, TrUserData) ->
    dfp_read_field_def_C2S_Gm(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, TrUserData).

decode_msg_S2C_Gm(Bin, TrUserData) ->
    dfp_read_field_def_S2C_Gm(Bin, 0, 0,
			      id(undefined, TrUserData),
			      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_S2C_Gm(<<16, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    d_field_S2C_Gm_seqId(Rest, Z1, Z2, F@_1, F@_2,
			 TrUserData);
dfp_read_field_def_S2C_Gm(<<24, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    d_field_S2C_Gm_code(Rest, Z1, Z2, F@_1, F@_2,
			TrUserData);
dfp_read_field_def_S2C_Gm(<<>>, 0, 0, F@_1, F@_2, _) ->
    #'S2C_Gm'{seqId = F@_1, code = F@_2};
dfp_read_field_def_S2C_Gm(Other, Z1, Z2, F@_1, F@_2,
			  TrUserData) ->
    dg_read_field_def_S2C_Gm(Other, Z1, Z2, F@_1, F@_2,
			     TrUserData).

dg_read_field_def_S2C_Gm(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_S2C_Gm(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
dg_read_field_def_S2C_Gm(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      16 ->
	  d_field_S2C_Gm_seqId(Rest, 0, 0, F@_1, F@_2,
			       TrUserData);
      24 ->
	  d_field_S2C_Gm_code(Rest, 0, 0, F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_S2C_Gm(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_S2C_Gm(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_S2C_Gm(Rest, 0, 0, F@_1, F@_2,
					     TrUserData);
	    3 ->
		skip_group_S2C_Gm(Rest, Key bsr 3, 0, F@_1, F@_2,
				  TrUserData);
	    5 -> skip_32_S2C_Gm(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_S2C_Gm(<<>>, 0, 0, F@_1, F@_2, _) ->
    #'S2C_Gm'{seqId = F@_1, code = F@_2}.

d_field_S2C_Gm_seqId(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_S2C_Gm_seqId(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, TrUserData);
d_field_S2C_Gm_seqId(<<0:1, X:7, Rest/binary>>, N, Acc,
		     _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_S2C_Gm(RestF, 0, 0, NewFValue, F@_2,
			      TrUserData).

d_field_S2C_Gm_code(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_S2C_Gm_code(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, TrUserData);
d_field_S2C_Gm_code(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_S2C_Gm(RestF, 0, 0, F@_1, NewFValue,
			      TrUserData).

skip_varint_S2C_Gm(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, TrUserData) ->
    skip_varint_S2C_Gm(Rest, Z1, Z2, F@_1, F@_2,
		       TrUserData);
skip_varint_S2C_Gm(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_S2C_Gm(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData).

skip_length_delimited_S2C_Gm(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_S2C_Gm(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
skip_length_delimited_S2C_Gm(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_S2C_Gm(Rest2, 0, 0, F@_1, F@_2,
			      TrUserData).

skip_group_S2C_Gm(Bin, FNum, Z2, F@_1, F@_2,
		  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_S2C_Gm(Rest, 0, Z2, F@_1, F@_2,
			      TrUserData).

skip_32_S2C_Gm(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, TrUserData) ->
    dfp_read_field_def_S2C_Gm(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData).

skip_64_S2C_Gm(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, TrUserData) ->
    dfp_read_field_def_S2C_Gm(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData).

d_enum_EnumS2CTipsShowType(0) ->
    'E_S2CTipsShowType_PopUp';
d_enum_EnumS2CTipsShowType(1) ->
    'E_S2CTipsShowType_Marquee';
d_enum_EnumS2CTipsShowType(V) -> V.

d_enum_EnumS2CErrCode(0) -> 'E_S2CErrCode_Succ';
d_enum_EnumS2CErrCode(1) -> 'E_S2CErrCode_Sys';
d_enum_EnumS2CErrCode(2) -> 'E_S2CErrCode_Busy';
d_enum_EnumS2CErrCode(3) ->
    'E_S2CErrCode_OpToFrequency';
d_enum_EnumS2CErrCode(4) -> 'E_S2CErrCode_ReLogin';
d_enum_EnumS2CErrCode(5) -> 'E_S2CErrCode_NotLogin';
d_enum_EnumS2CErrCode(6) ->
    'E_S2CErrCode_LoginCheckTimeout';
d_enum_EnumS2CErrCode(7) ->
    'E_S2CErrCode_LoginCheckNotThrough';
d_enum_EnumS2CErrCode(8) -> 'E_S2CErrCode_ErrArgs';
d_enum_EnumS2CErrCode(9) -> 'E_S2CErrCode_ProtoErr';
d_enum_EnumS2CErrCode(10) ->
    'E_S2CErrCode_LoginTokenInvalid';
d_enum_EnumS2CErrCode(11) -> 'E_S2CErrCode_BeKicked';
d_enum_EnumS2CErrCode(100) ->
    'E_S2CErrCode_NotEnoughMoney';
d_enum_EnumS2CErrCode(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
	 is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'C2S_MahjongPrepare' ->
	  merge_msg_C2S_MahjongPrepare(Prev, New, TrUserData);
      'S2C_MahjongPrepare' ->
	  merge_msg_S2C_MahjongPrepare(Prev, New, TrUserData);
      'C2S_MahjongCancelPrepare' ->
	  merge_msg_C2S_MahjongCancelPrepare(Prev, New,
					     TrUserData);
      'S2C_MahjongCancelPrepare' ->
	  merge_msg_S2C_MahjongCancelPrepare(Prev, New,
					     TrUserData);
      'Struct_MahjongPlayerBrief' ->
	  merge_msg_Struct_MahjongPlayerBrief(Prev, New,
					      TrUserData);
      'C2S_MahjongStart' ->
	  merge_msg_C2S_MahjongStart(Prev, New, TrUserData);
      'S2C_MahjongStart' ->
	  merge_msg_S2C_MahjongStart(Prev, New, TrUserData);
      'S2C_MahjongDraw' ->
	  merge_msg_S2C_MahjongDraw(Prev, New, TrUserData);
      'C2S_MahjongDiscard' ->
	  merge_msg_C2S_MahjongDiscard(Prev, New, TrUserData);
      'S2C_MahjongDiscard' ->
	  merge_msg_S2C_MahjongDiscard(Prev, New, TrUserData);
      'C2S_MahjongPongs' ->
	  merge_msg_C2S_MahjongPongs(Prev, New, TrUserData);
      'S2C_MahjongPongs' ->
	  merge_msg_S2C_MahjongPongs(Prev, New, TrUserData);
      'C2S_MahjongKong' ->
	  merge_msg_C2S_MahjongKong(Prev, New, TrUserData);
      'S2C_MahjongKong' ->
	  merge_msg_S2C_MahjongKong(Prev, New, TrUserData);
      'C2S_MahjongChow' ->
	  merge_msg_C2S_MahjongChow(Prev, New, TrUserData);
      'S2C_MahjongChow' ->
	  merge_msg_S2C_MahjongChow(Prev, New, TrUserData);
      'C2S_MahjongHu' ->
	  merge_msg_C2S_MahjongHu(Prev, New, TrUserData);
      'S2C_MahjongHu' ->
	  merge_msg_S2C_MahjongHu(Prev, New, TrUserData);
      'C2S_MahjongZimo' ->
	  merge_msg_C2S_MahjongZimo(Prev, New, TrUserData);
      'S2C_MahjongZimo' ->
	  merge_msg_S2C_MahjongZimo(Prev, New, TrUserData);
      'C2S_MahjongChangeThree' ->
	  merge_msg_C2S_MahjongChangeThree(Prev, New, TrUserData);
      'S2C_MahjongChangeThree' ->
	  merge_msg_S2C_MahjongChangeThree(Prev, New, TrUserData);
      'C2S_MahjongDingQue' ->
	  merge_msg_C2S_MahjongDingQue(Prev, New, TrUserData);
      'Struct_MahjongDingQueBrief' ->
	  merge_msg_Struct_MahjongDingQueBrief(Prev, New,
					       TrUserData);
      'S2C_MahjongDingQue' ->
	  merge_msg_S2C_MahjongDingQue(Prev, New, TrUserData);
      'C2S_MahjongNextGame' ->
	  merge_msg_C2S_MahjongNextGame(Prev, New, TrUserData);
      'S2C_MahjongNextGame' ->
	  merge_msg_S2C_MahjongNextGame(Prev, New, TrUserData);
      'S2C_MahjongNoPrepare' ->
	  merge_msg_S2C_MahjongNoPrepare(Prev, New, TrUserData);
      'S2C_MahjongNoOwner' ->
	  merge_msg_S2C_MahjongNoOwner(Prev, New, TrUserData);
      'S2C_MahjongHaveNoPrepare' ->
	  merge_msg_S2C_MahjongHaveNoPrepare(Prev, New,
					     TrUserData);
      'S2C_MahjongFinishChangeThree' ->
	  merge_msg_S2C_MahjongFinishChangeThree(Prev, New,
						 TrUserData);
      'S2C_MahjongFinishDingQue' ->
	  merge_msg_S2C_MahjongFinishDingQue(Prev, New,
					     TrUserData);
      'S2C_MahjongNoPongs' ->
	  merge_msg_S2C_MahjongNoPongs(Prev, New, TrUserData);
      'S2C_MahjongNoKong' ->
	  merge_msg_S2C_MahjongNoKong(Prev, New, TrUserData);
      'S2C_MahjongNoZimo' ->
	  merge_msg_S2C_MahjongNoZimo(Prev, New, TrUserData);
      'S2C_MahjongNoHu' ->
	  merge_msg_S2C_MahjongNoHu(Prev, New, TrUserData);
      'S2C_MahjongHaveNoNextGame' ->
	  merge_msg_S2C_MahjongHaveNoNextGame(Prev, New,
					      TrUserData);
      'S2C_MahjongFinish' ->
	  merge_msg_S2C_MahjongFinish(Prev, New, TrUserData);
      'C2S_MahjongHistory' ->
	  merge_msg_C2S_MahjongHistory(Prev, New, TrUserData);
      'Struct_MahjongHistory' ->
	  merge_msg_Struct_MahjongHistory(Prev, New, TrUserData);
      'S2C_MahjongHistory' ->
	  merge_msg_S2C_MahjongHistory(Prev, New, TrUserData);
      'C2S_Login' ->
	  merge_msg_C2S_Login(Prev, New, TrUserData);
      'S2C_Login' ->
	  merge_msg_S2C_Login(Prev, New, TrUserData);
      'S2C_Err' -> merge_msg_S2C_Err(Prev, New, TrUserData);
      'S2C_PlayerInfo' ->
	  merge_msg_S2C_PlayerInfo(Prev, New, TrUserData);
      'C2S_Heartbeat' ->
	  merge_msg_C2S_Heartbeat(Prev, New, TrUserData);
      'S2C_Heartbeat' ->
	  merge_msg_S2C_Heartbeat(Prev, New, TrUserData);
      'C2S_Gm' -> merge_msg_C2S_Gm(Prev, New, TrUserData);
      'S2C_Gm' -> merge_msg_S2C_Gm(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_C2S_MahjongPrepare/3}).
merge_msg_C2S_MahjongPrepare(_Prev, New, _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_S2C_MahjongPrepare/3}).
merge_msg_S2C_MahjongPrepare(#'S2C_MahjongPrepare'{},
			     #'S2C_MahjongPrepare'{playerId = NFplayerId}, _) ->
    #'S2C_MahjongPrepare'{playerId = NFplayerId}.

-compile({nowarn_unused_function,merge_msg_C2S_MahjongCancelPrepare/3}).
merge_msg_C2S_MahjongCancelPrepare(_Prev, New,
				   _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_S2C_MahjongCancelPrepare/3}).
merge_msg_S2C_MahjongCancelPrepare(#'S2C_MahjongCancelPrepare'{},
				   #'S2C_MahjongCancelPrepare'{playerId =
								   NFplayerId},
				   _) ->
    #'S2C_MahjongCancelPrepare'{playerId = NFplayerId}.

-compile({nowarn_unused_function,merge_msg_Struct_MahjongPlayerBrief/3}).
merge_msg_Struct_MahjongPlayerBrief(#'Struct_MahjongPlayerBrief'{},
				    #'Struct_MahjongPlayerBrief'{id = NFid,
								 seatId =
								     NFseatId},
				    _) ->
    #'Struct_MahjongPlayerBrief'{id = NFid,
				 seatId = NFseatId}.

-compile({nowarn_unused_function,merge_msg_C2S_MahjongStart/3}).
merge_msg_C2S_MahjongStart(_Prev, New, _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_S2C_MahjongStart/3}).
merge_msg_S2C_MahjongStart(#'S2C_MahjongStart'{players =
						   PFplayers},
			   #'S2C_MahjongStart'{players = NFplayers},
			   TrUserData) ->
    #'S2C_MahjongStart'{players =
			    if PFplayers /= undefined, NFplayers /= undefined ->
				   'erlang_++'(PFplayers, NFplayers,
					       TrUserData);
			       PFplayers == undefined -> NFplayers;
			       NFplayers == undefined -> PFplayers
			    end}.

-compile({nowarn_unused_function,merge_msg_S2C_MahjongDraw/3}).
merge_msg_S2C_MahjongDraw(#'S2C_MahjongDraw'{},
			  #'S2C_MahjongDraw'{cardId = NFcardId,
					     seatId = NFseatId},
			  _) ->
    #'S2C_MahjongDraw'{cardId = NFcardId,
		       seatId = NFseatId}.

-compile({nowarn_unused_function,merge_msg_C2S_MahjongDiscard/3}).
merge_msg_C2S_MahjongDiscard(#'C2S_MahjongDiscard'{},
			     #'C2S_MahjongDiscard'{cardId = NFcardId}, _) ->
    #'C2S_MahjongDiscard'{cardId = NFcardId}.

-compile({nowarn_unused_function,merge_msg_S2C_MahjongDiscard/3}).
merge_msg_S2C_MahjongDiscard(#'S2C_MahjongDiscard'{},
			     #'S2C_MahjongDiscard'{cardId = NFcardId,
						   seatId = NFseatId},
			     _) ->
    #'S2C_MahjongDiscard'{cardId = NFcardId,
			  seatId = NFseatId}.

-compile({nowarn_unused_function,merge_msg_C2S_MahjongPongs/3}).
merge_msg_C2S_MahjongPongs(#'C2S_MahjongPongs'{},
			   #'C2S_MahjongPongs'{cardId = NFcardId}, _) ->
    #'C2S_MahjongPongs'{cardId = NFcardId}.

-compile({nowarn_unused_function,merge_msg_S2C_MahjongPongs/3}).
merge_msg_S2C_MahjongPongs(#'S2C_MahjongPongs'{},
			   #'S2C_MahjongPongs'{seatId = NFseatId,
					       cardId = NFcardId},
			   _) ->
    #'S2C_MahjongPongs'{seatId = NFseatId,
			cardId = NFcardId}.

-compile({nowarn_unused_function,merge_msg_C2S_MahjongKong/3}).
merge_msg_C2S_MahjongKong(#'C2S_MahjongKong'{},
			  #'C2S_MahjongKong'{cardId = NFcardId}, _) ->
    #'C2S_MahjongKong'{cardId = NFcardId}.

-compile({nowarn_unused_function,merge_msg_S2C_MahjongKong/3}).
merge_msg_S2C_MahjongKong(#'S2C_MahjongKong'{},
			  #'S2C_MahjongKong'{seatId = NFseatId,
					     cardId = NFcardId},
			  _) ->
    #'S2C_MahjongKong'{seatId = NFseatId,
		       cardId = NFcardId}.

-compile({nowarn_unused_function,merge_msg_C2S_MahjongChow/3}).
merge_msg_C2S_MahjongChow(#'C2S_MahjongChow'{},
			  #'C2S_MahjongChow'{cardId = NFcardId}, _) ->
    #'C2S_MahjongChow'{cardId = NFcardId}.

-compile({nowarn_unused_function,merge_msg_S2C_MahjongChow/3}).
merge_msg_S2C_MahjongChow(#'S2C_MahjongChow'{meld =
						 PFmeld},
			  #'S2C_MahjongChow'{seatId = NFseatId,
					     cardId = NFcardId, meld = NFmeld},
			  TrUserData) ->
    #'S2C_MahjongChow'{seatId = NFseatId, cardId = NFcardId,
		       meld =
			   if PFmeld /= undefined, NFmeld /= undefined ->
				  'erlang_++'(PFmeld, NFmeld, TrUserData);
			      PFmeld == undefined -> NFmeld;
			      NFmeld == undefined -> PFmeld
			   end}.

-compile({nowarn_unused_function,merge_msg_C2S_MahjongHu/3}).
merge_msg_C2S_MahjongHu(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_S2C_MahjongHu/3}).
merge_msg_S2C_MahjongHu(#'S2C_MahjongHu'{},
			#'S2C_MahjongHu'{winnerSeatId = NFwinnerSeatId,
					 loserSeatId = NFloserSeatId,
					 faan = NFfaan},
			_) ->
    #'S2C_MahjongHu'{winnerSeatId = NFwinnerSeatId,
		     loserSeatId = NFloserSeatId, faan = NFfaan}.

-compile({nowarn_unused_function,merge_msg_C2S_MahjongZimo/3}).
merge_msg_C2S_MahjongZimo(_Prev, New, _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_S2C_MahjongZimo/3}).
merge_msg_S2C_MahjongZimo(#'S2C_MahjongZimo'{},
			  #'S2C_MahjongZimo'{winnerSeatId = NFwinnerSeatId,
					     faan = NFfaan},
			  _) ->
    #'S2C_MahjongZimo'{winnerSeatId = NFwinnerSeatId,
		       faan = NFfaan}.

-compile({nowarn_unused_function,merge_msg_C2S_MahjongChangeThree/3}).
merge_msg_C2S_MahjongChangeThree(#'C2S_MahjongChangeThree'{threeCards
							       = PFthreeCards},
				 #'C2S_MahjongChangeThree'{seatId = NFseatId,
							   threeCards =
							       NFthreeCards},
				 TrUserData) ->
    #'C2S_MahjongChangeThree'{seatId = NFseatId,
			      threeCards =
				  if PFthreeCards /= undefined,
				     NFthreeCards /= undefined ->
					 'erlang_++'(PFthreeCards, NFthreeCards,
						     TrUserData);
				     PFthreeCards == undefined -> NFthreeCards;
				     NFthreeCards == undefined -> PFthreeCards
				  end}.

-compile({nowarn_unused_function,merge_msg_S2C_MahjongChangeThree/3}).
merge_msg_S2C_MahjongChangeThree(#'S2C_MahjongChangeThree'{},
				 #'S2C_MahjongChangeThree'{changeType =
							       NFchangeType},
				 _) ->
    #'S2C_MahjongChangeThree'{changeType = NFchangeType}.

-compile({nowarn_unused_function,merge_msg_C2S_MahjongDingQue/3}).
merge_msg_C2S_MahjongDingQue(#'C2S_MahjongDingQue'{},
			     #'C2S_MahjongDingQue'{seatId = NFseatId,
						   color = NFcolor},
			     _) ->
    #'C2S_MahjongDingQue'{seatId = NFseatId,
			  color = NFcolor}.

-compile({nowarn_unused_function,merge_msg_Struct_MahjongDingQueBrief/3}).
merge_msg_Struct_MahjongDingQueBrief(#'Struct_MahjongDingQueBrief'{},
				     #'Struct_MahjongDingQueBrief'{id = NFid,
								   color =
								       NFcolor},
				     _) ->
    #'Struct_MahjongDingQueBrief'{id = NFid,
				  color = NFcolor}.

-compile({nowarn_unused_function,merge_msg_S2C_MahjongDingQue/3}).
merge_msg_S2C_MahjongDingQue(#'S2C_MahjongDingQue'{players
						       = PFplayers},
			     #'S2C_MahjongDingQue'{players = NFplayers},
			     TrUserData) ->
    #'S2C_MahjongDingQue'{players =
			      if PFplayers /= undefined,
				 NFplayers /= undefined ->
				     'erlang_++'(PFplayers, NFplayers,
						 TrUserData);
				 PFplayers == undefined -> NFplayers;
				 NFplayers == undefined -> PFplayers
			      end}.

-compile({nowarn_unused_function,merge_msg_C2S_MahjongNextGame/3}).
merge_msg_C2S_MahjongNextGame(_Prev, New,
			      _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_S2C_MahjongNextGame/3}).
merge_msg_S2C_MahjongNextGame(#'S2C_MahjongNextGame'{},
			      #'S2C_MahjongNextGame'{currentround =
							 NFcurrentround},
			      _) ->
    #'S2C_MahjongNextGame'{currentround = NFcurrentround}.

-compile({nowarn_unused_function,merge_msg_S2C_MahjongNoPrepare/3}).
merge_msg_S2C_MahjongNoPrepare(_Prev, New,
			       _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_S2C_MahjongNoOwner/3}).
merge_msg_S2C_MahjongNoOwner(_Prev, New, _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_S2C_MahjongHaveNoPrepare/3}).
merge_msg_S2C_MahjongHaveNoPrepare(_Prev, New,
				   _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_S2C_MahjongFinishChangeThree/3}).
merge_msg_S2C_MahjongFinishChangeThree(#'S2C_MahjongFinishChangeThree'{},
				       #'S2C_MahjongFinishChangeThree'{id =
									   NFid},
				       _) ->
    #'S2C_MahjongFinishChangeThree'{id = NFid}.

-compile({nowarn_unused_function,merge_msg_S2C_MahjongFinishDingQue/3}).
merge_msg_S2C_MahjongFinishDingQue(#'S2C_MahjongFinishDingQue'{},
				   #'S2C_MahjongFinishDingQue'{id = NFid}, _) ->
    #'S2C_MahjongFinishDingQue'{id = NFid}.

-compile({nowarn_unused_function,merge_msg_S2C_MahjongNoPongs/3}).
merge_msg_S2C_MahjongNoPongs(#'S2C_MahjongNoPongs'{},
			     #'S2C_MahjongNoPongs'{seatId = NFseatId,
						   cardId = NFcardId},
			     _) ->
    #'S2C_MahjongNoPongs'{seatId = NFseatId,
			  cardId = NFcardId}.

-compile({nowarn_unused_function,merge_msg_S2C_MahjongNoKong/3}).
merge_msg_S2C_MahjongNoKong(#'S2C_MahjongNoKong'{},
			    #'S2C_MahjongNoKong'{seatId = NFseatId,
						 cardId = NFcardId},
			    _) ->
    #'S2C_MahjongNoKong'{seatId = NFseatId,
			 cardId = NFcardId}.

-compile({nowarn_unused_function,merge_msg_S2C_MahjongNoZimo/3}).
merge_msg_S2C_MahjongNoZimo(#'S2C_MahjongNoZimo'{},
			    #'S2C_MahjongNoZimo'{seatId = NFseatId}, _) ->
    #'S2C_MahjongNoZimo'{seatId = NFseatId}.

-compile({nowarn_unused_function,merge_msg_S2C_MahjongNoHu/3}).
merge_msg_S2C_MahjongNoHu(#'S2C_MahjongNoHu'{},
			  #'S2C_MahjongNoHu'{seatId = NFseatId}, _) ->
    #'S2C_MahjongNoHu'{seatId = NFseatId}.

-compile({nowarn_unused_function,merge_msg_S2C_MahjongHaveNoNextGame/3}).
merge_msg_S2C_MahjongHaveNoNextGame(_Prev, New,
				    _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_S2C_MahjongFinish/3}).
merge_msg_S2C_MahjongFinish(_Prev, New, _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_C2S_MahjongHistory/3}).
merge_msg_C2S_MahjongHistory(#'C2S_MahjongHistory'{},
			     #'C2S_MahjongHistory'{gameType = NFgameType,
						   startTime = NFstartTime,
						   endTime = NFendTime,
						   page = NFpage,
						   pageSize = NFpageSize},
			     _) ->
    #'C2S_MahjongHistory'{gameType = NFgameType,
			  startTime = NFstartTime, endTime = NFendTime,
			  page = NFpage, pageSize = NFpageSize}.

-compile({nowarn_unused_function,merge_msg_Struct_MahjongHistory/3}).
merge_msg_Struct_MahjongHistory(#'Struct_MahjongHistory'{start
							     = PFstart},
				#'Struct_MahjongHistory'{gameType = NFgameType,
							 time = NFtime,
							 cost = NFcost,
							 reward = NFreward,
							 start = NFstart,
							 'end' = NFend,
							 moneyBase =
							     NFmoneyBase,
							 moneyMulti =
							     NFmoneyMulti},
				TrUserData) ->
    #'Struct_MahjongHistory'{gameType = NFgameType,
			     time = NFtime, cost = NFcost, reward = NFreward,
			     start =
				 if PFstart /= undefined,
				    NFstart /= undefined ->
					'erlang_++'(PFstart, NFstart,
						    TrUserData);
				    PFstart == undefined -> NFstart;
				    NFstart == undefined -> PFstart
				 end,
			     'end' = NFend, moneyBase = NFmoneyBase,
			     moneyMulti = NFmoneyMulti}.

-compile({nowarn_unused_function,merge_msg_S2C_MahjongHistory/3}).
merge_msg_S2C_MahjongHistory(#'S2C_MahjongHistory'{data
						       = PFdata},
			     #'S2C_MahjongHistory'{data = NFdata},
			     TrUserData) ->
    #'S2C_MahjongHistory'{data =
			      if PFdata /= undefined, NFdata /= undefined ->
				     'erlang_++'(PFdata, NFdata, TrUserData);
				 PFdata == undefined -> NFdata;
				 NFdata == undefined -> PFdata
			      end}.

-compile({nowarn_unused_function,merge_msg_C2S_Login/3}).
merge_msg_C2S_Login(#'C2S_Login'{},
		    #'C2S_Login'{token = NFtoken}, _) ->
    #'C2S_Login'{token = NFtoken}.

-compile({nowarn_unused_function,merge_msg_S2C_Login/3}).
merge_msg_S2C_Login(#'S2C_Login'{},
		    #'S2C_Login'{id = NFid, nickname = NFnickname,
				 money = NFmoney},
		    _) ->
    #'S2C_Login'{id = NFid, nickname = NFnickname,
		 money = NFmoney}.

-compile({nowarn_unused_function,merge_msg_S2C_Err/3}).
merge_msg_S2C_Err(#'S2C_Err'{},
		  #'S2C_Err'{code = NFcode, type = NFtype, msg = NFmsg},
		  _) ->
    #'S2C_Err'{code = NFcode, type = NFtype, msg = NFmsg}.

-compile({nowarn_unused_function,merge_msg_S2C_PlayerInfo/3}).
merge_msg_S2C_PlayerInfo(#'S2C_PlayerInfo'{},
			 #'S2C_PlayerInfo'{moneyLeft = NFmoneyLeft}, _) ->
    #'S2C_PlayerInfo'{moneyLeft = NFmoneyLeft}.

-compile({nowarn_unused_function,merge_msg_C2S_Heartbeat/3}).
merge_msg_C2S_Heartbeat(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_S2C_Heartbeat/3}).
merge_msg_S2C_Heartbeat(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_C2S_Gm/3}).
merge_msg_C2S_Gm(#'C2S_Gm'{arg1 = PFarg1, arg2 = PFarg2,
			   arg3 = PFarg3, arg4 = PFarg4, arg5 = PFarg5,
			   arg6 = PFarg6, arg7 = PFarg7, arg8 = PFarg8,
			   arg9 = PFarg9},
		 #'C2S_Gm'{cmd = NFcmd, seqId = NFseqId, arg1 = NFarg1,
			   arg2 = NFarg2, arg3 = NFarg3, arg4 = NFarg4,
			   arg5 = NFarg5, arg6 = NFarg6, arg7 = NFarg7,
			   arg8 = NFarg8, arg9 = NFarg9},
		 _) ->
    #'C2S_Gm'{cmd = NFcmd, seqId = NFseqId,
	      arg1 =
		  if NFarg1 =:= undefined -> PFarg1;
		     true -> NFarg1
		  end,
	      arg2 =
		  if NFarg2 =:= undefined -> PFarg2;
		     true -> NFarg2
		  end,
	      arg3 =
		  if NFarg3 =:= undefined -> PFarg3;
		     true -> NFarg3
		  end,
	      arg4 =
		  if NFarg4 =:= undefined -> PFarg4;
		     true -> NFarg4
		  end,
	      arg5 =
		  if NFarg5 =:= undefined -> PFarg5;
		     true -> NFarg5
		  end,
	      arg6 =
		  if NFarg6 =:= undefined -> PFarg6;
		     true -> NFarg6
		  end,
	      arg7 =
		  if NFarg7 =:= undefined -> PFarg7;
		     true -> NFarg7
		  end,
	      arg8 =
		  if NFarg8 =:= undefined -> PFarg8;
		     true -> NFarg8
		  end,
	      arg9 =
		  if NFarg9 =:= undefined -> PFarg9;
		     true -> NFarg9
		  end}.

-compile({nowarn_unused_function,merge_msg_S2C_Gm/3}).
merge_msg_S2C_Gm(#'S2C_Gm'{},
		 #'S2C_Gm'{seqId = NFseqId, code = NFcode}, _) ->
    #'S2C_Gm'{seqId = NFseqId, code = NFcode}.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'C2S_MahjongPrepare' ->
	  v_msg_C2S_MahjongPrepare(Msg, [MsgName], TrUserData);
      'S2C_MahjongPrepare' ->
	  v_msg_S2C_MahjongPrepare(Msg, [MsgName], TrUserData);
      'C2S_MahjongCancelPrepare' ->
	  v_msg_C2S_MahjongCancelPrepare(Msg, [MsgName],
					 TrUserData);
      'S2C_MahjongCancelPrepare' ->
	  v_msg_S2C_MahjongCancelPrepare(Msg, [MsgName],
					 TrUserData);
      'Struct_MahjongPlayerBrief' ->
	  v_msg_Struct_MahjongPlayerBrief(Msg, [MsgName],
					  TrUserData);
      'C2S_MahjongStart' ->
	  v_msg_C2S_MahjongStart(Msg, [MsgName], TrUserData);
      'S2C_MahjongStart' ->
	  v_msg_S2C_MahjongStart(Msg, [MsgName], TrUserData);
      'S2C_MahjongDraw' ->
	  v_msg_S2C_MahjongDraw(Msg, [MsgName], TrUserData);
      'C2S_MahjongDiscard' ->
	  v_msg_C2S_MahjongDiscard(Msg, [MsgName], TrUserData);
      'S2C_MahjongDiscard' ->
	  v_msg_S2C_MahjongDiscard(Msg, [MsgName], TrUserData);
      'C2S_MahjongPongs' ->
	  v_msg_C2S_MahjongPongs(Msg, [MsgName], TrUserData);
      'S2C_MahjongPongs' ->
	  v_msg_S2C_MahjongPongs(Msg, [MsgName], TrUserData);
      'C2S_MahjongKong' ->
	  v_msg_C2S_MahjongKong(Msg, [MsgName], TrUserData);
      'S2C_MahjongKong' ->
	  v_msg_S2C_MahjongKong(Msg, [MsgName], TrUserData);
      'C2S_MahjongChow' ->
	  v_msg_C2S_MahjongChow(Msg, [MsgName], TrUserData);
      'S2C_MahjongChow' ->
	  v_msg_S2C_MahjongChow(Msg, [MsgName], TrUserData);
      'C2S_MahjongHu' ->
	  v_msg_C2S_MahjongHu(Msg, [MsgName], TrUserData);
      'S2C_MahjongHu' ->
	  v_msg_S2C_MahjongHu(Msg, [MsgName], TrUserData);
      'C2S_MahjongZimo' ->
	  v_msg_C2S_MahjongZimo(Msg, [MsgName], TrUserData);
      'S2C_MahjongZimo' ->
	  v_msg_S2C_MahjongZimo(Msg, [MsgName], TrUserData);
      'C2S_MahjongChangeThree' ->
	  v_msg_C2S_MahjongChangeThree(Msg, [MsgName],
				       TrUserData);
      'S2C_MahjongChangeThree' ->
	  v_msg_S2C_MahjongChangeThree(Msg, [MsgName],
				       TrUserData);
      'C2S_MahjongDingQue' ->
	  v_msg_C2S_MahjongDingQue(Msg, [MsgName], TrUserData);
      'Struct_MahjongDingQueBrief' ->
	  v_msg_Struct_MahjongDingQueBrief(Msg, [MsgName],
					   TrUserData);
      'S2C_MahjongDingQue' ->
	  v_msg_S2C_MahjongDingQue(Msg, [MsgName], TrUserData);
      'C2S_MahjongNextGame' ->
	  v_msg_C2S_MahjongNextGame(Msg, [MsgName], TrUserData);
      'S2C_MahjongNextGame' ->
	  v_msg_S2C_MahjongNextGame(Msg, [MsgName], TrUserData);
      'S2C_MahjongNoPrepare' ->
	  v_msg_S2C_MahjongNoPrepare(Msg, [MsgName], TrUserData);
      'S2C_MahjongNoOwner' ->
	  v_msg_S2C_MahjongNoOwner(Msg, [MsgName], TrUserData);
      'S2C_MahjongHaveNoPrepare' ->
	  v_msg_S2C_MahjongHaveNoPrepare(Msg, [MsgName],
					 TrUserData);
      'S2C_MahjongFinishChangeThree' ->
	  v_msg_S2C_MahjongFinishChangeThree(Msg, [MsgName],
					     TrUserData);
      'S2C_MahjongFinishDingQue' ->
	  v_msg_S2C_MahjongFinishDingQue(Msg, [MsgName],
					 TrUserData);
      'S2C_MahjongNoPongs' ->
	  v_msg_S2C_MahjongNoPongs(Msg, [MsgName], TrUserData);
      'S2C_MahjongNoKong' ->
	  v_msg_S2C_MahjongNoKong(Msg, [MsgName], TrUserData);
      'S2C_MahjongNoZimo' ->
	  v_msg_S2C_MahjongNoZimo(Msg, [MsgName], TrUserData);
      'S2C_MahjongNoHu' ->
	  v_msg_S2C_MahjongNoHu(Msg, [MsgName], TrUserData);
      'S2C_MahjongHaveNoNextGame' ->
	  v_msg_S2C_MahjongHaveNoNextGame(Msg, [MsgName],
					  TrUserData);
      'S2C_MahjongFinish' ->
	  v_msg_S2C_MahjongFinish(Msg, [MsgName], TrUserData);
      'C2S_MahjongHistory' ->
	  v_msg_C2S_MahjongHistory(Msg, [MsgName], TrUserData);
      'Struct_MahjongHistory' ->
	  v_msg_Struct_MahjongHistory(Msg, [MsgName], TrUserData);
      'S2C_MahjongHistory' ->
	  v_msg_S2C_MahjongHistory(Msg, [MsgName], TrUserData);
      'C2S_Login' ->
	  v_msg_C2S_Login(Msg, [MsgName], TrUserData);
      'S2C_Login' ->
	  v_msg_S2C_Login(Msg, [MsgName], TrUserData);
      'S2C_Err' -> v_msg_S2C_Err(Msg, [MsgName], TrUserData);
      'S2C_PlayerInfo' ->
	  v_msg_S2C_PlayerInfo(Msg, [MsgName], TrUserData);
      'C2S_Heartbeat' ->
	  v_msg_C2S_Heartbeat(Msg, [MsgName], TrUserData);
      'S2C_Heartbeat' ->
	  v_msg_S2C_Heartbeat(Msg, [MsgName], TrUserData);
      'C2S_Gm' -> v_msg_C2S_Gm(Msg, [MsgName], TrUserData);
      'S2C_Gm' -> v_msg_S2C_Gm(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_C2S_MahjongPrepare/3}).
-dialyzer({nowarn_function,v_msg_C2S_MahjongPrepare/3}).
v_msg_C2S_MahjongPrepare(#'C2S_MahjongPrepare'{}, _Path,
			 _) ->
    ok;
v_msg_C2S_MahjongPrepare(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'C2S_MahjongPrepare'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_S2C_MahjongPrepare/3}).
-dialyzer({nowarn_function,v_msg_S2C_MahjongPrepare/3}).
v_msg_S2C_MahjongPrepare(#'S2C_MahjongPrepare'{playerId
						   = F1},
			 Path, TrUserData) ->
    v_type_string(F1, [playerId | Path], TrUserData), ok;
v_msg_S2C_MahjongPrepare(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'S2C_MahjongPrepare'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_C2S_MahjongCancelPrepare/3}).
-dialyzer({nowarn_function,v_msg_C2S_MahjongCancelPrepare/3}).
v_msg_C2S_MahjongCancelPrepare(#'C2S_MahjongCancelPrepare'{},
			       _Path, _) ->
    ok;
v_msg_C2S_MahjongCancelPrepare(X, Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'C2S_MahjongCancelPrepare'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_S2C_MahjongCancelPrepare/3}).
-dialyzer({nowarn_function,v_msg_S2C_MahjongCancelPrepare/3}).
v_msg_S2C_MahjongCancelPrepare(#'S2C_MahjongCancelPrepare'{playerId
							       = F1},
			       Path, TrUserData) ->
    v_type_string(F1, [playerId | Path], TrUserData), ok;
v_msg_S2C_MahjongCancelPrepare(X, Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'S2C_MahjongCancelPrepare'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_Struct_MahjongPlayerBrief/3}).
-dialyzer({nowarn_function,v_msg_Struct_MahjongPlayerBrief/3}).
v_msg_Struct_MahjongPlayerBrief(#'Struct_MahjongPlayerBrief'{id
								 = F1,
							     seatId = F2},
				Path, TrUserData) ->
    v_type_string(F1, [id | Path], TrUserData),
    v_type_uint32(F2, [seatId | Path], TrUserData),
    ok;
v_msg_Struct_MahjongPlayerBrief(X, Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'Struct_MahjongPlayerBrief'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_C2S_MahjongStart/3}).
-dialyzer({nowarn_function,v_msg_C2S_MahjongStart/3}).
v_msg_C2S_MahjongStart(#'C2S_MahjongStart'{}, _Path,
		       _) ->
    ok;
v_msg_C2S_MahjongStart(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'C2S_MahjongStart'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_S2C_MahjongStart/3}).
-dialyzer({nowarn_function,v_msg_S2C_MahjongStart/3}).
v_msg_S2C_MahjongStart(#'S2C_MahjongStart'{players =
					       F1},
		       Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_Struct_MahjongPlayerBrief(Elem,
						[players | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'Struct_MahjongPlayerBrief'}},
			 F1, [players | Path])
    end,
    ok;
v_msg_S2C_MahjongStart(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'S2C_MahjongStart'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_S2C_MahjongDraw/3}).
-dialyzer({nowarn_function,v_msg_S2C_MahjongDraw/3}).
v_msg_S2C_MahjongDraw(#'S2C_MahjongDraw'{cardId = F1,
					 seatId = F2},
		      Path, TrUserData) ->
    v_type_uint32(F1, [cardId | Path], TrUserData),
    v_type_uint32(F2, [seatId | Path], TrUserData),
    ok;
v_msg_S2C_MahjongDraw(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'S2C_MahjongDraw'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_C2S_MahjongDiscard/3}).
-dialyzer({nowarn_function,v_msg_C2S_MahjongDiscard/3}).
v_msg_C2S_MahjongDiscard(#'C2S_MahjongDiscard'{cardId =
						   F1},
			 Path, TrUserData) ->
    v_type_uint32(F1, [cardId | Path], TrUserData), ok;
v_msg_C2S_MahjongDiscard(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'C2S_MahjongDiscard'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_S2C_MahjongDiscard/3}).
-dialyzer({nowarn_function,v_msg_S2C_MahjongDiscard/3}).
v_msg_S2C_MahjongDiscard(#'S2C_MahjongDiscard'{cardId =
						   F1,
					       seatId = F2},
			 Path, TrUserData) ->
    v_type_uint32(F1, [cardId | Path], TrUserData),
    v_type_uint32(F2, [seatId | Path], TrUserData),
    ok;
v_msg_S2C_MahjongDiscard(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'S2C_MahjongDiscard'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_C2S_MahjongPongs/3}).
-dialyzer({nowarn_function,v_msg_C2S_MahjongPongs/3}).
v_msg_C2S_MahjongPongs(#'C2S_MahjongPongs'{cardId = F1},
		       Path, TrUserData) ->
    v_type_uint32(F1, [cardId | Path], TrUserData), ok;
v_msg_C2S_MahjongPongs(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'C2S_MahjongPongs'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_S2C_MahjongPongs/3}).
-dialyzer({nowarn_function,v_msg_S2C_MahjongPongs/3}).
v_msg_S2C_MahjongPongs(#'S2C_MahjongPongs'{seatId = F1,
					   cardId = F2},
		       Path, TrUserData) ->
    v_type_uint32(F1, [seatId | Path], TrUserData),
    v_type_uint32(F2, [cardId | Path], TrUserData),
    ok;
v_msg_S2C_MahjongPongs(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'S2C_MahjongPongs'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_C2S_MahjongKong/3}).
-dialyzer({nowarn_function,v_msg_C2S_MahjongKong/3}).
v_msg_C2S_MahjongKong(#'C2S_MahjongKong'{cardId = F1},
		      Path, TrUserData) ->
    v_type_uint32(F1, [cardId | Path], TrUserData), ok;
v_msg_C2S_MahjongKong(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'C2S_MahjongKong'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_S2C_MahjongKong/3}).
-dialyzer({nowarn_function,v_msg_S2C_MahjongKong/3}).
v_msg_S2C_MahjongKong(#'S2C_MahjongKong'{seatId = F1,
					 cardId = F2},
		      Path, TrUserData) ->
    v_type_uint32(F1, [seatId | Path], TrUserData),
    v_type_uint32(F2, [cardId | Path], TrUserData),
    ok;
v_msg_S2C_MahjongKong(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'S2C_MahjongKong'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_C2S_MahjongChow/3}).
-dialyzer({nowarn_function,v_msg_C2S_MahjongChow/3}).
v_msg_C2S_MahjongChow(#'C2S_MahjongChow'{cardId = F1},
		      Path, TrUserData) ->
    v_type_uint32(F1, [cardId | Path], TrUserData), ok;
v_msg_C2S_MahjongChow(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'C2S_MahjongChow'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_S2C_MahjongChow/3}).
-dialyzer({nowarn_function,v_msg_S2C_MahjongChow/3}).
v_msg_S2C_MahjongChow(#'S2C_MahjongChow'{seatId = F1,
					 cardId = F2, meld = F3},
		      Path, TrUserData) ->
    v_type_uint32(F1, [seatId | Path], TrUserData),
    v_type_uint32(F2, [cardId | Path], TrUserData),
    if is_list(F3) ->
	   _ = [v_type_uint32(Elem, [meld | Path], TrUserData)
		|| Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, uint32}, F3,
			 [meld | Path])
    end,
    ok;
v_msg_S2C_MahjongChow(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'S2C_MahjongChow'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_C2S_MahjongHu/3}).
-dialyzer({nowarn_function,v_msg_C2S_MahjongHu/3}).
v_msg_C2S_MahjongHu(#'C2S_MahjongHu'{}, _Path, _) -> ok;
v_msg_C2S_MahjongHu(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'C2S_MahjongHu'}, X, Path).

-compile({nowarn_unused_function,v_msg_S2C_MahjongHu/3}).
-dialyzer({nowarn_function,v_msg_S2C_MahjongHu/3}).
v_msg_S2C_MahjongHu(#'S2C_MahjongHu'{winnerSeatId = F1,
				     loserSeatId = F2, faan = F3},
		    Path, TrUserData) ->
    v_type_uint32(F1, [winnerSeatId | Path], TrUserData),
    v_type_uint32(F2, [loserSeatId | Path], TrUserData),
    v_type_uint32(F3, [faan | Path], TrUserData),
    ok;
v_msg_S2C_MahjongHu(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'S2C_MahjongHu'}, X, Path).

-compile({nowarn_unused_function,v_msg_C2S_MahjongZimo/3}).
-dialyzer({nowarn_function,v_msg_C2S_MahjongZimo/3}).
v_msg_C2S_MahjongZimo(#'C2S_MahjongZimo'{}, _Path, _) ->
    ok;
v_msg_C2S_MahjongZimo(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'C2S_MahjongZimo'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_S2C_MahjongZimo/3}).
-dialyzer({nowarn_function,v_msg_S2C_MahjongZimo/3}).
v_msg_S2C_MahjongZimo(#'S2C_MahjongZimo'{winnerSeatId =
					     F1,
					 faan = F2},
		      Path, TrUserData) ->
    v_type_uint32(F1, [winnerSeatId | Path], TrUserData),
    v_type_uint32(F2, [faan | Path], TrUserData),
    ok;
v_msg_S2C_MahjongZimo(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'S2C_MahjongZimo'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_C2S_MahjongChangeThree/3}).
-dialyzer({nowarn_function,v_msg_C2S_MahjongChangeThree/3}).
v_msg_C2S_MahjongChangeThree(#'C2S_MahjongChangeThree'{seatId
							   = F1,
						       threeCards = F2},
			     Path, TrUserData) ->
    v_type_uint32(F1, [seatId | Path], TrUserData),
    if is_list(F2) ->
	   _ = [v_type_uint32(Elem, [threeCards | Path],
			      TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, uint32}, F2,
			 [threeCards | Path])
    end,
    ok;
v_msg_C2S_MahjongChangeThree(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'C2S_MahjongChangeThree'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_S2C_MahjongChangeThree/3}).
-dialyzer({nowarn_function,v_msg_S2C_MahjongChangeThree/3}).
v_msg_S2C_MahjongChangeThree(#'S2C_MahjongChangeThree'{changeType
							   = F1},
			     Path, TrUserData) ->
    v_type_uint32(F1, [changeType | Path], TrUserData), ok;
v_msg_S2C_MahjongChangeThree(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'S2C_MahjongChangeThree'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_C2S_MahjongDingQue/3}).
-dialyzer({nowarn_function,v_msg_C2S_MahjongDingQue/3}).
v_msg_C2S_MahjongDingQue(#'C2S_MahjongDingQue'{seatId =
						   F1,
					       color = F2},
			 Path, TrUserData) ->
    v_type_uint32(F1, [seatId | Path], TrUserData),
    v_type_uint32(F2, [color | Path], TrUserData),
    ok;
v_msg_C2S_MahjongDingQue(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'C2S_MahjongDingQue'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_Struct_MahjongDingQueBrief/3}).
-dialyzer({nowarn_function,v_msg_Struct_MahjongDingQueBrief/3}).
v_msg_Struct_MahjongDingQueBrief(#'Struct_MahjongDingQueBrief'{id
								   = F1,
							       color = F2},
				 Path, TrUserData) ->
    v_type_string(F1, [id | Path], TrUserData),
    v_type_uint32(F2, [color | Path], TrUserData),
    ok;
v_msg_Struct_MahjongDingQueBrief(X, Path,
				 _TrUserData) ->
    mk_type_error({expected_msg,
		   'Struct_MahjongDingQueBrief'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_S2C_MahjongDingQue/3}).
-dialyzer({nowarn_function,v_msg_S2C_MahjongDingQue/3}).
v_msg_S2C_MahjongDingQue(#'S2C_MahjongDingQue'{players =
						   F1},
			 Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_Struct_MahjongDingQueBrief(Elem,
						 [players | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'Struct_MahjongDingQueBrief'}},
			 F1, [players | Path])
    end,
    ok;
v_msg_S2C_MahjongDingQue(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'S2C_MahjongDingQue'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_C2S_MahjongNextGame/3}).
-dialyzer({nowarn_function,v_msg_C2S_MahjongNextGame/3}).
v_msg_C2S_MahjongNextGame(#'C2S_MahjongNextGame'{},
			  _Path, _) ->
    ok;
v_msg_C2S_MahjongNextGame(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'C2S_MahjongNextGame'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_S2C_MahjongNextGame/3}).
-dialyzer({nowarn_function,v_msg_S2C_MahjongNextGame/3}).
v_msg_S2C_MahjongNextGame(#'S2C_MahjongNextGame'{currentround
						     = F1},
			  Path, TrUserData) ->
    v_type_uint32(F1, [currentround | Path], TrUserData),
    ok;
v_msg_S2C_MahjongNextGame(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'S2C_MahjongNextGame'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_S2C_MahjongNoPrepare/3}).
-dialyzer({nowarn_function,v_msg_S2C_MahjongNoPrepare/3}).
v_msg_S2C_MahjongNoPrepare(#'S2C_MahjongNoPrepare'{},
			   _Path, _) ->
    ok;
v_msg_S2C_MahjongNoPrepare(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'S2C_MahjongNoPrepare'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_S2C_MahjongNoOwner/3}).
-dialyzer({nowarn_function,v_msg_S2C_MahjongNoOwner/3}).
v_msg_S2C_MahjongNoOwner(#'S2C_MahjongNoOwner'{}, _Path,
			 _) ->
    ok;
v_msg_S2C_MahjongNoOwner(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'S2C_MahjongNoOwner'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_S2C_MahjongHaveNoPrepare/3}).
-dialyzer({nowarn_function,v_msg_S2C_MahjongHaveNoPrepare/3}).
v_msg_S2C_MahjongHaveNoPrepare(#'S2C_MahjongHaveNoPrepare'{},
			       _Path, _) ->
    ok;
v_msg_S2C_MahjongHaveNoPrepare(X, Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'S2C_MahjongHaveNoPrepare'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_S2C_MahjongFinishChangeThree/3}).
-dialyzer({nowarn_function,v_msg_S2C_MahjongFinishChangeThree/3}).
v_msg_S2C_MahjongFinishChangeThree(#'S2C_MahjongFinishChangeThree'{id
								       = F1},
				   Path, TrUserData) ->
    v_type_string(F1, [id | Path], TrUserData), ok;
v_msg_S2C_MahjongFinishChangeThree(X, Path,
				   _TrUserData) ->
    mk_type_error({expected_msg,
		   'S2C_MahjongFinishChangeThree'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_S2C_MahjongFinishDingQue/3}).
-dialyzer({nowarn_function,v_msg_S2C_MahjongFinishDingQue/3}).
v_msg_S2C_MahjongFinishDingQue(#'S2C_MahjongFinishDingQue'{id
							       = F1},
			       Path, TrUserData) ->
    v_type_string(F1, [id | Path], TrUserData), ok;
v_msg_S2C_MahjongFinishDingQue(X, Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'S2C_MahjongFinishDingQue'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_S2C_MahjongNoPongs/3}).
-dialyzer({nowarn_function,v_msg_S2C_MahjongNoPongs/3}).
v_msg_S2C_MahjongNoPongs(#'S2C_MahjongNoPongs'{seatId =
						   F1,
					       cardId = F2},
			 Path, TrUserData) ->
    v_type_uint32(F1, [seatId | Path], TrUserData),
    v_type_uint32(F2, [cardId | Path], TrUserData),
    ok;
v_msg_S2C_MahjongNoPongs(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'S2C_MahjongNoPongs'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_S2C_MahjongNoKong/3}).
-dialyzer({nowarn_function,v_msg_S2C_MahjongNoKong/3}).
v_msg_S2C_MahjongNoKong(#'S2C_MahjongNoKong'{seatId =
						 F1,
					     cardId = F2},
			Path, TrUserData) ->
    v_type_uint32(F1, [seatId | Path], TrUserData),
    v_type_uint32(F2, [cardId | Path], TrUserData),
    ok;
v_msg_S2C_MahjongNoKong(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'S2C_MahjongNoKong'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_S2C_MahjongNoZimo/3}).
-dialyzer({nowarn_function,v_msg_S2C_MahjongNoZimo/3}).
v_msg_S2C_MahjongNoZimo(#'S2C_MahjongNoZimo'{seatId =
						 F1},
			Path, TrUserData) ->
    v_type_uint32(F1, [seatId | Path], TrUserData), ok;
v_msg_S2C_MahjongNoZimo(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'S2C_MahjongNoZimo'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_S2C_MahjongNoHu/3}).
-dialyzer({nowarn_function,v_msg_S2C_MahjongNoHu/3}).
v_msg_S2C_MahjongNoHu(#'S2C_MahjongNoHu'{seatId = F1},
		      Path, TrUserData) ->
    v_type_uint32(F1, [seatId | Path], TrUserData), ok;
v_msg_S2C_MahjongNoHu(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'S2C_MahjongNoHu'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_S2C_MahjongHaveNoNextGame/3}).
-dialyzer({nowarn_function,v_msg_S2C_MahjongHaveNoNextGame/3}).
v_msg_S2C_MahjongHaveNoNextGame(#'S2C_MahjongHaveNoNextGame'{},
				_Path, _) ->
    ok;
v_msg_S2C_MahjongHaveNoNextGame(X, Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'S2C_MahjongHaveNoNextGame'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_S2C_MahjongFinish/3}).
-dialyzer({nowarn_function,v_msg_S2C_MahjongFinish/3}).
v_msg_S2C_MahjongFinish(#'S2C_MahjongFinish'{}, _Path,
			_) ->
    ok;
v_msg_S2C_MahjongFinish(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'S2C_MahjongFinish'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_C2S_MahjongHistory/3}).
-dialyzer({nowarn_function,v_msg_C2S_MahjongHistory/3}).
v_msg_C2S_MahjongHistory(#'C2S_MahjongHistory'{gameType
						   = F1,
					       startTime = F2, endTime = F3,
					       page = F4, pageSize = F5},
			 Path, TrUserData) ->
    v_type_uint32(F1, [gameType | Path], TrUserData),
    v_type_uint32(F2, [startTime | Path], TrUserData),
    v_type_uint32(F3, [endTime | Path], TrUserData),
    v_type_uint32(F4, [page | Path], TrUserData),
    v_type_uint32(F5, [pageSize | Path], TrUserData),
    ok;
v_msg_C2S_MahjongHistory(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'C2S_MahjongHistory'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_Struct_MahjongHistory/3}).
-dialyzer({nowarn_function,v_msg_Struct_MahjongHistory/3}).
v_msg_Struct_MahjongHistory(#'Struct_MahjongHistory'{gameType
							 = F1,
						     time = F2, cost = F3,
						     reward = F4, start = F5,
						     'end' = F6, moneyBase = F7,
						     moneyMulti = F8},
			    Path, TrUserData) ->
    v_type_uint32(F1, [gameType | Path], TrUserData),
    v_type_uint32(F2, [time | Path], TrUserData),
    v_type_uint32(F3, [cost | Path], TrUserData),
    v_type_uint64(F4, [reward | Path], TrUserData),
    if is_list(F5) ->
	   _ = [v_type_uint32(Elem, [start | Path], TrUserData)
		|| Elem <- F5],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, uint32}, F5,
			 [start | Path])
    end,
    v_type_uint32(F6, ['end' | Path], TrUserData),
    v_type_uint32(F7, [moneyBase | Path], TrUserData),
    v_type_uint32(F8, [moneyMulti | Path], TrUserData),
    ok;
v_msg_Struct_MahjongHistory(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Struct_MahjongHistory'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_S2C_MahjongHistory/3}).
-dialyzer({nowarn_function,v_msg_S2C_MahjongHistory/3}).
v_msg_S2C_MahjongHistory(#'S2C_MahjongHistory'{data =
						   F1},
			 Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_Struct_MahjongHistory(Elem, [data | Path],
					    TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'Struct_MahjongHistory'}},
			 F1, [data | Path])
    end,
    ok;
v_msg_S2C_MahjongHistory(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'S2C_MahjongHistory'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_C2S_Login/3}).
-dialyzer({nowarn_function,v_msg_C2S_Login/3}).
v_msg_C2S_Login(#'C2S_Login'{token = F1}, Path,
		TrUserData) ->
    v_type_string(F1, [token | Path], TrUserData), ok;
v_msg_C2S_Login(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'C2S_Login'}, X, Path).

-compile({nowarn_unused_function,v_msg_S2C_Login/3}).
-dialyzer({nowarn_function,v_msg_S2C_Login/3}).
v_msg_S2C_Login(#'S2C_Login'{id = F1, nickname = F2,
			     money = F3},
		Path, TrUserData) ->
    v_type_string(F1, [id | Path], TrUserData),
    v_type_string(F2, [nickname | Path], TrUserData),
    v_type_uint64(F3, [money | Path], TrUserData),
    ok;
v_msg_S2C_Login(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'S2C_Login'}, X, Path).

-compile({nowarn_unused_function,v_msg_S2C_Err/3}).
-dialyzer({nowarn_function,v_msg_S2C_Err/3}).
v_msg_S2C_Err(#'S2C_Err'{code = F1, type = F2,
			 msg = F3},
	      Path, TrUserData) ->
    v_enum_EnumS2CErrCode(F1, [code | Path], TrUserData),
    v_enum_EnumS2CTipsShowType(F2, [type | Path],
			       TrUserData),
    v_type_string(F3, [msg | Path], TrUserData),
    ok;
v_msg_S2C_Err(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'S2C_Err'}, X, Path).

-compile({nowarn_unused_function,v_msg_S2C_PlayerInfo/3}).
-dialyzer({nowarn_function,v_msg_S2C_PlayerInfo/3}).
v_msg_S2C_PlayerInfo(#'S2C_PlayerInfo'{moneyLeft = F1},
		     Path, TrUserData) ->
    v_type_uint64(F1, [moneyLeft | Path], TrUserData), ok;
v_msg_S2C_PlayerInfo(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'S2C_PlayerInfo'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_C2S_Heartbeat/3}).
-dialyzer({nowarn_function,v_msg_C2S_Heartbeat/3}).
v_msg_C2S_Heartbeat(#'C2S_Heartbeat'{}, _Path, _) -> ok;
v_msg_C2S_Heartbeat(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'C2S_Heartbeat'}, X, Path).

-compile({nowarn_unused_function,v_msg_S2C_Heartbeat/3}).
-dialyzer({nowarn_function,v_msg_S2C_Heartbeat/3}).
v_msg_S2C_Heartbeat(#'S2C_Heartbeat'{}, _Path, _) -> ok;
v_msg_S2C_Heartbeat(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'S2C_Heartbeat'}, X, Path).

-compile({nowarn_unused_function,v_msg_C2S_Gm/3}).
-dialyzer({nowarn_function,v_msg_C2S_Gm/3}).
v_msg_C2S_Gm(#'C2S_Gm'{cmd = F1, seqId = F2, arg1 = F3,
		       arg2 = F4, arg3 = F5, arg4 = F6, arg5 = F7, arg6 = F8,
		       arg7 = F9, arg8 = F10, arg9 = F11},
	     Path, TrUserData) ->
    v_type_string(F1, [cmd | Path], TrUserData),
    v_type_int32(F2, [seqId | Path], TrUserData),
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [arg1 | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [arg2 | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_string(F5, [arg3 | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_type_string(F6, [arg4 | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true -> v_type_string(F7, [arg5 | Path], TrUserData)
    end,
    if F8 == undefined -> ok;
       true -> v_type_string(F8, [arg6 | Path], TrUserData)
    end,
    if F9 == undefined -> ok;
       true -> v_type_string(F9, [arg7 | Path], TrUserData)
    end,
    if F10 == undefined -> ok;
       true -> v_type_string(F10, [arg8 | Path], TrUserData)
    end,
    if F11 == undefined -> ok;
       true -> v_type_string(F11, [arg9 | Path], TrUserData)
    end,
    ok;
v_msg_C2S_Gm(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'C2S_Gm'}, X, Path).

-compile({nowarn_unused_function,v_msg_S2C_Gm/3}).
-dialyzer({nowarn_function,v_msg_S2C_Gm/3}).
v_msg_S2C_Gm(#'S2C_Gm'{seqId = F1, code = F2}, Path,
	     TrUserData) ->
    v_type_int32(F1, [seqId | Path], TrUserData),
    v_type_int32(F2, [code | Path], TrUserData),
    ok;
v_msg_S2C_Gm(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'S2C_Gm'}, X, Path).

-compile({nowarn_unused_function,v_enum_EnumS2CTipsShowType/3}).
-dialyzer({nowarn_function,v_enum_EnumS2CTipsShowType/3}).
v_enum_EnumS2CTipsShowType('E_S2CTipsShowType_PopUp',
			   _Path, _TrUserData) ->
    ok;
v_enum_EnumS2CTipsShowType('E_S2CTipsShowType_Marquee',
			   _Path, _TrUserData) ->
    ok;
v_enum_EnumS2CTipsShowType(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
v_enum_EnumS2CTipsShowType(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'EnumS2CTipsShowType'}, X,
		  Path).

-compile({nowarn_unused_function,v_enum_EnumS2CErrCode/3}).
-dialyzer({nowarn_function,v_enum_EnumS2CErrCode/3}).
v_enum_EnumS2CErrCode('E_S2CErrCode_Succ', _Path,
		      _TrUserData) ->
    ok;
v_enum_EnumS2CErrCode('E_S2CErrCode_Sys', _Path,
		      _TrUserData) ->
    ok;
v_enum_EnumS2CErrCode('E_S2CErrCode_Busy', _Path,
		      _TrUserData) ->
    ok;
v_enum_EnumS2CErrCode('E_S2CErrCode_OpToFrequency',
		      _Path, _TrUserData) ->
    ok;
v_enum_EnumS2CErrCode('E_S2CErrCode_ReLogin', _Path,
		      _TrUserData) ->
    ok;
v_enum_EnumS2CErrCode('E_S2CErrCode_NotLogin', _Path,
		      _TrUserData) ->
    ok;
v_enum_EnumS2CErrCode('E_S2CErrCode_LoginCheckTimeout',
		      _Path, _TrUserData) ->
    ok;
v_enum_EnumS2CErrCode('E_S2CErrCode_LoginCheckNotThrough',
		      _Path, _TrUserData) ->
    ok;
v_enum_EnumS2CErrCode('E_S2CErrCode_ErrArgs', _Path,
		      _TrUserData) ->
    ok;
v_enum_EnumS2CErrCode('E_S2CErrCode_ProtoErr', _Path,
		      _TrUserData) ->
    ok;
v_enum_EnumS2CErrCode('E_S2CErrCode_LoginTokenInvalid',
		      _Path, _TrUserData) ->
    ok;
v_enum_EnumS2CErrCode('E_S2CErrCode_BeKicked', _Path,
		      _TrUserData) ->
    ok;
v_enum_EnumS2CErrCode('E_S2CErrCode_NotEnoughMoney',
		      _Path, _TrUserData) ->
    ok;
v_enum_EnumS2CErrCode(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
v_enum_EnumS2CErrCode(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'EnumS2CErrCode'}, X,
		  Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_uint32/3}).
-dialyzer({nowarn_function,v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData)
    when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned,
		   32},
		  N, Path);
v_type_uint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_uint64/3}).
-dialyzer({nowarn_function,v_type_uint64/3}).
v_type_uint64(N, _Path, _TrUserData)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_uint64(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, uint64, unsigned,
		   64},
		  N, Path);
v_type_uint64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint64, unsigned, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{enum, 'EnumS2CTipsShowType'},
      [{'E_S2CTipsShowType_PopUp', 0},
       {'E_S2CTipsShowType_Marquee', 1}]},
     {{enum, 'EnumS2CErrCode'},
      [{'E_S2CErrCode_Succ', 0}, {'E_S2CErrCode_Sys', 1},
       {'E_S2CErrCode_Busy', 2},
       {'E_S2CErrCode_OpToFrequency', 3},
       {'E_S2CErrCode_ReLogin', 4},
       {'E_S2CErrCode_NotLogin', 5},
       {'E_S2CErrCode_LoginCheckTimeout', 6},
       {'E_S2CErrCode_LoginCheckNotThrough', 7},
       {'E_S2CErrCode_ErrArgs', 8},
       {'E_S2CErrCode_ProtoErr', 9},
       {'E_S2CErrCode_LoginTokenInvalid', 10},
       {'E_S2CErrCode_BeKicked', 11},
       {'E_S2CErrCode_NotEnoughMoney', 100}]},
     {{msg, 'C2S_MahjongPrepare'}, []},
     {{msg, 'S2C_MahjongPrepare'},
      [#field{name = playerId, fnum = 2, rnum = 2,
	      type = string, occurrence = required, opts = []}]},
     {{msg, 'C2S_MahjongCancelPrepare'}, []},
     {{msg, 'S2C_MahjongCancelPrepare'},
      [#field{name = playerId, fnum = 2, rnum = 2,
	      type = string, occurrence = required, opts = []}]},
     {{msg, 'Struct_MahjongPlayerBrief'},
      [#field{name = id, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = seatId, fnum = 2, rnum = 3, type = uint32,
	      occurrence = required, opts = []}]},
     {{msg, 'C2S_MahjongStart'}, []},
     {{msg, 'S2C_MahjongStart'},
      [#field{name = players, fnum = 2, rnum = 2,
	      type = {msg, 'Struct_MahjongPlayerBrief'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'S2C_MahjongDraw'},
      [#field{name = cardId, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []},
       #field{name = seatId, fnum = 2, rnum = 3, type = uint32,
	      occurrence = required, opts = []}]},
     {{msg, 'C2S_MahjongDiscard'},
      [#field{name = cardId, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []}]},
     {{msg, 'S2C_MahjongDiscard'},
      [#field{name = cardId, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []},
       #field{name = seatId, fnum = 2, rnum = 3, type = uint32,
	      occurrence = required, opts = []}]},
     {{msg, 'C2S_MahjongPongs'},
      [#field{name = cardId, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []}]},
     {{msg, 'S2C_MahjongPongs'},
      [#field{name = seatId, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []},
       #field{name = cardId, fnum = 2, rnum = 3, type = uint32,
	      occurrence = required, opts = []}]},
     {{msg, 'C2S_MahjongKong'},
      [#field{name = cardId, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []}]},
     {{msg, 'S2C_MahjongKong'},
      [#field{name = seatId, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []},
       #field{name = cardId, fnum = 2, rnum = 3, type = uint32,
	      occurrence = required, opts = []}]},
     {{msg, 'C2S_MahjongChow'},
      [#field{name = cardId, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []}]},
     {{msg, 'S2C_MahjongChow'},
      [#field{name = seatId, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []},
       #field{name = cardId, fnum = 2, rnum = 3, type = uint32,
	      occurrence = required, opts = []},
       #field{name = meld, fnum = 3, rnum = 4, type = uint32,
	      occurrence = repeated, opts = []}]},
     {{msg, 'C2S_MahjongHu'}, []},
     {{msg, 'S2C_MahjongHu'},
      [#field{name = winnerSeatId, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []},
       #field{name = loserSeatId, fnum = 2, rnum = 3,
	      type = uint32, occurrence = required, opts = []},
       #field{name = faan, fnum = 4, rnum = 4, type = uint32,
	      occurrence = required, opts = []}]},
     {{msg, 'C2S_MahjongZimo'}, []},
     {{msg, 'S2C_MahjongZimo'},
      [#field{name = winnerSeatId, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []},
       #field{name = faan, fnum = 2, rnum = 3, type = uint32,
	      occurrence = required, opts = []}]},
     {{msg, 'C2S_MahjongChangeThree'},
      [#field{name = seatId, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []},
       #field{name = threeCards, fnum = 2, rnum = 3,
	      type = uint32, occurrence = repeated, opts = []}]},
     {{msg, 'S2C_MahjongChangeThree'},
      [#field{name = changeType, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []}]},
     {{msg, 'C2S_MahjongDingQue'},
      [#field{name = seatId, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []},
       #field{name = color, fnum = 2, rnum = 3, type = uint32,
	      occurrence = required, opts = []}]},
     {{msg, 'Struct_MahjongDingQueBrief'},
      [#field{name = id, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = color, fnum = 2, rnum = 3, type = uint32,
	      occurrence = required, opts = []}]},
     {{msg, 'S2C_MahjongDingQue'},
      [#field{name = players, fnum = 2, rnum = 2,
	      type = {msg, 'Struct_MahjongDingQueBrief'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'C2S_MahjongNextGame'}, []},
     {{msg, 'S2C_MahjongNextGame'},
      [#field{name = currentround, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []}]},
     {{msg, 'S2C_MahjongNoPrepare'}, []},
     {{msg, 'S2C_MahjongNoOwner'}, []},
     {{msg, 'S2C_MahjongHaveNoPrepare'}, []},
     {{msg, 'S2C_MahjongFinishChangeThree'},
      [#field{name = id, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'S2C_MahjongFinishDingQue'},
      [#field{name = id, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'S2C_MahjongNoPongs'},
      [#field{name = seatId, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []},
       #field{name = cardId, fnum = 2, rnum = 3, type = uint32,
	      occurrence = required, opts = []}]},
     {{msg, 'S2C_MahjongNoKong'},
      [#field{name = seatId, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []},
       #field{name = cardId, fnum = 2, rnum = 3, type = uint32,
	      occurrence = required, opts = []}]},
     {{msg, 'S2C_MahjongNoZimo'},
      [#field{name = seatId, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []}]},
     {{msg, 'S2C_MahjongNoHu'},
      [#field{name = seatId, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []}]},
     {{msg, 'S2C_MahjongHaveNoNextGame'}, []},
     {{msg, 'S2C_MahjongFinish'}, []},
     {{msg, 'C2S_MahjongHistory'},
      [#field{name = gameType, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []},
       #field{name = startTime, fnum = 2, rnum = 3,
	      type = uint32, occurrence = required, opts = []},
       #field{name = endTime, fnum = 3, rnum = 4,
	      type = uint32, occurrence = required, opts = []},
       #field{name = page, fnum = 4, rnum = 5, type = uint32,
	      occurrence = required, opts = []},
       #field{name = pageSize, fnum = 5, rnum = 6,
	      type = uint32, occurrence = required, opts = []}]},
     {{msg, 'Struct_MahjongHistory'},
      [#field{name = gameType, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []},
       #field{name = time, fnum = 2, rnum = 3, type = uint32,
	      occurrence = required, opts = []},
       #field{name = cost, fnum = 3, rnum = 4, type = uint32,
	      occurrence = required, opts = []},
       #field{name = reward, fnum = 4, rnum = 5, type = uint64,
	      occurrence = required, opts = []},
       #field{name = start, fnum = 6, rnum = 6, type = uint32,
	      occurrence = repeated, opts = []},
       #field{name = 'end', fnum = 7, rnum = 7, type = uint32,
	      occurrence = required, opts = []},
       #field{name = moneyBase, fnum = 12, rnum = 8,
	      type = uint32, occurrence = required, opts = []},
       #field{name = moneyMulti, fnum = 13, rnum = 9,
	      type = uint32, occurrence = required, opts = []}]},
     {{msg, 'S2C_MahjongHistory'},
      [#field{name = data, fnum = 1, rnum = 2,
	      type = {msg, 'Struct_MahjongHistory'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'C2S_Login'},
      [#field{name = token, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'S2C_Login'},
      [#field{name = id, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = nickname, fnum = 3, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = money, fnum = 4, rnum = 4, type = uint64,
	      occurrence = required, opts = []}]},
     {{msg, 'S2C_Err'},
      [#field{name = code, fnum = 1, rnum = 2,
	      type = {enum, 'EnumS2CErrCode'}, occurrence = required,
	      opts = []},
       #field{name = type, fnum = 2, rnum = 3,
	      type = {enum, 'EnumS2CTipsShowType'},
	      occurrence = required, opts = []},
       #field{name = msg, fnum = 3, rnum = 4, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'S2C_PlayerInfo'},
      [#field{name = moneyLeft, fnum = 2, rnum = 2,
	      type = uint64, occurrence = required, opts = []}]},
     {{msg, 'C2S_Heartbeat'}, []},
     {{msg, 'S2C_Heartbeat'}, []},
     {{msg, 'C2S_Gm'},
      [#field{name = cmd, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = seqId, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = arg1, fnum = 11, rnum = 4, type = string,
	      occurrence = optional, opts = []},
       #field{name = arg2, fnum = 12, rnum = 5, type = string,
	      occurrence = optional, opts = []},
       #field{name = arg3, fnum = 13, rnum = 6, type = string,
	      occurrence = optional, opts = []},
       #field{name = arg4, fnum = 14, rnum = 7, type = string,
	      occurrence = optional, opts = []},
       #field{name = arg5, fnum = 15, rnum = 8, type = string,
	      occurrence = optional, opts = []},
       #field{name = arg6, fnum = 16, rnum = 9, type = string,
	      occurrence = optional, opts = []},
       #field{name = arg7, fnum = 17, rnum = 10, type = string,
	      occurrence = optional, opts = []},
       #field{name = arg8, fnum = 18, rnum = 11, type = string,
	      occurrence = optional, opts = []},
       #field{name = arg9, fnum = 19, rnum = 12, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'S2C_Gm'},
      [#field{name = seqId, fnum = 2, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = code, fnum = 3, rnum = 3, type = int32,
	      occurrence = required, opts = []}]}].


get_msg_names() ->
    ['C2S_MahjongPrepare', 'S2C_MahjongPrepare',
     'C2S_MahjongCancelPrepare', 'S2C_MahjongCancelPrepare',
     'Struct_MahjongPlayerBrief', 'C2S_MahjongStart',
     'S2C_MahjongStart', 'S2C_MahjongDraw',
     'C2S_MahjongDiscard', 'S2C_MahjongDiscard',
     'C2S_MahjongPongs', 'S2C_MahjongPongs',
     'C2S_MahjongKong', 'S2C_MahjongKong', 'C2S_MahjongChow',
     'S2C_MahjongChow', 'C2S_MahjongHu', 'S2C_MahjongHu',
     'C2S_MahjongZimo', 'S2C_MahjongZimo',
     'C2S_MahjongChangeThree', 'S2C_MahjongChangeThree',
     'C2S_MahjongDingQue', 'Struct_MahjongDingQueBrief',
     'S2C_MahjongDingQue', 'C2S_MahjongNextGame',
     'S2C_MahjongNextGame', 'S2C_MahjongNoPrepare',
     'S2C_MahjongNoOwner', 'S2C_MahjongHaveNoPrepare',
     'S2C_MahjongFinishChangeThree',
     'S2C_MahjongFinishDingQue', 'S2C_MahjongNoPongs',
     'S2C_MahjongNoKong', 'S2C_MahjongNoZimo',
     'S2C_MahjongNoHu', 'S2C_MahjongHaveNoNextGame',
     'S2C_MahjongFinish', 'C2S_MahjongHistory',
     'Struct_MahjongHistory', 'S2C_MahjongHistory',
     'C2S_Login', 'S2C_Login', 'S2C_Err', 'S2C_PlayerInfo',
     'C2S_Heartbeat', 'S2C_Heartbeat', 'C2S_Gm', 'S2C_Gm'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['C2S_MahjongPrepare', 'S2C_MahjongPrepare',
     'C2S_MahjongCancelPrepare', 'S2C_MahjongCancelPrepare',
     'Struct_MahjongPlayerBrief', 'C2S_MahjongStart',
     'S2C_MahjongStart', 'S2C_MahjongDraw',
     'C2S_MahjongDiscard', 'S2C_MahjongDiscard',
     'C2S_MahjongPongs', 'S2C_MahjongPongs',
     'C2S_MahjongKong', 'S2C_MahjongKong', 'C2S_MahjongChow',
     'S2C_MahjongChow', 'C2S_MahjongHu', 'S2C_MahjongHu',
     'C2S_MahjongZimo', 'S2C_MahjongZimo',
     'C2S_MahjongChangeThree', 'S2C_MahjongChangeThree',
     'C2S_MahjongDingQue', 'Struct_MahjongDingQueBrief',
     'S2C_MahjongDingQue', 'C2S_MahjongNextGame',
     'S2C_MahjongNextGame', 'S2C_MahjongNoPrepare',
     'S2C_MahjongNoOwner', 'S2C_MahjongHaveNoPrepare',
     'S2C_MahjongFinishChangeThree',
     'S2C_MahjongFinishDingQue', 'S2C_MahjongNoPongs',
     'S2C_MahjongNoKong', 'S2C_MahjongNoZimo',
     'S2C_MahjongNoHu', 'S2C_MahjongHaveNoNextGame',
     'S2C_MahjongFinish', 'C2S_MahjongHistory',
     'Struct_MahjongHistory', 'S2C_MahjongHistory',
     'C2S_Login', 'S2C_Login', 'S2C_Err', 'S2C_PlayerInfo',
     'C2S_Heartbeat', 'S2C_Heartbeat', 'C2S_Gm', 'S2C_Gm'].


get_enum_names() ->
    ['EnumS2CTipsShowType', 'EnumS2CErrCode'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('C2S_MahjongPrepare') -> [];
find_msg_def('S2C_MahjongPrepare') ->
    [#field{name = playerId, fnum = 2, rnum = 2,
	    type = string, occurrence = required, opts = []}];
find_msg_def('C2S_MahjongCancelPrepare') -> [];
find_msg_def('S2C_MahjongCancelPrepare') ->
    [#field{name = playerId, fnum = 2, rnum = 2,
	    type = string, occurrence = required, opts = []}];
find_msg_def('Struct_MahjongPlayerBrief') ->
    [#field{name = id, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = seatId, fnum = 2, rnum = 3, type = uint32,
	    occurrence = required, opts = []}];
find_msg_def('C2S_MahjongStart') -> [];
find_msg_def('S2C_MahjongStart') ->
    [#field{name = players, fnum = 2, rnum = 2,
	    type = {msg, 'Struct_MahjongPlayerBrief'},
	    occurrence = repeated, opts = []}];
find_msg_def('S2C_MahjongDraw') ->
    [#field{name = cardId, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []},
     #field{name = seatId, fnum = 2, rnum = 3, type = uint32,
	    occurrence = required, opts = []}];
find_msg_def('C2S_MahjongDiscard') ->
    [#field{name = cardId, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []}];
find_msg_def('S2C_MahjongDiscard') ->
    [#field{name = cardId, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []},
     #field{name = seatId, fnum = 2, rnum = 3, type = uint32,
	    occurrence = required, opts = []}];
find_msg_def('C2S_MahjongPongs') ->
    [#field{name = cardId, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []}];
find_msg_def('S2C_MahjongPongs') ->
    [#field{name = seatId, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []},
     #field{name = cardId, fnum = 2, rnum = 3, type = uint32,
	    occurrence = required, opts = []}];
find_msg_def('C2S_MahjongKong') ->
    [#field{name = cardId, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []}];
find_msg_def('S2C_MahjongKong') ->
    [#field{name = seatId, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []},
     #field{name = cardId, fnum = 2, rnum = 3, type = uint32,
	    occurrence = required, opts = []}];
find_msg_def('C2S_MahjongChow') ->
    [#field{name = cardId, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []}];
find_msg_def('S2C_MahjongChow') ->
    [#field{name = seatId, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []},
     #field{name = cardId, fnum = 2, rnum = 3, type = uint32,
	    occurrence = required, opts = []},
     #field{name = meld, fnum = 3, rnum = 4, type = uint32,
	    occurrence = repeated, opts = []}];
find_msg_def('C2S_MahjongHu') -> [];
find_msg_def('S2C_MahjongHu') ->
    [#field{name = winnerSeatId, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []},
     #field{name = loserSeatId, fnum = 2, rnum = 3,
	    type = uint32, occurrence = required, opts = []},
     #field{name = faan, fnum = 4, rnum = 4, type = uint32,
	    occurrence = required, opts = []}];
find_msg_def('C2S_MahjongZimo') -> [];
find_msg_def('S2C_MahjongZimo') ->
    [#field{name = winnerSeatId, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []},
     #field{name = faan, fnum = 2, rnum = 3, type = uint32,
	    occurrence = required, opts = []}];
find_msg_def('C2S_MahjongChangeThree') ->
    [#field{name = seatId, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []},
     #field{name = threeCards, fnum = 2, rnum = 3,
	    type = uint32, occurrence = repeated, opts = []}];
find_msg_def('S2C_MahjongChangeThree') ->
    [#field{name = changeType, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []}];
find_msg_def('C2S_MahjongDingQue') ->
    [#field{name = seatId, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []},
     #field{name = color, fnum = 2, rnum = 3, type = uint32,
	    occurrence = required, opts = []}];
find_msg_def('Struct_MahjongDingQueBrief') ->
    [#field{name = id, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = color, fnum = 2, rnum = 3, type = uint32,
	    occurrence = required, opts = []}];
find_msg_def('S2C_MahjongDingQue') ->
    [#field{name = players, fnum = 2, rnum = 2,
	    type = {msg, 'Struct_MahjongDingQueBrief'},
	    occurrence = repeated, opts = []}];
find_msg_def('C2S_MahjongNextGame') -> [];
find_msg_def('S2C_MahjongNextGame') ->
    [#field{name = currentround, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []}];
find_msg_def('S2C_MahjongNoPrepare') -> [];
find_msg_def('S2C_MahjongNoOwner') -> [];
find_msg_def('S2C_MahjongHaveNoPrepare') -> [];
find_msg_def('S2C_MahjongFinishChangeThree') ->
    [#field{name = id, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []}];
find_msg_def('S2C_MahjongFinishDingQue') ->
    [#field{name = id, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []}];
find_msg_def('S2C_MahjongNoPongs') ->
    [#field{name = seatId, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []},
     #field{name = cardId, fnum = 2, rnum = 3, type = uint32,
	    occurrence = required, opts = []}];
find_msg_def('S2C_MahjongNoKong') ->
    [#field{name = seatId, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []},
     #field{name = cardId, fnum = 2, rnum = 3, type = uint32,
	    occurrence = required, opts = []}];
find_msg_def('S2C_MahjongNoZimo') ->
    [#field{name = seatId, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []}];
find_msg_def('S2C_MahjongNoHu') ->
    [#field{name = seatId, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []}];
find_msg_def('S2C_MahjongHaveNoNextGame') -> [];
find_msg_def('S2C_MahjongFinish') -> [];
find_msg_def('C2S_MahjongHistory') ->
    [#field{name = gameType, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []},
     #field{name = startTime, fnum = 2, rnum = 3,
	    type = uint32, occurrence = required, opts = []},
     #field{name = endTime, fnum = 3, rnum = 4,
	    type = uint32, occurrence = required, opts = []},
     #field{name = page, fnum = 4, rnum = 5, type = uint32,
	    occurrence = required, opts = []},
     #field{name = pageSize, fnum = 5, rnum = 6,
	    type = uint32, occurrence = required, opts = []}];
find_msg_def('Struct_MahjongHistory') ->
    [#field{name = gameType, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []},
     #field{name = time, fnum = 2, rnum = 3, type = uint32,
	    occurrence = required, opts = []},
     #field{name = cost, fnum = 3, rnum = 4, type = uint32,
	    occurrence = required, opts = []},
     #field{name = reward, fnum = 4, rnum = 5, type = uint64,
	    occurrence = required, opts = []},
     #field{name = start, fnum = 6, rnum = 6, type = uint32,
	    occurrence = repeated, opts = []},
     #field{name = 'end', fnum = 7, rnum = 7, type = uint32,
	    occurrence = required, opts = []},
     #field{name = moneyBase, fnum = 12, rnum = 8,
	    type = uint32, occurrence = required, opts = []},
     #field{name = moneyMulti, fnum = 13, rnum = 9,
	    type = uint32, occurrence = required, opts = []}];
find_msg_def('S2C_MahjongHistory') ->
    [#field{name = data, fnum = 1, rnum = 2,
	    type = {msg, 'Struct_MahjongHistory'},
	    occurrence = repeated, opts = []}];
find_msg_def('C2S_Login') ->
    [#field{name = token, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []}];
find_msg_def('S2C_Login') ->
    [#field{name = id, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = nickname, fnum = 3, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = money, fnum = 4, rnum = 4, type = uint64,
	    occurrence = required, opts = []}];
find_msg_def('S2C_Err') ->
    [#field{name = code, fnum = 1, rnum = 2,
	    type = {enum, 'EnumS2CErrCode'}, occurrence = required,
	    opts = []},
     #field{name = type, fnum = 2, rnum = 3,
	    type = {enum, 'EnumS2CTipsShowType'},
	    occurrence = required, opts = []},
     #field{name = msg, fnum = 3, rnum = 4, type = string,
	    occurrence = required, opts = []}];
find_msg_def('S2C_PlayerInfo') ->
    [#field{name = moneyLeft, fnum = 2, rnum = 2,
	    type = uint64, occurrence = required, opts = []}];
find_msg_def('C2S_Heartbeat') -> [];
find_msg_def('S2C_Heartbeat') -> [];
find_msg_def('C2S_Gm') ->
    [#field{name = cmd, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = seqId, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = arg1, fnum = 11, rnum = 4, type = string,
	    occurrence = optional, opts = []},
     #field{name = arg2, fnum = 12, rnum = 5, type = string,
	    occurrence = optional, opts = []},
     #field{name = arg3, fnum = 13, rnum = 6, type = string,
	    occurrence = optional, opts = []},
     #field{name = arg4, fnum = 14, rnum = 7, type = string,
	    occurrence = optional, opts = []},
     #field{name = arg5, fnum = 15, rnum = 8, type = string,
	    occurrence = optional, opts = []},
     #field{name = arg6, fnum = 16, rnum = 9, type = string,
	    occurrence = optional, opts = []},
     #field{name = arg7, fnum = 17, rnum = 10, type = string,
	    occurrence = optional, opts = []},
     #field{name = arg8, fnum = 18, rnum = 11, type = string,
	    occurrence = optional, opts = []},
     #field{name = arg9, fnum = 19, rnum = 12, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('S2C_Gm') ->
    [#field{name = seqId, fnum = 2, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = code, fnum = 3, rnum = 3, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(_) -> error.


find_enum_def('EnumS2CTipsShowType') ->
    [{'E_S2CTipsShowType_PopUp', 0},
     {'E_S2CTipsShowType_Marquee', 1}];
find_enum_def('EnumS2CErrCode') ->
    [{'E_S2CErrCode_Succ', 0}, {'E_S2CErrCode_Sys', 1},
     {'E_S2CErrCode_Busy', 2},
     {'E_S2CErrCode_OpToFrequency', 3},
     {'E_S2CErrCode_ReLogin', 4},
     {'E_S2CErrCode_NotLogin', 5},
     {'E_S2CErrCode_LoginCheckTimeout', 6},
     {'E_S2CErrCode_LoginCheckNotThrough', 7},
     {'E_S2CErrCode_ErrArgs', 8},
     {'E_S2CErrCode_ProtoErr', 9},
     {'E_S2CErrCode_LoginTokenInvalid', 10},
     {'E_S2CErrCode_BeKicked', 11},
     {'E_S2CErrCode_NotEnoughMoney', 100}];
find_enum_def(_) -> error.


enum_symbol_by_value('EnumS2CTipsShowType', Value) ->
    enum_symbol_by_value_EnumS2CTipsShowType(Value);
enum_symbol_by_value('EnumS2CErrCode', Value) ->
    enum_symbol_by_value_EnumS2CErrCode(Value).


enum_value_by_symbol('EnumS2CTipsShowType', Sym) ->
    enum_value_by_symbol_EnumS2CTipsShowType(Sym);
enum_value_by_symbol('EnumS2CErrCode', Sym) ->
    enum_value_by_symbol_EnumS2CErrCode(Sym).


enum_symbol_by_value_EnumS2CTipsShowType(0) ->
    'E_S2CTipsShowType_PopUp';
enum_symbol_by_value_EnumS2CTipsShowType(1) ->
    'E_S2CTipsShowType_Marquee'.


enum_value_by_symbol_EnumS2CTipsShowType('E_S2CTipsShowType_PopUp') ->
    0;
enum_value_by_symbol_EnumS2CTipsShowType('E_S2CTipsShowType_Marquee') ->
    1.

enum_symbol_by_value_EnumS2CErrCode(0) ->
    'E_S2CErrCode_Succ';
enum_symbol_by_value_EnumS2CErrCode(1) ->
    'E_S2CErrCode_Sys';
enum_symbol_by_value_EnumS2CErrCode(2) ->
    'E_S2CErrCode_Busy';
enum_symbol_by_value_EnumS2CErrCode(3) ->
    'E_S2CErrCode_OpToFrequency';
enum_symbol_by_value_EnumS2CErrCode(4) ->
    'E_S2CErrCode_ReLogin';
enum_symbol_by_value_EnumS2CErrCode(5) ->
    'E_S2CErrCode_NotLogin';
enum_symbol_by_value_EnumS2CErrCode(6) ->
    'E_S2CErrCode_LoginCheckTimeout';
enum_symbol_by_value_EnumS2CErrCode(7) ->
    'E_S2CErrCode_LoginCheckNotThrough';
enum_symbol_by_value_EnumS2CErrCode(8) ->
    'E_S2CErrCode_ErrArgs';
enum_symbol_by_value_EnumS2CErrCode(9) ->
    'E_S2CErrCode_ProtoErr';
enum_symbol_by_value_EnumS2CErrCode(10) ->
    'E_S2CErrCode_LoginTokenInvalid';
enum_symbol_by_value_EnumS2CErrCode(11) ->
    'E_S2CErrCode_BeKicked';
enum_symbol_by_value_EnumS2CErrCode(100) ->
    'E_S2CErrCode_NotEnoughMoney'.


enum_value_by_symbol_EnumS2CErrCode('E_S2CErrCode_Succ') ->
    0;
enum_value_by_symbol_EnumS2CErrCode('E_S2CErrCode_Sys') ->
    1;
enum_value_by_symbol_EnumS2CErrCode('E_S2CErrCode_Busy') ->
    2;
enum_value_by_symbol_EnumS2CErrCode('E_S2CErrCode_OpToFrequency') ->
    3;
enum_value_by_symbol_EnumS2CErrCode('E_S2CErrCode_ReLogin') ->
    4;
enum_value_by_symbol_EnumS2CErrCode('E_S2CErrCode_NotLogin') ->
    5;
enum_value_by_symbol_EnumS2CErrCode('E_S2CErrCode_LoginCheckTimeout') ->
    6;
enum_value_by_symbol_EnumS2CErrCode('E_S2CErrCode_LoginCheckNotThrough') ->
    7;
enum_value_by_symbol_EnumS2CErrCode('E_S2CErrCode_ErrArgs') ->
    8;
enum_value_by_symbol_EnumS2CErrCode('E_S2CErrCode_ProtoErr') ->
    9;
enum_value_by_symbol_EnumS2CErrCode('E_S2CErrCode_LoginTokenInvalid') ->
    10;
enum_value_by_symbol_EnumS2CErrCode('E_S2CErrCode_BeKicked') ->
    11;
enum_value_by_symbol_EnumS2CErrCode('E_S2CErrCode_NotEnoughMoney') ->
    100.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> undefined.



gpb_version_as_string() ->
    "4.4.0".

gpb_version_as_list() ->
    [4,4,0].
